<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Roykesydon</title>
        <link>https://roykesydon.github.io/Blog/post/</link>
        <description>Recent content in Posts on Roykesydon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 25 Aug 2024 00:00:17 +0800</lastBuildDate><atom:link href="https://roykesydon.github.io/Blog/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>SQL 語法筆記</title>
        <link>https://roykesydon.github.io/Blog/p/sql-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sun, 25 Aug 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/sql-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;邏輯上的執行順序&#34;&gt;邏輯上的執行順序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;FROM&lt;/li&gt;
&lt;li&gt;WHERE&lt;/li&gt;
&lt;li&gt;GROUP BY&lt;/li&gt;
&lt;li&gt;HAVING&lt;/li&gt;
&lt;li&gt;DISTINCT&lt;/li&gt;
&lt;li&gt;SELECT&lt;/li&gt;
&lt;li&gt;ORDER BY&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ddl&#34;&gt;DDL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Definition Language&lt;/li&gt;
&lt;li&gt;用來定義資料庫的結構&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-database&#34;&gt;Create Database&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DATABASE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;create-table&#34;&gt;Create Table&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;....&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Data types:
&lt;ul&gt;
&lt;li&gt;INTENGER, VARCHAR(size), TEXT, etc.&lt;/li&gt;
&lt;li&gt;VARCHAR
&lt;ul&gt;
&lt;li&gt;Variable-length character string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;....&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Auto Increment
&lt;ul&gt;
&lt;li&gt;用來自動增加一個數值&lt;/li&gt;
&lt;li&gt;通常用在 primary key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Primary Key
&lt;ul&gt;
&lt;li&gt;用來唯一識別一筆資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Foreign Key
&lt;ul&gt;
&lt;li&gt;用來避免資料不一致&lt;/li&gt;
&lt;li&gt;必須是另一個 table 的 primary key&lt;/li&gt;
&lt;li&gt;可以是 NULL&lt;/li&gt;
&lt;li&gt;可以設置 reference action
&lt;ul&gt;
&lt;li&gt;比如 &lt;code&gt;ON DELETE CASCADE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not Null
&lt;ul&gt;
&lt;li&gt;用來限制 column 不可以是 NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique
&lt;ul&gt;
&lt;li&gt;不像 primary key，可以有 null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check
&lt;ul&gt;
&lt;li&gt;用來限制 column 的值，可以自己寫條件&lt;/li&gt;
&lt;li&gt;可以用在多個 column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dcl&#34;&gt;DCL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Control Language&lt;/li&gt;
&lt;li&gt;用來控制資料庫的存取權限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dql&#34;&gt;DQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Query Language&lt;/li&gt;
&lt;li&gt;用來查詢資料庫中的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;select&#34;&gt;Select&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; 代表所有的 column&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;column&#34;&gt;column&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;column 也可以利用 operator
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;AS&lt;/code&gt; 來改變 column 的名稱
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;where&#34;&gt;WHERE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;針對 row 的條件過濾&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;any-all&#34;&gt;ANY, ALL&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來比較子查詢的結果&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ANY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;如果用 &amp;gt; ANY subquery，而 subquery 沒有任何結果，那麼就會回傳 false，因為你的數值沒有比任何一人都高（要至少一人）&lt;/li&gt;
&lt;li&gt;如果是 &amp;gt; ALL subquery，那麼就是要比所有人都高，所以如果 subquery 沒有任何結果，那麼就會回傳 true，你的數值比裡面的東西都高&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;join&#34;&gt;JOIN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來結合兩個 table&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;types
&lt;ul&gt;
&lt;li&gt;INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;group-by&#34;&gt;GROUP BY&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來將資料分組&lt;/li&gt;
&lt;li&gt;針對 group 的條件過濾&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;select 的 column 必須是 group by 的 column 或是 aggregate function&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;having&#34;&gt;HAVING&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來過濾 group by 的結果&lt;/li&gt;
&lt;li&gt;要有 group by 才能使用&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HAVING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;order-by&#34;&gt;ORDER BY&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;可以指定升冪或降冪
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DESC&lt;/code&gt;, &lt;code&gt;ASC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;limit--offset&#34;&gt;LIMIT &amp;amp; OFFSET&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來限制查詢結果的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;distinct&#34;&gt;DISTINCT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來去除重複的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;case&#34;&gt;CASE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來做條件判斷&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CASE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ELSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查詢結果集合運算&#34;&gt;查詢結果集合運算&lt;/h4&gt;
&lt;h5 id=&#34;union&#34;&gt;UNION&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來結合兩個查詢結果&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNION ALL&lt;/code&gt; 會包含重複的資料
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UNION&lt;/code&gt; 會自動去除重複的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;每個查詢的 column 數量必須相同&lt;/li&gt;
&lt;li&gt;每個查詢的 column 的資料型態必須相同&lt;/li&gt;
&lt;li&gt;column 的順序必須相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;intersect&#34;&gt;INTERSECT&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來取兩個查詢結果的交集&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;except&#34;&gt;EXCEPT&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來取兩個查詢結果的差集&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;all&#34;&gt;ALL&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;要加這個才會包含重複的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;subquery&#34;&gt;Subquery&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;select, from, where 等等都可以有 subquery&lt;/li&gt;
&lt;li&gt;他可以視情況回傳一個值，也可以回傳一堆 row，或是一個 column（一維向量&lt;/li&gt;
&lt;li&gt;可以用 outer query 的 column 來當作 subquery 的條件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;correlated-subquery&#34;&gt;Correlated Subquery&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;一個 subquery 用到 outer query 的 value&lt;/li&gt;
&lt;li&gt;可能導致效能問題，比如每一筆資料都要執行一次 subquery
&lt;ul&gt;
&lt;li&gt;像是兩層 for loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flattening
&lt;ul&gt;
&lt;li&gt;寫成等效的 flat query&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dml&#34;&gt;DML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Manipulation Language&lt;/li&gt;
&lt;li&gt;用來操作資料庫中的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;insert&#34;&gt;Insert&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以一次插入多筆資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;delete&#34;&gt;Delete&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;DELETE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;operators&#34;&gt;Operators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic Operators&lt;/li&gt;
&lt;li&gt;Comparison Operators&lt;/li&gt;
&lt;li&gt;Bitwise Operators&lt;/li&gt;
&lt;li&gt;String Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Math Functions&lt;/li&gt;
&lt;li&gt;Date Functions&lt;/li&gt;
&lt;li&gt;String Functions&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Kafka 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/kafka-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sat, 17 Aug 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/kafka-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;kafka&#34;&gt;Kafka&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;event streaming platform&lt;/li&gt;
&lt;li&gt;專注在 publish / subscribe&lt;/li&gt;
&lt;li&gt;message 會在一段時間後被刪除，而不是等待 consumer 處理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;topic&#34;&gt;Topic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個特定的 data stream
&lt;ul&gt;
&lt;li&gt;一系列的 message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有限制 topic 的數量&lt;/li&gt;
&lt;li&gt;由 name 來識別&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;topic-replication&#34;&gt;Topic replication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果有一個 broker down 了，會有另一個 broker 繼續提供複本&lt;/li&gt;
&lt;li&gt;topic replication factor
&lt;ul&gt;
&lt;li&gt;這個 factor 要大於 1&lt;/li&gt;
&lt;li&gt;常見的設定值是 3&lt;/li&gt;
&lt;li&gt;這個數值代表有幾個複本
&lt;ul&gt;
&lt;li&gt;複本會被放在其他的 broker 上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設為 n，可以承受 n-1 個 broker down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一個 partition 只會有一個 broker 作為他的 leader
&lt;ul&gt;
&lt;li&gt;其他的有複本的 broker 被稱為 ISR (in-sync replica)&lt;/li&gt;
&lt;li&gt;producer 寫入的時候，只能寫到 leader&lt;/li&gt;
&lt;li&gt;consumer 預設也只會從 leader 讀取
&lt;ul&gt;
&lt;li&gt;2.4 版本後，可以設定從 ISR 讀取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partition&#34;&gt;Partition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;topic 通常會被分成多個 partition&lt;/li&gt;
&lt;li&gt;partiton 中的 message 是有序的
&lt;ul&gt;
&lt;li&gt;message 會獲得 id，他是 incremental 的&lt;/li&gt;
&lt;li&gt;這個 id 被稱為 offset
&lt;ul&gt;
&lt;li&gt;只在特定的 partition 中有意義，不同的 partition 的 offset 是獨立的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但不同 partition 的 message 是沒有順序的，只有在同一個 partition 中才有順序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;immutable
&lt;ul&gt;
&lt;li&gt;一旦 message 被寫入，就不能被修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常 partition 的數量至少為 consumer 數量
&lt;ul&gt;
&lt;li&gt;如果 partition 數量少於 consumer 數量，有些 consumer 會閒置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;message&#34;&gt;Message&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;message 也被叫做 event&lt;/li&gt;
&lt;li&gt;構成
&lt;ul&gt;
&lt;li&gt;required
&lt;ul&gt;
&lt;li&gt;key, value, compression type, partition, offset, timestamp
&lt;ul&gt;
&lt;li&gt;key, value 可以是 null&lt;/li&gt;
&lt;li&gt;timestamp 可以由系統設置&lt;/li&gt;
&lt;li&gt;message 發給 kafka 後，會加上 partition, offset, timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;optional
&lt;ul&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;retention
&lt;ul&gt;
&lt;li&gt;message 會在一段時間後被刪除&lt;/li&gt;
&lt;li&gt;預設 7 天，可以設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;message-serialization--deserialization&#34;&gt;Message serialization / deserialization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 會將 message 轉換成 bytes 才傳輸&lt;/li&gt;
&lt;li&gt;用在 key 和 value&lt;/li&gt;
&lt;li&gt;不支援的格式也可以用自訂的 serializer / deserializer
&lt;ul&gt;
&lt;li&gt;ex: JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點
&lt;ul&gt;
&lt;li&gt;可以用不同的語言來寫 producer 和 consumer&lt;/li&gt;
&lt;li&gt;減少資料大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;producer&#34;&gt;Producer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;producer 會將 message 寫入到 topic&lt;/li&gt;
&lt;li&gt;producer 會知道要寫入哪個 partition&lt;/li&gt;
&lt;li&gt;send message
&lt;ul&gt;
&lt;li&gt;會帶有一個 key，可以是任何資料型態
&lt;ul&gt;
&lt;li&gt;如果 key 是 null，會以 round-robin 的方式分配到 partition&lt;/li&gt;
&lt;li&gt;如果不是，同個 key 會被分配到同個 partition，因為有 hash function 來決定
&lt;ul&gt;
&lt;li&gt;kafka partitioner 會負責做 key hashing&lt;/li&gt;
&lt;li&gt;預設 hash function 是 murmur2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;producer-acknoledgement-ack&#34;&gt;Producer acknoledgement (ack)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有三種 ack
&lt;ul&gt;
&lt;li&gt;acks=0
&lt;ul&gt;
&lt;li&gt;producer 不會等待 broker 的回應&lt;/li&gt;
&lt;li&gt;這樣會有最高的效能，但是可能會有 message 丟失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;acks=1
&lt;ul&gt;
&lt;li&gt;producer 會等待 leader 的回應&lt;/li&gt;
&lt;li&gt;這樣會有中等的效能，但是可能發生 leader down 的情況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;acks=all
&lt;ul&gt;
&lt;li&gt;producer 會等待所有的 ISR 的回應&lt;/li&gt;
&lt;li&gt;這樣會有最低的效能，但是不會有 message 丟失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consumer&#34;&gt;Consumer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;consumer 會從 topic 中讀取 message
&lt;ul&gt;
&lt;li&gt;是 pull 的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 producer 解耦&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;push-vs-pull&#34;&gt;Push vs Pull&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;push
&lt;ul&gt;
&lt;li&gt;沒辦法知道 consumer 能不能 handle message&lt;/li&gt;
&lt;li&gt;如果 push 出去但 consumer 來不及消化會造成問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pull
&lt;ul&gt;
&lt;li&gt;如果 consumer 速度比 producer 慢，可以之後慢慢補上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;consumer-group&#34;&gt;Consumer group&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個 application 可以有多個 consumer，共同組成一個 consumer group&lt;/li&gt;
&lt;li&gt;同個 consumer group 中的 consumer 會共同設置一個 group id&lt;/li&gt;
&lt;li&gt;consumer group 中的所有 consumer 會以 exclusive 的方式從 partition 中讀取 message
&lt;ul&gt;
&lt;li&gt;不會有同一個 partition 被配給多個 consumer&lt;/li&gt;
&lt;li&gt;如果 consumer 比 partition 多，有些 consumer 會閒置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;group coordinator
&lt;ul&gt;
&lt;li&gt;會負責管理 group 中的 consumer&lt;/li&gt;
&lt;li&gt;會負責分配 partition 給 consumer&lt;/li&gt;
&lt;li&gt;利用 __consumer_offsets 來記錄 consumer group 中的 consumer 的 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;consumer-offset&#34;&gt;Consumer offset&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;kafka 會紀錄 consumer group 中的每個 consumer 消耗到哪裡了&lt;/li&gt;
&lt;li&gt;會放在 topic 的 __consumer_offsets&lt;/li&gt;
&lt;li&gt;當 group 中的 consumer 取得 message 後，會週期性的 commit offset，讓 kafka 更新到 ＿consumer_offsets
&lt;ul&gt;
&lt;li&gt;這樣即使 consumer down 了，下次啟動時，也可以從上次消耗的地方繼續&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三種 commit 策略
&lt;ul&gt;
&lt;li&gt;at least once
&lt;ul&gt;
&lt;li&gt;會在處理完 message 後才 commit&lt;/li&gt;
&lt;li&gt;要確保處理方式是 idempotent
&lt;ul&gt;
&lt;li&gt;可以幫 message 加上 primary key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;at most once
&lt;ul&gt;
&lt;li&gt;會在取得 message 後就 commit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;exactly once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-broker&#34;&gt;Kafka broker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kafka cluster 中的每個 server 都是 broker&lt;/li&gt;
&lt;li&gt;多個連接在一起的 broker 組成一個 cluster
&lt;ul&gt;
&lt;li&gt;會有一個 broker 是 controller
&lt;ul&gt;
&lt;li&gt;負責管理 cluster 中的 broker&lt;/li&gt;
&lt;li&gt;也管 topic 和 partition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 id 來識別，id 是整數&lt;/li&gt;
&lt;li&gt;broker 會包含某些 partition&lt;/li&gt;
&lt;li&gt;也被叫做 bootstrap server
&lt;ul&gt;
&lt;li&gt;一但連到某個 broker，就可以連到整個 cluster
&lt;ul&gt;
&lt;li&gt;kafka client 會處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;broker 數量考量
&lt;ul&gt;
&lt;li&gt;儲存空間&lt;/li&gt;
&lt;li&gt;容錯&lt;/li&gt;
&lt;li&gt;throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;Zookeeper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;被用來管理 kafka broker&lt;/li&gt;
&lt;li&gt;可以拿來幫 partition 做 leader election&lt;/li&gt;
&lt;li&gt;Zookeeper 分成 leader 和 follower&lt;/li&gt;
&lt;li&gt;Kafka 3.0 之後，可以改用 Kafka Raft
&lt;ul&gt;
&lt;li&gt;4.0 之後，會移除 zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;該不該用
&lt;ul&gt;
&lt;li&gt;現在似乎 KRaft 已經準備好上 production 了&lt;/li&gt;
&lt;li&gt;如果是 kafka client，應該盡量不使用 zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kafka-server-start.sh &amp;lt;config file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;啟動 kafka server (broker)&lt;/li&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--bootstrap-server&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 kafka server&lt;/li&gt;
&lt;li&gt;不推薦使用 &lt;code&gt;--zookeeper&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--command-config&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;li&gt;裡面會寫包含帳號密碼以及加密方式等安全設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kaft-topics.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--partitions&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 partition 數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--replication-factor&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 replication factor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--topic&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 topic name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--describe&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;描述 topic
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Replicas&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;顯示哪些 broker 有複本 (id)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ISR&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;顯示哪些 broker 和 leader 同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--list&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;列出所有 topic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kaft-console-producer.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--topic&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 topic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--producer.config&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--producer-property&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 producer property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acks&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 acks 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--property&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以打許多次，每次指定一個 property&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kaft-console-consumer.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--topic&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 topic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--from-beginning&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;不只是自打開 consumer 後的 message，而是從一開始的 message 開始&lt;/li&gt;
&lt;li&gt;如果同一個 group 有多個 consumer，這個選項只會對第一個 consumer 有用，offset 是看 group 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--consumer.config&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--group&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 consumer group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kafka-consumer-groups.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--list&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;列出所有 consumer group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--describe&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;描述 consumer group
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CURRENT-OFFSET&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;目前 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOG-END-OFFSET&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;最後一個 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LAG&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;落後的 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MongoDB 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/mongodb-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Fri, 16 Aug 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/mongodb-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;mongodb-基礎&#34;&gt;MongoDB 基礎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以 BSON (Binary JSON) 儲存資料
&lt;ul&gt;
&lt;li&gt;BSON 是 JSON 的二進位版本，支援更多資料型別，如日期和二進位資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;_id 欄位作為預設的主鍵
&lt;ul&gt;
&lt;li&gt;若未指定，MongoDB 會自動生成一個 12 字節的 ObjectId&lt;/li&gt;
&lt;li&gt;用於確保文件中唯一性，特別在分散式系統中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;索引機制&#34;&gt;索引機制&lt;/h2&gt;
&lt;h3 id=&#34;composite-index&#34;&gt;Composite Index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由多個欄位組成，例如 (a, b)&lt;/li&gt;
&lt;li&gt;Prefix 特性
&lt;ul&gt;
&lt;li&gt;如果索引為 (a, b)，則 (a) 也可被單獨使用&lt;/li&gt;
&lt;li&gt;但 (b) 或 (a, b, c) 無法直接利用此索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hint
&lt;ul&gt;
&lt;li&gt;可強制 MongoDB 使用特定索引&lt;/li&gt;
&lt;li&gt;用於測試或避免 optimizer 選錯索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;explain-分析查詢&#34;&gt;Explain 分析查詢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來檢視查詢的執行計畫&lt;/li&gt;
&lt;li&gt;重要欄位
&lt;ul&gt;
&lt;li&gt;cursor
&lt;ul&gt;
&lt;li&gt;BasicCursor 表示全表掃描，應避免&lt;/li&gt;
&lt;li&gt;BtreeCursor 表示使用索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nscanned
&lt;ul&gt;
&lt;li&gt;掃描的索引數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nscannedObjects
&lt;ul&gt;
&lt;li&gt;掃描的文件數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;n
&lt;ul&gt;
&lt;li&gt;最終返回的文件數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關係：nscanned &amp;gt;= nscannedObjects &amp;gt;= n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scanAndOrder
&lt;ul&gt;
&lt;li&gt;表示需要將文件載入記憶體並排序&lt;/li&gt;
&lt;li&gt;通常一次性返回所有結果，效率較低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;optimizer-索引選擇&#34;&gt;Optimizer 索引選擇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一階段：尋找最佳索引
&lt;ul&gt;
&lt;li&gt;最佳索引條件
&lt;ul&gt;
&lt;li&gt;包含所有 filter 和 sort 的欄位&lt;/li&gt;
&lt;li&gt;equality filter 必須在 range filter 之前&lt;/li&gt;
&lt;li&gt;sort 欄位必須在 range filter 之後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若有多個最佳索引條件符合條件，隨便選擇一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二階段：實驗性選擇
&lt;ul&gt;
&lt;li&gt;若無最佳索引，會測試多個索引&lt;/li&gt;
&lt;li&gt;optimizer 選擇 nscanned 最小的索引作為最終方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;儲存引擎&#34;&gt;儲存引擎&lt;/h2&gt;
&lt;h3 id=&#34;mmapv1&#34;&gt;MMAPv1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB 早期的儲存引擎&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;_id 直接對應 disk 偏移量 (diskloc)
&lt;ul&gt;
&lt;li&gt;查詢速度快，但更新需維護偏移量，效能低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鎖定機制
&lt;ul&gt;
&lt;li&gt;初始為 database-level lock&lt;/li&gt;
&lt;li&gt;後期升級至 collection-level lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已於 MongoDB 4.0 後棄用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wiredtiger&#34;&gt;WiredTiger&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB 收購並採用的新儲存引擎&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;Document-level locking，提升並發效能&lt;/li&gt;
&lt;li&gt;支援資料壓縮，減少儲存空間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本演進
&lt;ul&gt;
&lt;li&gt;5.2 之前
&lt;ul&gt;
&lt;li&gt;_id 用於查找 recordid&lt;/li&gt;
&lt;li&gt;recordid 作為 clustered index，指向實際文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5.3 之後
&lt;ul&gt;
&lt;li&gt;_id 直接成為 clustered index&lt;/li&gt;
&lt;li&gt;_id 為 12 字節 (ObjectId)，比原 64 位 recordid 更大&lt;/li&gt;
&lt;li&gt;影響
&lt;ul&gt;
&lt;li&gt;對 secondary index 增加儲存負擔&lt;/li&gt;
&lt;li&gt;提升跨機器和 shard 環境中的唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>System Design</title>
        <link>https://roykesydon.github.io/Blog/p/system-design/</link>
        <pubDate>Sat, 03 Aug 2024 00:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/system-design/</guid>
        <description>&lt;h2 id=&#34;estimation&#34;&gt;Estimation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要評估的指標
&lt;ul&gt;
&lt;li&gt;latency&lt;/li&gt;
&lt;li&gt;throughput&lt;/li&gt;
&lt;li&gt;capacity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database 估計
&lt;ul&gt;
&lt;li&gt;沒特別指定的話，可以預估 single relational database 可以處理 read &amp;amp; write 10K per second&lt;/li&gt;
&lt;li&gt;single relational database 的容量可以抓 3 TB&lt;/li&gt;
&lt;li&gt;redis 可以抓 100K，但是受限於 memory，可能抓 30GB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以問的問題類型
&lt;ul&gt;
&lt;li&gt;總共有多少用戶？&lt;/li&gt;
&lt;li&gt;有多少活躍用戶？&lt;/li&gt;
&lt;li&gt;每個用戶平均每天使用多久？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;
&lt;h3 id=&#34;load-balancer&#34;&gt;Load Balancer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;type
&lt;ul&gt;
&lt;li&gt;application load balancer (ALB)
&lt;ul&gt;
&lt;li&gt;OSI layer 7 (Application layer)&lt;/li&gt;
&lt;li&gt;可以根據 request header, URL, query string 來做 routing&lt;/li&gt;
&lt;li&gt;可以 validate / terminate SSL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network load balancer (NLB)
&lt;ul&gt;
&lt;li&gt;OSI layer 4 (Transport layer)&lt;/li&gt;
&lt;li&gt;可以根據 protocol (TCP, UDP, IP..), destination port etc 來做 routing&lt;/li&gt;
&lt;li&gt;一般來說預設會 pass through SSL&lt;/li&gt;
&lt;li&gt;比較適合應付高流量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;strategy
&lt;ul&gt;
&lt;li&gt;round robin
&lt;ul&gt;
&lt;li&gt;輪流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;least connection&lt;/li&gt;
&lt;li&gt;resource-based
&lt;ul&gt;
&lt;li&gt;考慮每個 instance 的資源使用情況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;weighted variants of the above
&lt;ul&gt;
&lt;li&gt;可以把上面說的各種情況多加入 weight 的考量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;random&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點
&lt;ul&gt;
&lt;li&gt;resilience
&lt;ul&gt;
&lt;li&gt;可以關注到某個 instance down 了，自動把 request 轉到其他 instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scalability
&lt;ul&gt;
&lt;li&gt;後面的 instance 可以 horizontal scale&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 API Gateway 的差異
&lt;ul&gt;
&lt;li&gt;API Gateway 除了 load balancing 會有更多的功能，例如 rate limiting, authentication, authorization, request validation, caching, logging etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;protocol--sendreceive-data&#34;&gt;Protocol &amp;amp; Send/Receive data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;UDP&lt;/li&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;li&gt;websocket
&lt;ul&gt;
&lt;li&gt;duplex (two-way) communication&lt;/li&gt;
&lt;li&gt;只會建立一次 TCP connection&lt;/li&gt;
&lt;li&gt;load balancer 可以會遇到問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;long polling
&lt;ul&gt;
&lt;li&gt;client 送 request 給 server，server 不會立刻 close connection，而是等待有新資料或 timeout 才回應&lt;/li&gt;
&lt;li&gt;某些不能用 websocket 的情況下，可以用 long polling 來模擬&lt;/li&gt;
&lt;li&gt;但是在一些框架或語言可能不好實作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gRPC
&lt;ul&gt;
&lt;li&gt;RPC
&lt;ul&gt;
&lt;li&gt;remote procedure call&lt;/li&gt;
&lt;li&gt;把一些 service 包裝成像 local function 一樣，就可以像調用本地函式一樣使用 remote 的服務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;google 開發的 RPC 框架&lt;/li&gt;
&lt;li&gt;用 protobuf 作為 IDL (Interface Definition Language)
&lt;ul&gt;
&lt;li&gt;binary protocol
&lt;ul&gt;
&lt;li&gt;非 readable，需要 encode / decode&lt;/li&gt;
&lt;li&gt;但比 json 小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.proto file
&lt;ul&gt;
&lt;li&gt;定義 message 的格式&lt;/li&gt;
&lt;li&gt;描述了 interface 長怎樣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;protoc
&lt;ul&gt;
&lt;li&gt;用來 compile .proto file，根據指定的程式語言，產生 client / server code
&lt;ul&gt;
&lt;li&gt;server 再實作 interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 http/2 來傳輸&lt;/li&gt;
&lt;li&gt;不能用在 browser&lt;/li&gt;
&lt;li&gt;適合用在內部服務之間的溝通&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User perspective
&lt;ul&gt;
&lt;li&gt;描述身為 user 期待看到什麼東西&lt;/li&gt;
&lt;li&gt;這裡可以先簡單介紹這個 app 的大概邏輯，之後 marketplace 再針對不同 role 探討資料和使用情境&lt;/li&gt;
&lt;li&gt;也可以詢問使用的平台&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Marketplace
&lt;ul&gt;
&lt;li&gt;詢問要支援的用戶數量，以及活躍用戶數量&lt;/li&gt;
&lt;li&gt;如果有多種用戶，也要分開討論
&lt;ul&gt;
&lt;li&gt;ex: 叫車服務會有司機和乘客&lt;/li&gt;
&lt;li&gt;有更多角色後，可以開始根據角色討論他們的 perspective&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得一些數字
&lt;ul&gt;
&lt;li&gt;考慮 sotrage 以及 throughput&lt;/li&gt;
&lt;li&gt;叫車服務範例
&lt;ul&gt;
&lt;li&gt;乘客總數量、活躍乘客數、每月乘客需求趟數&lt;/li&gt;
&lt;li&gt;司機總數量、活躍司機數、單趟平均時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;throuput
&lt;ul&gt;
&lt;li&gt;活躍用戶&lt;/li&gt;
&lt;li&gt;refresh rate&lt;/li&gt;
&lt;li&gt;每個 user 平均打開 app 的次數&lt;/li&gt;
&lt;li&gt;平均打開 app 會用多久&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rough design
&lt;ul&gt;
&lt;li&gt;探討資料的傳遞
&lt;ul&gt;
&lt;li&gt;根據不同 role 去講他們應該傳送什麼資料，用什麼協定，request 的頻率 (request per second)
&lt;ul&gt;
&lt;li&gt;討論的時候可以用 average，但是會有 peak time，可以考慮 X2, X4, X10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;探討資料的儲存
&lt;ul&gt;
&lt;li&gt;要準備一些前提，比如假設單一資料庫每秒可以 insert 5K 筆資料&lt;/li&gt;
&lt;li&gt;可以討論不同的 sharding
&lt;ul&gt;
&lt;li&gt;考慮怎樣存可以讓大小減少&lt;/li&gt;
&lt;li&gt;評估這樣分是否可能導致 sharding uneven&lt;/li&gt;
&lt;li&gt;怎樣的切法可以讓 query 盡量不要跨 shard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每個階段也可以探討 throughput&lt;/li&gt;
&lt;li&gt;開始根據情境設計不同的 service 來表達他們的交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;
&lt;h3 id=&#34;查找&#34;&gt;查找&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能不能用地理資訊來做 hashing&lt;/li&gt;
&lt;li&gt;能不能用 geo index&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工具--技術&#34;&gt;工具 &amp;amp; 技術&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;headless browser
&lt;ul&gt;
&lt;li&gt;沒有 user interface 的 browser&lt;/li&gt;
&lt;li&gt;但是依然有 rendering engine 和 js interpreter。可以用來得到最終的 html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cyclic redundancy check (CRC)
&lt;ul&gt;
&lt;li&gt;一般用在檢查封包是否有錯誤，但是我們也可以用來檢查某個檔案是否有被修改，好做 sync&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CQRS (Command Query Responsibility Segregation)
&lt;ul&gt;
&lt;li&gt;把 read 和 write 分開&lt;/li&gt;
&lt;li&gt;一個 storage 針對 read 做 optimize，另一個 storage 針對 write 做 optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unique-id&#34;&gt;Unique ID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UUID 是 random 且 human-readable（不會有相近的 char，比如 0 和 O）
&lt;ul&gt;
&lt;li&gt;但是太長&lt;/li&gt;
&lt;li&gt;可以用不同的 encoding 壓縮長度
&lt;ul&gt;
&lt;li&gt;因為 UUID 用的 charactor 是 0-9, a-f，所以可以用有更多種 charactor 的 encoding 來壓縮&lt;/li&gt;
&lt;li&gt;BASE62
&lt;ul&gt;
&lt;li&gt;包含 0-9, a-z, A-Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BASE58
&lt;ul&gt;
&lt;li&gt;BASE62 但不包含容易混淆的 0, O, I, l&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BASE64
&lt;ul&gt;
&lt;li&gt;BASE62 但多了 +, /&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個 Phase 可以多和 interviewer 討論，確認走在正確的方向上&lt;/li&gt;
&lt;li&gt;面對面試官給的數字可以嘗試為了好算向上抓一些&lt;/li&gt;
&lt;li&gt;延遲任務
&lt;ul&gt;
&lt;li&gt;如果遇到因為某些原因需要晚點才能做某個任務，可以用 queue 來處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache 除了用專門的 cache database 做，Server 自身也可以用 memory 來 cache&lt;/li&gt;
&lt;li&gt;對於先搶先贏的系統不一定要追求公平，只要達成目標即可&lt;/li&gt;
&lt;li&gt;對於搶票機制可以做 pre-populate，事先在 database 生好指定數量的票，這樣就可以只 lock 某個 row，不用 lock 整個 table&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Database Transactions and ACID Properties</title>
        <link>https://roykesydon.github.io/Blog/p/database-transactions-and-acid-properties/</link>
        <pubDate>Sun, 21 Jul 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-transactions-and-acid-properties/</guid>
        <description>&lt;h2 id=&#34;transaction&#34;&gt;Transaction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個或多個操作的集合&lt;/li&gt;
&lt;li&gt;一個 transaction 要不全部執行，要不全部不執行&lt;/li&gt;
&lt;li&gt;即使程式中未顯式使用 transaction，資料庫也會自動為操作包裹一個隱式的 transaction&lt;/li&gt;
&lt;li&gt;lifespan
&lt;ul&gt;
&lt;li&gt;begin&lt;/li&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;li&gt;rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;atomicity&#34;&gt;Atomicity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個 transaction 要不全部執行，要不全部不執行&lt;/li&gt;
&lt;li&gt;在 commit 前不管因為任何理由失敗，都該 rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consistency&#34;&gt;Consistency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;符合當初制定的規則 (ex: 設置的 foreign key 指向的資料一定要存在)
&lt;ul&gt;
&lt;li&gt;referential integrity
&lt;ul&gt;
&lt;li&gt;保證 primary key 和 foreign key 之間的關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eventual consistency
&lt;ul&gt;
&lt;li&gt;最後一定會 consistent，儘管過程中可能會出現短暫的不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;isolation&#34;&gt;Isolation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個 transaction 的執行不應該影響其他 transaction&lt;/li&gt;
&lt;li&gt;read phenomena
&lt;ul&gt;
&lt;li&gt;dirty read
&lt;ul&gt;
&lt;li&gt;一個 transaction 讀到了另一個 transaction 已經寫了但還沒 commit 的資料。這個資料有可能被 commit 也有可能被 rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;non-repeatable read
&lt;ul&gt;
&lt;li&gt;一個 transaction 兩次讀取同個資料時，得到的資料不一樣因是因為有其他 transaction 更新了這個資料（已經 commit 了）&lt;/li&gt;
&lt;li&gt;和 dirty read 不同的是，這個資料是已經 commit 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;phantom read
&lt;ul&gt;
&lt;li&gt;也是第一次和第二次讀取的資料不一樣，第二次發現多了額外的資料，這次是因為有其他 transaction 寫入了新的資料（並且 commit 了）&lt;/li&gt;
&lt;li&gt;之所以要和 non-repeatable read 分開，是因為他這裡沒辦法簡單的靠鎖起來已經讀過的資料，因為你沒辦法鎖你本來看不到的資料&lt;/li&gt;
&lt;li&gt;系統設計遇到這問題可以考慮用 pre-populate 的方式，把所有可能的資料都先創好，就可以個別鎖住&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lost update
&lt;ul&gt;
&lt;li&gt;我更新了某筆資料，但是在 commit 之前，有其他 transaction 也更新了這筆資料，並且 commit。我再去讀取這筆資料時，發現我更新的資料就被覆蓋了&lt;/li&gt;
&lt;li&gt;double booking problem
&lt;ul&gt;
&lt;li&gt;當兩個 transaction 同時搶更新同個資源就有可能遇到該問題&lt;/li&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;兩個 transaction 都先 select 再 update&lt;/li&gt;
&lt;li&gt;他們兩個 select 都先看到有空位，然後一前一後更新，就會造成 double booking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Isolation level
&lt;ul&gt;
&lt;li&gt;為了解決 read phenomena，資料庫提供了不同的隔離等級&lt;/li&gt;
&lt;li&gt;不同的隔離等級會影響到 transaction 之間讀取資料的方式，以達到不同的資料一致性要求&lt;/li&gt;
&lt;li&gt;不會影響自身 transaction 前面所 write 的資料&lt;/li&gt;
&lt;li&gt;read uncommitted
&lt;ul&gt;
&lt;li&gt;No isolation&lt;/li&gt;
&lt;li&gt;可以看到其他 transaction 還沒 commit 的資料&lt;/li&gt;
&lt;li&gt;所有的 read phenomena 都有可能發生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read committed
&lt;ul&gt;
&lt;li&gt;只能看到其他 transaction commit 的資料&lt;/li&gt;
&lt;li&gt;許多資料庫的預設隔離等級&lt;/li&gt;
&lt;li&gt;除了 dirty read 之外，其他 read phenomena 都有可能發生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeatable read
&lt;ul&gt;
&lt;li&gt;確保同一筆資料在同一個 transaction 中讀取時，結果是一樣的&lt;/li&gt;
&lt;li&gt;phantom read 還是有可能發生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;snapshot
&lt;ul&gt;
&lt;li&gt;保證 transaction 得到的資料是一致的&lt;/li&gt;
&lt;li&gt;只會看到 transaction 開始時的 snapshot&lt;/li&gt;
&lt;li&gt;read phenomena 都不會發生&lt;/li&gt;
&lt;li&gt;好像不是所有資料庫都有這個隔離等級，也有些 repeatable read 就是用 snapshot 來實現的
&lt;ul&gt;
&lt;li&gt;比如 PostgreSQL 就是用 snapshot 來實現 repeatable read&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但這不代表不會遇到問題，請參考 double booking problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;serializable
&lt;ul&gt;
&lt;li&gt;最高隔離等級&lt;/li&gt;
&lt;li&gt;保證所有 concurrent transaction 執行起來會和依序執行的效果一樣
&lt;ul&gt;
&lt;li&gt;如果 transaction 不會彼此影響，還是有可能會讓 transaction 並行執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read phenomena 都不會發生&lt;/li&gt;
&lt;li&gt;和要求 exclusive lock 相比，有可能實現方法是遇到衝突會 fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;durability&#34;&gt;Durability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一旦 transaction 完成，資料應該要 persistent
&lt;ul&gt;
&lt;li&gt;完成的 transaction 會被記在 non-volatile storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;durability technique
&lt;ul&gt;
&lt;li&gt;Write ahead log (WAL)
&lt;ul&gt;
&lt;li&gt;先寫 log (寫你做了什麼操作，但不去真的改 disk 上對應的資料)，有空再修改
&lt;ul&gt;
&lt;li&gt;這樣一些修改就可以改在 memory，如果 crash 了，可以用 log 來 recover&lt;/li&gt;
&lt;li&gt;而且考量硬碟限制，如果你想修改的資料遠小於硬碟可寫的最小單位，會很浪費&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous snapshot
&lt;ul&gt;
&lt;li&gt;在後台把 snapshot 寫到 disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Database 一般筆記</title>
        <link>https://roykesydon.github.io/Blog/p/database-%E4%B8%80%E8%88%AC%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sun, 21 Jul 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-%E4%B8%80%E8%88%AC%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;資料庫核心概念&#34;&gt;資料庫核心概念&lt;/h2&gt;
&lt;h3 id=&#34;儲存結構&#34;&gt;儲存結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Table&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;資料庫中最基本的儲存單位，用來組織資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Row_id&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多數資料庫會維護一個唯一的 row_id，也稱為 tuple id，用來識別每一行資料&lt;/li&gt;
&lt;li&gt;例如 PostgreSQL 使用 OID 或 ctid，MySQL 則依賴主鍵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個 row 會被儲存在一個 page 中&lt;/li&gt;
&lt;li&gt;讀取時不會單獨讀取某個 row，而是以 page 為單位讀取一或多個 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IO&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;IO 操作指的是存取磁碟的操作&lt;/li&gt;
&lt;li&gt;一次 IO 可能讀取多個 page，也可能直接從 cache 中取得資料&lt;/li&gt;
&lt;li&gt;資料庫常利用 cache（如 buffer pool）來減少 IO
&lt;ul&gt;
&lt;li&gt;若查詢速度很快，可能是因為資料已存在 cache 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heap&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;用來儲存整個 table 的資料，是一種無特定順序的結構&lt;/li&gt;
&lt;li&gt;若使用 clustered index 組織資料，則不會有獨立的 heap
&lt;ul&gt;
&lt;li&gt;例如 MySQL InnoDB 的主鍵就是 clustered index，資料直接依主鍵排序儲存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料儲存方式&#34;&gt;資料儲存方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Row-oriented (行導向)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個 row 依序儲存，包含所有 column 的資料&lt;/li&gt;
&lt;li&gt;一次 IO 會讀取多個 row，每個 row 包含所有欄位&lt;/li&gt;
&lt;li&gt;適合 OLTP（線上交易處理），因為常需要存取整行資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Column-oriented (列導向)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個 column 依序儲存，同一 column 的資料連續存放&lt;/li&gt;
&lt;li&gt;壓縮效率高，且適合 aggregation 操作，因此常用於 OLAP（線上分析處理）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;碎片化-fragmentation&#34;&gt;碎片化 (Fragmentation)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Internal Fragmentation (內部碎片)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一個 page 中有許多未使用的空間&lt;/li&gt;
&lt;li&gt;可能因為 row 刪除或大小不均導致，例如插入時預留空間過多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External Fragmentation (外部碎片)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個 page 的儲存位置不連續&lt;/li&gt;
&lt;li&gt;即使剩餘空間足夠，因不連續而無法使用，需透過整理（如 vacuum）來解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料結構與索引&#34;&gt;資料結構與索引&lt;/h2&gt;
&lt;h3 id=&#34;常用資料結構&#34;&gt;常用資料結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一種平衡樹結構，適用於快速搜尋&lt;/li&gt;
&lt;li&gt;每個 node 同時儲存 key 和 value&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;由於 node 儲存完整資料，空間利用率較低&lt;/li&gt;
&lt;li&gt;range query 效率較差，因為需要多次隨機存取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B+Tree&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree 的改良版本，常用於資料庫索引&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;internal node 只儲存 key，leaf node 儲存 key 和 value&lt;/li&gt;
&lt;li&gt;因 internal node 只存 key，元素大小較小，一個 node 可容納更多 key，使存取的結點數變少，提升搜尋效率&lt;/li&gt;
&lt;li&gt;leaf node 用 linked list 串聯，適合 range query&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常一個 node 對應一個 DBMS 的 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LSM-Tree (Log-Structured Merge-Tree)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;設計為追加式寫入，資料加在尾端，不覆蓋原有資料&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;對 SSD 友好，因避免隨機寫入&lt;/li&gt;
&lt;li&gt;適合高寫入量的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;與 B-Tree 比較
&lt;ul&gt;
&lt;li&gt;B-Tree 為保持平衡會頻繁調整結構，導致隨機 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引基礎&#34;&gt;索引基礎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引的作用&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若欄位未建立索引，查詢需掃描整個 table&lt;/li&gt;
&lt;li&gt;索引透過 pointer 指向 heap 或資料位置，加速查詢&lt;/li&gt;
&lt;li&gt;索引本身也儲存在 page 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;搜索方法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Table Scan&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;掃描整個 table，適用於範圍過大或無索引的情況&lt;/li&gt;
&lt;li&gt;通常以 parallel 方式執行，提升效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index Scan&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;利用索引定位資料，再從 heap 取值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index-only Scan (Covering Index)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若所需欄位已包含在索引中，無需存取 heap&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;速度快，因避免額外 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意
&lt;ul&gt;
&lt;li&gt;索引過大可能佔用更多記憶體，甚至觸發磁碟 IO，降低效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composite Index&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將多個 column 作為 key 建立索引&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;在 PostgreSQL 中，若索引為 (a, b)，查詢 a 可使用索引，但單獨查 b 無法有效利用&lt;/li&gt;
&lt;li&gt;順序影響查詢效率，設計時需考慮常用條件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-key Column&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;可透過 include 將常用但非 key 的欄位加入索引&lt;/li&gt;
&lt;li&gt;促成 index-only scan，提升查詢速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引類型&#34;&gt;索引類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clustered Index (叢集索引)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;資料依索引順序物理儲存，也稱 Index-Organized Table&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;一個 table 只能有一個 clustered index，因資料只能按一種順序排列&lt;/li&gt;
&lt;li&gt;未指定時，primary key 通常作為 clustered index（如 MySQL InnoDB）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;範圍查詢效率高，因資料已排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Primary Key vs Secondary Key&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Primary Key&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通常用於 clustered index，資料圍繞其排序&lt;/li&gt;
&lt;li&gt;若查詢小範圍資料，因有序可減少 IO&lt;/li&gt;
&lt;li&gt;設計差異
&lt;ul&gt;
&lt;li&gt;PostgreSQL 不強制 clustered，primary key 只是唯一約束&lt;/li&gt;
&lt;li&gt;MySQL InnoDB 則將 primary key 作為 clustered index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secondary Key&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不在乎原本 table 的 order，而是根據自訂的 key 來排序&lt;/li&gt;
&lt;li&gt;會有另外一個結構去放 index，可以找到 row_id&lt;/li&gt;
&lt;li&gt;用途
&lt;ul&gt;
&lt;li&gt;提供額外的查詢路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計差異&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;所有索引（包括 primary 和 secondary）直接指向 row&lt;/li&gt;
&lt;li&gt;優勢：secondary index 可直接取資料，不用再跳一層 primary key&lt;/li&gt;
&lt;li&gt;劣勢：更新 row 時，若 row_id 改變，所有索引需同步更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MySQL&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;secondary index 指向 primary key，再由 primary key 指向 row&lt;/li&gt;
&lt;li&gt;優勢：row 更新時只需調整 primary key 的指向&lt;/li&gt;
&lt;li&gt;劣勢：查詢需多跳一次，增加 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料模型與類型&#34;&gt;資料模型與類型&lt;/h2&gt;
&lt;h3 id=&#34;資料類型&#34;&gt;資料類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;設計原則&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;設計 column 時，應先確認資料庫提供的資料類型，選擇最適合的類型以提升效能與儲存效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以 PostgreSQL 為例&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numeric&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;整數 (integer)：如 smallint、integer、bigint&lt;/li&gt;
&lt;li&gt;浮點數 (float)：如 real、double precision&lt;/li&gt;
&lt;li&gt;Serial：自動遞增（auto increment）的整數，常用於主鍵（如 serial、bigserial）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Character&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;char(n)：固定長度字串，空間不足時補空白&lt;/li&gt;
&lt;li&gt;varchar(n)：可變長度字串，指定最大長度&lt;/li&gt;
&lt;li&gt;text：無長度限制的字串，等同於未指定長度的 varchar&lt;/li&gt;
&lt;li&gt;bpchar：好像就是 varchar，但是 document 有寫 blank trimmed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date / Time&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如 date、time、timestamp，提供日期與時間儲存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;true/false 或 null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;bytea：儲存二進位資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Geometric&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;提供點 (point)、線 (line)、多邊形 (polygon) 等類型&lt;/li&gt;
&lt;li&gt;應用：若需儲存二維平面座標，可用 point 替代兩個 float&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UUID&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通用唯一識別碼，適合分散式系統生成唯一 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enum&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;自訂有限字串集合，按建立順序有序&lt;/li&gt;
&lt;li&gt;應用：狀態欄位（如 &amp;ldquo;pending&amp;rdquo;、&amp;ldquo;completed&amp;rdquo;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分割-partitioning&#34;&gt;分割 (Partitioning)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將大 table 分成多個小 table，以提升效能或管理便利性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vertical Partitioning (垂直分割)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;按 column 分割&lt;/li&gt;
&lt;li&gt;應用
&lt;ul&gt;
&lt;li&gt;將不常用或大型欄位（如 blob）獨立出來&lt;/li&gt;
&lt;li&gt;可將這些欄位放在較慢的磁碟，保留常用欄位在 SSD&lt;/li&gt;
&lt;li&gt;減少不必要欄位進入 cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal Partitioning (水平分割)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;按 row 分割&lt;/li&gt;
&lt;li&gt;應用
&lt;ul&gt;
&lt;li&gt;根據範圍（如時間、地域）分割資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;優點&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;單一 partition 的單次查詢更快&lt;/li&gt;
&lt;li&gt;對 sequential scan 有幫助，因範圍縮小&lt;/li&gt;
&lt;li&gt;可將舊資料移至較便宜的儲存設備&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺點&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;跨 partition 移動資料效率低&lt;/li&gt;
&lt;li&gt;若查詢需掃描所有 partition，可能比未分割的 table 更慢&lt;/li&gt;
&lt;li&gt;partition 大小可能不均（unbalance），需設計均衡策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料庫游標-database-cursor&#34;&gt;資料庫游標 (Database Cursor)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;處理大型結果集時，避免一次傳送所有資料給 client（因網路與記憶體限制）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server-side Cursor&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;伺服器分批傳送資料給 client&lt;/li&gt;
&lt;li&gt;優勢：減少 client 記憶體需求&lt;/li&gt;
&lt;li&gt;劣勢：多次網路往返可能增加總時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client-side Cursor&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一次傳送所有資料，由 client 分批處理&lt;/li&gt;
&lt;li&gt;優勢：減少伺服器負擔&lt;/li&gt;
&lt;li&gt;劣勢：需較大網路頻寬與 client 記憶體&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分散式系統&#34;&gt;分散式系統&lt;/h2&gt;
&lt;h3 id=&#34;分片-sharding&#34;&gt;分片 (Sharding)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將 table 分成多個 shard，分散至不同資料庫伺服器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;與 Horizontal Partitioning 的差異&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Horizontal Partitioning：分割後仍位於同一資料庫，由 DBMS 管理&lt;/li&gt;
&lt;li&gt;Sharding：分割後分至不同伺服器，client 需自行處理資料位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;挑戰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;交易 (transaction) 與 join 操作變得複雜，因資料分散&lt;/li&gt;
&lt;li&gt;需額外設計一致性與資料存取邏輯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分片鍵-sharding-key&#34;&gt;分片鍵 (Sharding Key)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hash&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用 hash function 決定資料分配&lt;/li&gt;
&lt;li&gt;優勢：分佈均勻&lt;/li&gt;
&lt;li&gt;劣勢：範圍查詢困難&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Range&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根據某 column 的範圍（如時間、ID）分配&lt;/li&gt;
&lt;li&gt;優勢：支援範圍查詢&lt;/li&gt;
&lt;li&gt;劣勢：可能導致熱點（hotspot）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dictionary&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根據離散值（如地區、類別）分配&lt;/li&gt;
&lt;li&gt;優勢：直觀且易管理&lt;/li&gt;
&lt;li&gt;劣勢：擴展性受限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計考量&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cardinality&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;鍵值的種類數量，種類過少限制水平擴展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;鍵值的分佈頻率，需避免單一 shard 負載過高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monotonicity&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若鍵值單調遞增或遞減，可能導致新資料集中於某 shard&lt;/li&gt;
&lt;li&gt;解決方式：結合 hash 或隨機前綴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料庫複製-database-replication&#34;&gt;資料庫複製 (Database Replication)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;透過 redundancy 來提高 reliability, tolerance, accessibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Master / Backup Replication (主從複製)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;單一 master 負責寫入，多個 backup（slave）負責讀取&lt;/li&gt;
&lt;li&gt;模式：一寫多讀&lt;/li&gt;
&lt;li&gt;應用：讀多寫少的場景（如內容管理系統）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-master Replication (多主複製)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個 master 可同時寫入&lt;/li&gt;
&lt;li&gt;挑戰：需處理寫入衝突（如使用版本控制或衝突解決策略）&lt;/li&gt;
&lt;li&gt;應用：高可用性與分散式寫入需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Synchronous (同步)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;transaction 完成前需等待所有 backup 寫入確認&lt;/li&gt;
&lt;li&gt;變體：可設定等待前 N 個或任一完成&lt;/li&gt;
&lt;li&gt;優勢：資料一致性高&lt;/li&gt;
&lt;li&gt;劣勢：延遲增加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asynchronous (非同步)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;transaction 寫入 master 後即完成，後台同步至 backup&lt;/li&gt;
&lt;li&gt;優勢：寫入速度快&lt;/li&gt;
&lt;li&gt;劣勢：可能出現資料不一致（若 master 故障）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;應用&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;常見於負載平衡與災難恢復設計&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;並發與交易管理&#34;&gt;並發與交易管理&lt;/h2&gt;
&lt;h3 id=&#34;並發控制策略&#34;&gt;並發控制策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pessimistic (悲觀)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用鎖定機制確保交易隔離&lt;/li&gt;
&lt;li&gt;適用於衝突頻繁的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimistic (樂觀)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不使用鎖，假設衝突少見，若發生衝突則交易失敗並重試&lt;/li&gt;
&lt;li&gt;適用於讀多寫少的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;鎖定機制-lock&#34;&gt;鎖定機制 (Lock)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared Lock (共享鎖)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個交易可同時持有，適用於讀取&lt;/li&gt;
&lt;li&gt;其他交易可再設置 shared lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exclusive Lock (排他鎖)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;僅一個交易可持有，適用於寫入&lt;/li&gt;
&lt;li&gt;禁止其他交易讀取或寫入&lt;/li&gt;
&lt;li&gt;PostgreSQL 提供 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 來取得 exclusive lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相容性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若資料已持有一種鎖，其他交易無法設置另一種鎖&lt;/li&gt;
&lt;li&gt;例如：shared lock 下無法設置 exclusive lock，反之亦然&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死結-deadlock&#34;&gt;死結 (Deadlock)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個交易互相等待對方釋放鎖，導致無法繼續執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;處理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多數 DBMS 會檢測死結，並強制回滾最後造成死結的交易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;兩階段鎖定-two-phase-locking-2pl&#34;&gt;兩階段鎖定 (Two-Phase Locking, 2PL)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;DBMS 為了實現 isolation 需要保證 conflict serializability (CSR)，2PL 可以保證這一點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;階段&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Growing Phase (增長階段)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;交易只能申請鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shrinking Phase (收縮階段)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;交易只能釋放鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制：釋放任一鎖後，交易無法再申請新鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一個交易釋放鎖後，無法再取得鎖&lt;/li&gt;
&lt;li&gt;保證一致性，但可能導致死結&lt;/li&gt;
&lt;li&gt;應用於多數關聯式資料庫的交易管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;實作與優化&#34;&gt;實作與優化&lt;/h2&gt;
&lt;h3 id=&#34;資料庫引擎-database-engine&#34;&gt;資料庫引擎 (Database Engine)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;也叫 storage engine 或 embedded database，負責處理 CRUD 操作的核心庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;DBMS 基於引擎提供更高階功能（如查詢優化、交易管理）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 的 InnoDB（支援交易與外鍵）、MyISAM（高效讀寫但無交易）&lt;/li&gt;
&lt;li&gt;SQLite 本身即為嵌入式引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;物件關聯映射-orm&#34;&gt;物件關聯映射 (ORM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;載入策略&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eager Loading (積極載入)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一次載入所有相關資料&lt;/li&gt;
&lt;li&gt;範例：查詢 Teacher 時一併載入所有 Student&lt;/li&gt;
&lt;li&gt;優勢：減少後續查詢次數&lt;/li&gt;
&lt;li&gt;劣勢：可能載入過多不必要資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lazy Loading (延遲載入)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;僅在需要時載入相關資料&lt;/li&gt;
&lt;li&gt;優勢：節省初始載入時間與記憶體&lt;/li&gt;
&lt;li&gt;劣勢：可能導致多次 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open Session in View (OSIV)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個 http request 開啟一個資料庫 session&lt;/li&gt;
&lt;li&gt;用途：配合 lazy loading，確保 request 期間資料可隨時載入&lt;/li&gt;
&lt;li&gt;注意：可能延長 session 存活時間，增加資源占用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N+1 Problem&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;查詢主表後，對每個主表記錄再查詢子表，導致 N+1 次 IO&lt;/li&gt;
&lt;li&gt;範例：查詢 10 個 Teacher，再各查其 Student，共 11 次查詢&lt;/li&gt;
&lt;li&gt;解決方式：使用 join 或 eager loading 合併查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;效能優化與實務建議&#34;&gt;效能優化與實務建議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免使用 Offset&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Offset + Limit 是簡單的 pagination 實現，但 offset 需讀取並丟棄前 n 筆資料&lt;/li&gt;
&lt;li&gt;替代方案：使用條件（如 &lt;code&gt;WHERE id &amp;gt; last_id&lt;/code&gt;）追蹤分頁位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;連線池 (Connection Pool)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;維護固定數量的資料庫連線，避免頻繁建立與關閉連線的開銷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等幂鍵 (Idempotency Key)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;確保同一 request 只執行一次&lt;/li&gt;
&lt;li&gt;實現
&lt;ul&gt;
&lt;li&gt;生成唯一鍵（如 ULID），隨 request 傳送並記錄&lt;/li&gt;
&lt;li&gt;重複鍵時拒絕執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ULID 優勢
&lt;ul&gt;
&lt;li&gt;包含時間戳記，可排序且集中於相近 page&lt;/li&gt;
&lt;li&gt;相較 UUID 的隨機性，減少 IO 與 buffer 壓力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性雜湊 (Consistent Hashing)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將 hash 結果映射至環狀結構，分配資料至伺服器&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;新增或移除伺服器時，僅影響部分資料重分配&lt;/li&gt;
&lt;li&gt;可針對負載高的伺服器動態調整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寫入放大 (Write Amplification)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;實際寫入磁碟的資料量超出預期&lt;/li&gt;
&lt;li&gt;分很多不同 level，通常是在說 SSD 造成的&lt;/li&gt;
&lt;li&gt;原因
&lt;ul&gt;
&lt;li&gt;SSD 更新時，需將整個 block 搬移至新位置並標記舊 block 為 free
&lt;ul&gt;
&lt;li&gt;想更新的時候，更新的 page 會被標記為不能使用。為了那些不能再被使用的空間搬整個 block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多型關聯 (Polymorphic Association)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;單一欄位根據情況指向不同 table 的 id&lt;/li&gt;
&lt;li&gt;優勢：節省空間與表數&lt;/li&gt;
&lt;li&gt;劣勢：無法直接使用 foreign key，需額外邏輯處理&lt;/li&gt;
&lt;li&gt;替代方案：拆為多欄位或多表，增加明確性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Azure Devops 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/azure-devops-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sat, 20 Jul 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/azure-devops-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;pipeline&#34;&gt;Pipeline&lt;/h2&gt;
&lt;h3 id=&#34;名詞&#34;&gt;名詞&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Artifact
&lt;ul&gt;
&lt;li&gt;你需要用到的檔案，可能是 build 出來的檔案，或是跑測試用的專案&lt;/li&gt;
&lt;li&gt;ex: .jar, .war&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;type&#34;&gt;Type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Build pipeline&lt;/li&gt;
&lt;li&gt;Release pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;azure-pipelinesyml&#34;&gt;azure-pipelines.yml&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以 create pipeline，在專案中加入該檔案，Azure DevOps 會自動偵測並執行&lt;/li&gt;
&lt;li&gt;用於 build pipeline&lt;/li&gt;
&lt;li&gt;trigger
&lt;ul&gt;
&lt;li&gt;指定哪些 branch 有 push 時，要執行 pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;variables&#34;&gt;Variables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以設定變數，用在 yaml 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;task&#34;&gt;Task&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以搜尋各種 task 來完成任務
&lt;ul&gt;
&lt;li&gt;copy files&lt;/li&gt;
&lt;li&gt;publish build artifacts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;release-pipeline&#34;&gt;Release pipeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把 build 出來的 artifact，部署到指定的環境&lt;/li&gt;
&lt;li&gt;artifact 上方的閃電，可以設置當有新的 artifact 時，自動觸發 release&lt;/li&gt;
&lt;li&gt;create release
&lt;ul&gt;
&lt;li&gt;執行 CI/CD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;agent-pool&#34;&gt;Agent pool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以加入自己的 agent，也就是自己的 server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;board&#34;&gt;Board&lt;/h2&gt;
&lt;h3 id=&#34;work-item&#34;&gt;Work item&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Epic
&lt;ul&gt;
&lt;li&gt;一個非常 high level 的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Issue
&lt;ul&gt;
&lt;li&gt;把 Epic 拆成小的需求&lt;/li&gt;
&lt;li&gt;在敏捷也可以稱為 User Story&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Task
&lt;ul&gt;
&lt;li&gt;再把 Issue 拆成更小的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;backlog&#34;&gt;Backlog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PO 創建的 Issue，會在 Backlog 中&lt;/li&gt;
&lt;li&gt;可以把 Issue 拖拉到 sprint 中&lt;/li&gt;
&lt;li&gt;可以結合 git repo，把 commit 或 branch 關聯到 Issue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sprint&#34;&gt;Sprint&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在這可以新增 sprint&lt;/li&gt;
&lt;li&gt;也有 task board，列出所有 task
&lt;ul&gt;
&lt;li&gt;可以設置 task 的狀態以及指派人員&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Web Security</title>
        <link>https://roykesydon.github.io/Blog/p/web-security/</link>
        <pubDate>Fri, 28 Jun 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/web-security/</guid>
        <description>&lt;h2 id=&#34;file-uploaded-vulnerability&#34;&gt;File Uploaded Vulnerability&lt;/h2&gt;
&lt;h3 id=&#34;防禦方法&#34;&gt;防禦方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要允許使用者上傳任何可執行的檔案&lt;/li&gt;
&lt;li&gt;檢查 file type 和 file extension
&lt;ul&gt;
&lt;li&gt;file type 指的是 header 的 Content-Type&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用某些套件分析檔案，並重新創建和重新命名檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code-execution-vulnerability&#34;&gt;Code Execution Vulnerability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;允許攻擊者執行 OS command&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防禦方法-1&#34;&gt;防禦方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要使用危險的 function&lt;/li&gt;
&lt;li&gt;透過 filter 檢查輸入
&lt;ul&gt;
&lt;li&gt;比如利用 regex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;file-inclusion-vulnerability&#34;&gt;File Inclusion Vulnerability&lt;/h2&gt;
&lt;h3 id=&#34;lfi-local-file-inclusion-vulnerability&#34;&gt;LFI (Local File Inclusion) Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;攻擊者可以讀取伺服器上的任何檔案（包含 /var/www 外的檔案）&lt;/li&gt;
&lt;li&gt;透過輸入讀其他檔案的時候沒有檢查檔案路徑&lt;/li&gt;
&lt;li&gt;可以用來讀 /proc/self/environ，可能會存在一些可以透過 request 修改的變數。植入PHP 程式碼便有可能被執行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rfi-remote-file-inclusion-vulnerability&#34;&gt;RFI (Remote File Inclusion) Vulnerability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和 LFI 類似，但是檔案來自外部&lt;/li&gt;
&lt;li&gt;可以在當前 server 執行其他 server 的 php 程式碼&lt;/li&gt;
&lt;li&gt;可以在其他 server 以 .txt 存 php file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防禦方法-2&#34;&gt;防禦方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免 remote file inclusion
&lt;ul&gt;
&lt;li&gt;php 的話可以關掉 allow_url_fopen 和 allow_url_include&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免 local file inclusion
&lt;ul&gt;
&lt;li&gt;用 static file inclusion，不要透過變數去取得檔案位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql-injection&#34;&gt;SQL Injection&lt;/h2&gt;
&lt;h3 id=&#34;防禦方法-3&#34;&gt;防禦方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 prepared statement&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xss-cross-site-scripting&#34;&gt;XSS (Cross Site Scripting)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;允許攻擊者在網頁上執行 javascript code&lt;/li&gt;
&lt;li&gt;執行在 client 端，不是 server 端&lt;/li&gt;
&lt;li&gt;Main types
&lt;ul&gt;
&lt;li&gt;Reflected XSS
&lt;ul&gt;
&lt;li&gt;用 URL 攻擊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent/Stored XSS
&lt;ul&gt;
&lt;li&gt;攻擊的程式碼存在 database 或是某個 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOM-based XSS
&lt;ul&gt;
&lt;li&gt;利用前面的方法，透過開發者不當操作 DOM 來攻擊&lt;/li&gt;
&lt;li&gt;ex: 攻擊者透過 .innerHTML 放入 script tag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BeEF Framework
&lt;ul&gt;
&lt;li&gt;可以把目標 hook 到 beef&lt;/li&gt;
&lt;li&gt;可以透過 beef 對被 hook 的目標做各種操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防禦方法-4&#34;&gt;防禦方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;盡量避免讓 user 的輸入直接顯示在網頁上&lt;/li&gt;
&lt;li&gt;在 insert 到網頁前，escape 所有不信任的輸入
&lt;ul&gt;
&lt;li&gt;把這些 character 轉換成 HTML 用的格式
&lt;ul&gt;
&lt;li&gt;ex: &lt;code&gt;&amp;lt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;csrf-cross-site-request-forgery&#34;&gt;CSRF (Cross Site Request Forgery)&lt;/h2&gt;
&lt;h3 id=&#34;防禦方法-5&#34;&gt;防禦方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Anti CSRF token
&lt;ul&gt;
&lt;li&gt;生表單的時候也生一個 token，並記住，request 要帶上這個 token&lt;/li&gt;
&lt;li&gt;unpredictable&lt;/li&gt;
&lt;li&gt;can&amp;rsquo;t be reused&lt;/li&gt;
&lt;li&gt;前後端分離
&lt;ul&gt;
&lt;li&gt;後端生
&lt;ul&gt;
&lt;li&gt;CORS 不要接受所有來源，讓前端取得 token&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端生
&lt;ul&gt;
&lt;li&gt;要發 request 的時候把 cookie 改成和 token 一樣的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;backdoor&#34;&gt;Backdoor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;msfvenom&lt;/li&gt;
&lt;li&gt;msfconsole&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;anti-virus&#34;&gt;Anti-Virus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Principle
&lt;ul&gt;
&lt;li&gt;Static Analysis
&lt;ul&gt;
&lt;li&gt;和已知的 malware 比對&lt;/li&gt;
&lt;li&gt;可以利用 packers, encoders, abfuscators 來讓程式更加獨特&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic(Heuristic) Analysis
&lt;ul&gt;
&lt;li&gt;在 sandbox 中執行，看他的行為&lt;/li&gt;
&lt;li&gt;要幫程式增加安全的操作&lt;/li&gt;
&lt;li&gt;延遲 Payload 執行的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Software Development Model</title>
        <link>https://roykesydon.github.io/Blog/p/software-development-model/</link>
        <pubDate>Thu, 27 Jun 2024 02:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/software-development-model/</guid>
        <description>&lt;h2 id=&#34;terms&#34;&gt;Terms&lt;/h2&gt;
&lt;h3 id=&#34;incremental-vs-iterative&#34;&gt;Incremental vs Iterative&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Incremental&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;透過多個 &lt;strong&gt;increment&lt;/strong&gt;（增量）逐步構建專案，每個增量都是可運行的部分功能，並在後續開發中持續擴充。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterative&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;建立 &lt;strong&gt;prototype&lt;/strong&gt;（原型），然後反覆改進，每次迭代都基於上一版本進行調整與優化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;model-type&#34;&gt;Model Type&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linear/Predictive&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;適用於具備類似專案經驗的情境&lt;/li&gt;
&lt;li&gt;擁有明確的開發流程&lt;/li&gt;
&lt;li&gt;變更空間極小，需求需在開發前確定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexible/Adaptive&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;適用於新創概念或需求尚不明確的專案&lt;/li&gt;
&lt;li&gt;專案可能隨時間變更，因此需具備較高的靈活性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;waterfall-model&#34;&gt;Waterfall Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;像瀑布一樣，一個階段完成後才能進入下一個階段&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;典型流程：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirement&lt;/strong&gt; → &lt;strong&gt;Design&lt;/strong&gt; → &lt;strong&gt;Implementation&lt;/strong&gt; → &lt;strong&gt;Testing&lt;/strong&gt; → &lt;strong&gt;Deployment&lt;/strong&gt; → &lt;strong&gt;Maintenance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高度預測性&lt;/strong&gt;（Predictive），變更成本極高，彈性低&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;問題點：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若在 &lt;strong&gt;Testing&lt;/strong&gt; 階段發現重大缺陷，可能需回溯至 &lt;strong&gt;Requirement&lt;/strong&gt; 重新開始&lt;/li&gt;
&lt;li&gt;隨著進度推進，&lt;strong&gt;修正成本（fix cost）將大幅增加&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;需要在每個階段做詳細規劃，以降低風險&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用戶直到後期才會看到可運行的成果&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;incremental-model&#34;&gt;Incremental Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在整個開發過程中，將系統劃分為 &lt;strong&gt;多個增量（increments）&lt;/strong&gt; 來逐步開發與交付&lt;/li&gt;
&lt;li&gt;每個增量都具備可運行的功能，並能獨立部署&lt;/li&gt;
&lt;li&gt;各個增量的目標與功能範圍需事先定義，以確保最終整合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;agile&#34;&gt;Agile&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一種思維方式，而非特定的開發模型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile Manifesto（敏捷宣言）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Individuals and interactions over processes and tools&lt;/strong&gt;（個人與互動高於流程與工具）
&lt;ul&gt;
&lt;li&gt;若團隊決定使用新的工具，應優先考量團隊的需求，而非僅僅依賴過去習慣的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working software over comprehensive documentation&lt;/strong&gt;（可運行的軟體高於完備的文件）
&lt;ul&gt;
&lt;li&gt;文件很重要，但單純依賴大量文件無法讓客戶提供有效回饋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customer collaboration over contract negotiation&lt;/strong&gt;（與客戶合作高於合約談判）
&lt;ul&gt;
&lt;li&gt;強調持續與客戶溝通，以確保專案方向正確，而不是只關注合同上的條款&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Responding to change over following a plan&lt;/strong&gt;（回應變化高於遵循計畫）
&lt;ul&gt;
&lt;li&gt;在變化快速的環境下，適應需求變更比僵化地執行既定計畫更重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;瀑布式開發的缺點agile-解決的問題&#34;&gt;&lt;strong&gt;瀑布式開發的缺點（Agile 解決的問題）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技術環境變化迅速，Agile 讓開發更具適應性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;傳統開發方法往往因為考量成本，不容易應對變更 而 Agile 透過 &lt;strong&gt;小的增量（increment）&lt;/strong&gt; 來持續調整方向，降低風險&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;軟體需求無法 100% 預測&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;早期規劃的需求可能與最終需求不符，因此 Agile 強調 &lt;strong&gt;持續交付與回饋&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系統可能不符合用戶需求&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;透過 &lt;strong&gt;迭代開發（iterative development）&lt;/strong&gt;，確保用戶能夠在開發過程中參與並提供反饋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;市場變化快速&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Agile 強調 &lt;strong&gt;MVP（最小可行產品）&lt;/strong&gt;，讓團隊能在短時間內推出核心功能，以快速測試市場反應&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;kanban&#34;&gt;Kanban&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以視覺化方式管理工作流程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透過卡片（Kanban 卡）來追蹤工作項目&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;能夠直觀地發現某個工作階段是否積壓過多任務&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心屬性properties&#34;&gt;&lt;strong&gt;核心屬性（Properties）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visualize workflow&lt;/strong&gt;（視覺化工作流）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limit work in progress&lt;/strong&gt;（限制在製作業務量）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manage flow&lt;/strong&gt;（管理工作流）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make process policies explicit&lt;/strong&gt;（明確定義流程規則）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve collaboratively&lt;/strong&gt;（透過協作持續改進）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心原則principles&#34;&gt;&lt;strong&gt;核心原則（Principles）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start with what you do now&lt;/strong&gt;（從現有流程開始）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agree to pursue incremental, evolutionary change&lt;/strong&gt;（追求漸進式改變）
&lt;ul&gt;
&lt;li&gt;並非一次性顛覆整個流程，而是逐步優化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Respect the current process, roles, responsibilities &amp;amp; titles&lt;/strong&gt;（尊重現有流程、角色、職責與職位）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encourage acts of leadership at all levels&lt;/strong&gt;（鼓勵各層級展現領導力）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leadership&lt;/strong&gt; 不僅指管理職責，也包含主動解決問題、協助他人、激勵他人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作欄位work-columns&#34;&gt;&lt;strong&gt;工作欄位（Work Columns）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Backlog&lt;/strong&gt;（待辦事項）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analyze&lt;/strong&gt;（需求分析）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Develop&lt;/strong&gt;（開發）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test&lt;/strong&gt;（測試）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Release&lt;/strong&gt;（發布）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scrum&#34;&gt;Scrum&lt;/h2&gt;
&lt;h3 id=&#34;scrum-核心概念&#34;&gt;Scrum 核心概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scrum 是敏捷開發框架&lt;/strong&gt;，透過迭代式的開發方式，提高軟體交付的效率與適應性。&lt;/li&gt;
&lt;li&gt;主要流程包括 &lt;strong&gt;Sprint Planning、Daily Scrum、Sprint Review 和 Sprint Retrospective&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;角色與職責&#34;&gt;角色與職責&lt;/h3&gt;
&lt;h4 id=&#34;1-product-owner&#34;&gt;1. Product Owner&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;負責確保產品的價值最大化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;職責&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;維護 &lt;strong&gt;健康的 Product Backlog&lt;/strong&gt;（保持任務清晰、優先順序合理）&lt;/li&gt;
&lt;li&gt;與 &lt;strong&gt;利害關係人&lt;/strong&gt; 溝通，確保開發方向符合需求&lt;/li&gt;
&lt;li&gt;定義 &lt;strong&gt;Acceptance Criteria（驗收標準）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;管理 &lt;strong&gt;預算與 Release 計畫&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-scrum-master&#34;&gt;2. Scrum Master&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;確保 Scrum 流程正確執行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;職責&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;促成 &lt;strong&gt;Daily Standup&lt;/strong&gt;，確保討論聚焦&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移除障礙&lt;/strong&gt;，幫助團隊專注於開發&lt;/li&gt;
&lt;li&gt;培養 &lt;strong&gt;Scrum 文化&lt;/strong&gt;，確保團隊理解並實踐 Scrum 的價值觀&lt;/li&gt;
&lt;li&gt;Servant Leader
- 有一點領導，但和大家平等。促成團隊工作而不是指揮別人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-開發團隊dev-team&#34;&gt;3. 開發團隊（Dev Team）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;包括工程師、設計師、測試人員等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目標&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;與 Product Owner &lt;strong&gt;合作撰寫 User Stories&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;開發、測試、確保功能符合定義的需求&lt;/li&gt;
&lt;li&gt;參與 &lt;strong&gt;技術設計、研究與原型開發&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;scrum-流程&#34;&gt;Scrum 流程&lt;/h3&gt;
&lt;h4 id=&#34;1-product-backlog&#34;&gt;1. Product Backlog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;由 Product Owner 負責維護，內容包含：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;優先度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;預估花費時間&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;負責的人&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-sprint-planning-meeting&#34;&gt;2. Sprint Planning Meeting&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;目標：將 &lt;strong&gt;Product Backlog&lt;/strong&gt; 轉換為 &lt;strong&gt;Sprint Backlog&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;角色分工&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scrum Master&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;確保會議高效進行&lt;/li&gt;
&lt;li&gt;如果有講太久的部分，可能稍後再排單獨會議&lt;/li&gt;
&lt;li&gt;確保一切都和 sprint goal 一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Product Owner&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;準備好 product backlog&lt;/li&gt;
&lt;li&gt;澄清 product backlog 的細節&lt;/li&gt;
&lt;li&gt;要準備好描述 acceptance criteria
&lt;ul&gt;
&lt;li&gt;比如搜索速度要多快？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev Team&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;拆解任務、估算工作量、選擇可完成的任務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-sprint-backlog&#34;&gt;3. Sprint Backlog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;本次 Sprint 需要完成的所有任務&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開發人員自行選擇任務&lt;/strong&gt;，並在 &lt;strong&gt;1-4 週內完成 Sprint&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-daily-scrum&#34;&gt;4. Daily Scrum&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不能花太久，比如&lt;strong&gt;限制 15 分鐘內完成&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Scrum Master
&lt;ul&gt;
&lt;li&gt;確保會議的進行，確保 timebox&lt;/li&gt;
&lt;li&gt;紀錄關於目前障礙的筆記，規劃時間移除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dev Team
&lt;ol&gt;
&lt;li&gt;昨天完成了什麼？&lt;/li&gt;
&lt;li&gt;今天計畫做什麼？&lt;/li&gt;
&lt;li&gt;有遇到什麼阻礙？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-sprint-review成果展示&#34;&gt;5. Sprint Review（成果展示）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;向 &lt;strong&gt;Stakeholders&lt;/strong&gt; 展示這次 Sprint 交付的 &lt;strong&gt;Product Increment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;討論改進方向，準備下一個 Sprint&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-sprint-retrospective回顧與改進&#34;&gt;6. Sprint Retrospective（回顧與改進）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;探討 &lt;strong&gt;這次 Sprint 哪些地方可以改進&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常見方法&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start-Stop-Continue&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start&lt;/strong&gt;：開始做什麼？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stop&lt;/strong&gt;：應該停止什麼？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continue&lt;/strong&gt;：繼續保持哪些做法？&lt;/li&gt;
&lt;li&gt;每個人說出一個想開始做的事情，一個想停止做的事情，一個想繼續做的事情
&lt;ul&gt;
&lt;li&gt;可以保持匿名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-5-3-structurescrum-的核心架構&#34;&gt;3-5-3 Structure（Scrum 的核心架構）&lt;/h3&gt;
&lt;h4 id=&#34;3-大工件artifacts&#34;&gt;3 大工件（Artifacts）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Product Backlog&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sprint Backlog&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Product Increment&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-大事件events&#34;&gt;5 大事件（Events）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sprint Planning&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Daily Scrum&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Sprint&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sprint Review&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sprint Retrospective&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3-大角色roles&#34;&gt;3 大角色（Roles）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Product Owner&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scrum Master&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開發團隊（Dev Team）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他補充&#34;&gt;其他補充：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scrum 5 大價值觀 (Values)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;專注（Focus）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尊重（Respect）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;承諾（Commitment）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;勇氣（Courage）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開放（Openness）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scrum 3 大支柱 (Pillars)&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;透明性（Transparency）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;檢視（Inspection）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適應（Adaptation）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以利用 back-to-back testing 來確認沒有弄壞之前 sprint 的功能&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Testing</title>
        <link>https://roykesydon.github.io/Blog/p/testing/</link>
        <pubDate>Thu, 27 Jun 2024 00:01:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/testing/</guid>
        <description>&lt;h3 id=&#34;測試相關概念&#34;&gt;測試相關概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Test Data&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;用來測試系統的輸入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Case&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;包含測試步驟、預期結果、測試資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Oracle&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;理想的結果，作為判斷測試是否成功的標準&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verification（驗證）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;確認系統是否符合規格（specification）&lt;/li&gt;
&lt;li&gt;若出錯，通常是開發或設計的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validation（確認）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;確認系統是否符合使用者需求&lt;/li&gt;
&lt;li&gt;若出錯，代表產品目標可能有誤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-與錯誤類型&#34;&gt;Bug 與錯誤類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bug&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;程式中的錯誤或偏離預期的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;偏離預期的事件（event），如系統崩潰或錯誤輸出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;導致 failure 的程式錯誤（code issue）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fault（缺陷）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;造成 failure 的設計或開發上的錯誤，可能潛伏在系統內直到被觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;測試輔助工具&#34;&gt;測試輔助工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stub&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;用來代替其他元件的簡單實作，會回傳硬編碼（hard-coded）值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mock&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;類似 stub，但除了回傳預設值，還可驗證是否正確調用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Driver&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;負責執行測試指令並初始化變數的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;測試覆蓋率test-coverage&#34;&gt;測試覆蓋率（Test Coverage）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line Coverage（行覆蓋率）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;測試過的程式碼行數相對於總行數的比例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branch Coverage（分支覆蓋率）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;測試所有條件分支是否都被執行過，如 if、switch 內的所有可能路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;測試類型testing-types&#34;&gt;測試類型（Testing Types）&lt;/h2&gt;
&lt;h3 id=&#34;單元測試unit-testing&#34;&gt;單元測試（Unit Testing）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;測試程式的最小單位（smallest unit of software）&lt;/li&gt;
&lt;li&gt;需隔離（isolate）被測單元，避免外部依賴影響測試結果
&lt;ul&gt;
&lt;li&gt;常使用 dummy value、mock 物件來替代外部依賴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;整合測試integration-testing&#34;&gt;整合測試（Integration Testing）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;測試不同組件（components）之間的交互（communication）和架構（architecture）&lt;/li&gt;
&lt;li&gt;測試方式
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Big Bang Testing（非漸進式測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一次測試所有 components，通常用於大型應用程式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental Testing（漸進式測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;逐步新增模組進行測試，直到完整測試整個系統&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Top-Down Testing&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;從最上層開始，尚未開發的底層使用 stub 代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bottom-Up Testing&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;從最底層開始，尚未開發的上層使用 driver 代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Back-to-Back Testing（對比測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;比較已知良好版本與新版本的輸出&lt;/li&gt;
&lt;li&gt;若 output 相同，則新版本仍保有舊版本的正確功能&lt;/li&gt;
&lt;li&gt;可作為 incremental testing 的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;黑箱測試-vs-白箱測試&#34;&gt;黑箱測試 vs 白箱測試&lt;/h2&gt;
&lt;h3 id=&#34;黑箱測試black-box-testing&#34;&gt;黑箱測試（Black Box Testing）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不需要知道內部結構，透過輸入與輸出來驗證系統行為&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常見測試方法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Boundary Value Analysis（邊界值分析）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;測試邊界值，如最大、最小、剛好超出範圍的數值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cause-Effect Graph（因果圖測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一種設計測試案例的方法，也稱為 &lt;strong&gt;fishbone diagram&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不同的輸入條件（cause）會導致不同的結果（effect）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pair-Wise Testing（成對測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;測試多個參數的不同組合，減少測試案例數量的同時仍保證足夠覆蓋率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State-Based Testing（狀態測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;測試不同狀態下的輸入，確認狀態變更的正確性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;測試種類&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Functional Testing（功能測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;確保系統功能符合需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regression Testing（回歸測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;重新測試已驗證過的功能，確保新的修改沒有破壞舊的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-Functional Testing（非功能測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;測試效能、安全性、可靠性等非功能性需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;白箱測試white-box-testing&#34;&gt;白箱測試（White Box Testing）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要了解內部結構，測試程式碼本身&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常見測試方法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Control Flow Testing（控制流程測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;設計測試案例，使所有條件分支（branch condition）皆被執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Flow Testing（資料流測試）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;測試變數的生命週期，包括變數的定義（declaration）與使用（use）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;應用範圍&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unit Testing&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;最主要用於單元測試&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration Testing&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;用於確保不同模組之間的溝通正確&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Kubernetes 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/kubernetes-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Fri, 14 Jun 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/kubernetes-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;基礎概念&#34;&gt;基礎概念&lt;/h2&gt;
&lt;h3 id=&#34;container-runtime&#34;&gt;Container runtime&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CRI (Container Runtime Interface)
&lt;ul&gt;
&lt;li&gt;Kubernetes 用來和 container runtime 互動的 interface&lt;/li&gt;
&lt;li&gt;任何可以實現 CRI 的 container runtime 都可以用在 Kubernetes，比如 containerd&lt;/li&gt;
&lt;li&gt;以前有幫 Docker 特別實現一個 CRI，叫做 Docker shim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OCI (Open Container Initiative)
&lt;ul&gt;
&lt;li&gt;一個開放的 container image 和 runtime 的標準&lt;/li&gt;
&lt;li&gt;他定義了 container image 和 container runtime 的格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;containerd
&lt;ul&gt;
&lt;li&gt;一個 container runtime，docker 底下所使用的 container runtime，現在已經與 docker 單獨出來開發維護&lt;/li&gt;
&lt;li&gt;他實現了 CRI，所以可以用在 Kubernetes&lt;/li&gt;
&lt;li&gt;CLI
&lt;ul&gt;
&lt;li&gt;ctr
&lt;ul&gt;
&lt;li&gt;如果你只裝 containerd，沒有裝 docker，就可以用這個來操作 containerd&lt;/li&gt;
&lt;li&gt;能用的指令比較少&lt;/li&gt;
&lt;li&gt;For Debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nerdctl
&lt;ul&gt;
&lt;li&gt;docker-like 的 CLI&lt;/li&gt;
&lt;li&gt;很多指令可以把 docker 的指令換成 nerdctl 的指令&lt;/li&gt;
&lt;li&gt;For general purpose&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;crictl
&lt;ul&gt;
&lt;li&gt;用來操作符合 CRI 的 container runtime 的 CLI&lt;/li&gt;
&lt;li&gt;For Debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;node&#34;&gt;Node&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 集群中的一台機器&lt;/li&gt;
&lt;li&gt;過去叫做 Minion&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cluster&#34;&gt;Cluster&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;由多個 Node 組成的集群&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;node-type&#34;&gt;Node Type&lt;/h4&gt;
&lt;h5 id=&#34;master&#34;&gt;Master&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;控制整個集群的 Node&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;worker&#34;&gt;Worker&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;其他非 Master 的 Node 叫做 Worker Node&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;master-vs-worker&#34;&gt;Master vs Worker&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Master
&lt;ul&gt;
&lt;li&gt;擁有的 Component
&lt;ul&gt;
&lt;li&gt;API Server&lt;/li&gt;
&lt;li&gt;etcd&lt;/li&gt;
&lt;li&gt;Controller&lt;/li&gt;
&lt;li&gt;Scheduler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Worker
&lt;ul&gt;
&lt;li&gt;擁有的 Component
&lt;ul&gt;
&lt;li&gt;Container Runtime&lt;/li&gt;
&lt;li&gt;Kubelet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;component&#34;&gt;Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安裝 Kubernetes，實際上是安裝以下幾個 Component
&lt;ul&gt;
&lt;li&gt;API Server
&lt;ul&gt;
&lt;li&gt;front-end of the Kubernetes&lt;/li&gt;
&lt;li&gt;kubectl 是在和這裡溝通&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;etcd
&lt;ul&gt;
&lt;li&gt;distributed key-value store&lt;/li&gt;
&lt;li&gt;會實現 lock mechanism，確保沒有 conflict&lt;/li&gt;
&lt;li&gt;預設聽 2379 port&lt;/li&gt;
&lt;li&gt;command line client
&lt;ul&gt;
&lt;li&gt;etcdctl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kubelet
&lt;ul&gt;
&lt;li&gt;在每個 node 上運行的 agent&lt;/li&gt;
&lt;li&gt;負責確保 container 在 node 上如期運行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Container Runtime
&lt;ul&gt;
&lt;li&gt;用來 run container 的 underlying software&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Controller Manager
&lt;ul&gt;
&lt;li&gt;當 node、container、endpoint 掛掉的時候，他要負責監控和回應&lt;/li&gt;
&lt;li&gt;底下有許多種的 Controller，負責監控還有作出應對處理&lt;/li&gt;
&lt;li&gt;type
&lt;ul&gt;
&lt;li&gt;Replication Controller
&lt;ul&gt;
&lt;li&gt;確保指定數量的 Pod 在任何時間都在運行&lt;/li&gt;
&lt;li&gt;load balancing &amp;amp; scaling&lt;/li&gt;
&lt;li&gt;後來被 ReplicaSet 取代&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node Controller
&lt;ul&gt;
&lt;li&gt;確保 node 在運行&lt;/li&gt;
&lt;li&gt;設定固定間隔監測 node 的健康狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scheduler
&lt;ul&gt;
&lt;li&gt;負責處理 node 間的 distributing work&lt;/li&gt;
&lt;li&gt;會尋找新創的 container，並分配到 node&lt;/li&gt;
&lt;li&gt;嘗試幫每個 pod 挑選最適合的 node&lt;/li&gt;
&lt;li&gt;two phase
&lt;ul&gt;
&lt;li&gt;Filter
&lt;ul&gt;
&lt;li&gt;檢查 node 是否符合 pod 的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rank
&lt;ul&gt;
&lt;li&gt;給 node 一個分數，選擇最高分的 node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod&#34;&gt;Pod&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 的最小單位&lt;/li&gt;
&lt;li&gt;一個 Pod 封裝一個應用程式，可能包含一個或多個 container&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;replicaset&#34;&gt;ReplicaSet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新版本的 Replication Controller&lt;/li&gt;
&lt;li&gt;yaml
&lt;ul&gt;
&lt;li&gt;spec
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定要創建的 Pod 的 template&lt;/li&gt;
&lt;li&gt;把 pod 的 metadata 和 spec 都放在這裡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replicas&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定要創建的 Pod 的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selector&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定要選擇的 Pod&lt;/li&gt;
&lt;li&gt;需要這個是因為 ReplicaSet 也可以管理那些不是他創建的 Pod&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matchLabels&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定要選擇的 Pod 的 label&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;command
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl scale --replicas=3 -f &amp;lt;file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;scale up/down replicas&lt;/li&gt;
&lt;li&gt;這樣不會修改檔案，所以檔案的如果原本是 2，檔案依然會寫 2，只是 replicas 會變成 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl scale --replicas=3 replicaset &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;scale up/down replicas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl edit replicaset &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;想要 scale up/down replicas 也可以用這個，他會立刻生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;簡寫
&lt;ul&gt;
&lt;li&gt;rs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管理 ReplicaSet 和 Replica Controller&lt;/li&gt;
&lt;li&gt;yaml 和 ReplicaSet 很像，把 kind 從 ReplicaSet 改成 Deployment 就好
&lt;ul&gt;
&lt;li&gt;會自動創建 ReplicaSet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用情境
&lt;ol&gt;
&lt;li&gt;Rolling update&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;想要更新每個 Pod，但不是同時更新，而是一個一個更新，確保不會有 downtime&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Rollback&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;如果更新失敗，可以回到之前的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Pause and Resume&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;當需要做 multiple changes，不想要一下指令就馬上做，可以先 pause，等所有指令下完再 resume&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rollout
&lt;ul&gt;
&lt;li&gt;創建 Deployment 的時候，會自動創建一個 rollout&lt;/li&gt;
&lt;li&gt;創建一個 rollout 的時候，會自動創建一個 Deployment revision&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment Strategy
&lt;ul&gt;
&lt;li&gt;Recreate
&lt;ul&gt;
&lt;li&gt;先刪除所有舊的 Pod，再創建新的 Pod&lt;/li&gt;
&lt;li&gt;中間會有 Application downtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rolling Update
&lt;ul&gt;
&lt;li&gt;一個一個更新 Pod&lt;/li&gt;
&lt;li&gt;這個是預設的 strategy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;command
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl rollout status deployment &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;查看 rollout 的狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl rollout history deployment &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;查看 rollout 的 history (revision)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl rollout undo deployment &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;回到上一個 revision&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;簡寫
&lt;ul&gt;
&lt;li&gt;deploy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;讓不同 group 的 Pod 互相通信&lt;/li&gt;
&lt;li&gt;像一個 virtaul server，可以連接到一個或多個 Pod&lt;/li&gt;
&lt;li&gt;每個 Node 都有一個 kube-proxy，他會檢查有沒有新的 service，並維護 iptables&lt;/li&gt;
&lt;li&gt;type
&lt;ul&gt;
&lt;li&gt;NodePort
&lt;ul&gt;
&lt;li&gt;會在每個 node 上開一個 port，讓外部可以連進來&lt;/li&gt;
&lt;li&gt;default valid port range: 30000-32767&lt;/li&gt;
&lt;li&gt;yaml
&lt;ul&gt;
&lt;li&gt;spec
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;service 的 port&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;targetPort&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;pod 的 port&lt;/li&gt;
&lt;li&gt;如果不設置，會用 &lt;code&gt;port&lt;/code&gt; 的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodePort&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;如果不設置，會從 default port range 選一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selector&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定要連接的 Pod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預設會用 load balancing，策略是 Random，像是一個內建的 load balancer&lt;/li&gt;
&lt;li&gt;如果有在同個 cluster 跨 node 的情況，不需要其他設定，就可以創建一個跨 node 的 service，會幫他們都設同一個 nodePort&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ClusterIP
&lt;ul&gt;
&lt;li&gt;只有在 cluster 內部可以連進來&lt;/li&gt;
&lt;li&gt;用來幫某一組的 pod 提供一個統一的界面並做轉發&lt;/li&gt;
&lt;li&gt;不能依賴 internal IP，因為每個 pod 都有可能會 down 或 up&lt;/li&gt;
&lt;li&gt;yaml
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;targetPort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;service 可以用 cluster IP 或是 service name 來連接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LoadBalancer
&lt;ul&gt;
&lt;li&gt;會在 cloud provider 上開一個 load balancer&lt;/li&gt;
&lt;li&gt;nodePort 的 load balancer 是在 node 內部的，現在是要幫多個 node 做 load balancing&lt;/li&gt;
&lt;li&gt;這只有在 cloud provider 上才有&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;name 很重要，因為其他的 Pod 會用這個 name 來連接 (就像 domain name)&lt;/li&gt;
&lt;li&gt;簡寫
&lt;ul&gt;
&lt;li&gt;svc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yaml&#34;&gt;YAML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 的配置文件&lt;/li&gt;
&lt;li&gt;root level properties
&lt;ul&gt;
&lt;li&gt;apiVersion
&lt;ul&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;kind&lt;/th&gt;
&lt;th&gt;apiVersion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReplicaSet&lt;/td&gt;
&lt;td&gt;apps/v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;apps/v1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kind
&lt;ul&gt;
&lt;li&gt;Pod, Service, ReplicaSet, Deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;metadata
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;labels&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以加入任何 key-value pair&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spec
&lt;ul&gt;
&lt;li&gt;specification section&lt;/li&gt;
&lt;li&gt;pod
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;containers&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt;: list of environment variables
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tool&#34;&gt;Tool&lt;/h2&gt;
&lt;h3 id=&#34;kubectl&#34;&gt;kubectl&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;用來 deploy、inspect、manage application on a Kubernetes cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;commands
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl run &amp;lt;name&amp;gt; --image=&amp;lt;image&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;創建一個 Pod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl get pods&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;查看所有 Podllll&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o wide&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;顯示更多資訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;column
&lt;ul&gt;
&lt;li&gt;READY
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;/&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也可以用 &lt;code&gt;kubectl get all&lt;/code&gt; 來查看 Pod、Service、ReplicaSet、Deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl describe pod &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;查看 Pod 的詳細資訊&lt;/li&gt;
&lt;li&gt;欄位
&lt;ul&gt;
&lt;li&gt;Node
&lt;ul&gt;
&lt;li&gt;Pod 在哪個 Node 上運行，包含了 Node 的 IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP
&lt;ul&gt;
&lt;li&gt;Pod 的 IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl delete pod &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;刪除 Pod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl create -f &amp;lt;file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;根據 YAML file 創建 resource&lt;/li&gt;
&lt;li&gt;如果 resource 已經存在，會報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl apply -f &amp;lt;file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;根據 YAML file 創建 resource&lt;/li&gt;
&lt;li&gt;如果 resource 已經存在，會更新 resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl replace -f &amp;lt;file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;根據 YAML file 創建 resource&lt;/li&gt;
&lt;li&gt;如果 resource 已經存在，會刪除舊的 resource，並創建新的 resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl edit replicaset &amp;lt;name&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以直接編輯 Replica Set 的 yaml 檔，但他不是一開始創建用的檔案，而是 Kubernetes 在 memory 暫時生成的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl set image deployment &amp;lt;name&amp;gt; &amp;lt;container-name&amp;gt;=&amp;lt;new-image&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;更新 Deployment 的 image&lt;/li&gt;
&lt;li&gt;注意這裡是 Container name，不是 Pod name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--record=true&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;會記錄每次的操作&lt;/li&gt;
&lt;li&gt;用在 rollout 的時候，可以看到每次的操作，不然會顯示 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;minikube&#34;&gt;minikube&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來在 local machine 上建立一個 single-node cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubeadm&#34;&gt;kubeadm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來在多個 node 上建立 cluster&lt;/li&gt;
&lt;li&gt;在多個 node 上安裝 Kubernetes
&lt;ul&gt;
&lt;li&gt;流程
&lt;ol&gt;
&lt;li&gt;安裝 container runtime&lt;/li&gt;
&lt;li&gt;安裝 kubeadm&lt;/li&gt;
&lt;li&gt;初始化 master node&lt;/li&gt;
&lt;li&gt;建立 pod network&lt;/li&gt;
&lt;li&gt;加入 worker node&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;networking&#34;&gt;Networking&lt;/h2&gt;
&lt;h3 id=&#34;cluster-networking&#34;&gt;Cluster Networking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個 Pod 都有自己的 IP&lt;/li&gt;
&lt;li&gt;兩個不同屬於同一個 cluster 的 Pod 可能會有相同的 IP&lt;/li&gt;
&lt;li&gt;Kubernetes 要求所有的 Pod 要可以在不用 NAT 的情況下互相通信
&lt;ul&gt;
&lt;li&gt;所有的 container 和 node 都要可以在沒有 NAT 的情況下互相通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以用 Calico 等方案實現
&lt;ul&gt;
&lt;li&gt;他會把每個 node network 都設成不同的，底下的 pod IP 自然就不會重複&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Angular 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/angular-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Fri, 24 May 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/angular-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;基礎概念&#34;&gt;基礎概念&lt;/h2&gt;
&lt;h3 id=&#34;module&#34;&gt;Module&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把相關的 Component、Directive、Pipe、Service 等打包在一起的容器&lt;/li&gt;
&lt;li&gt;可以使用 Lazy Loading 延遲加載模組，提高效能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;component&#34;&gt;Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Angular 應用程式的基本組成單位&lt;/li&gt;
&lt;li&gt;由 HTML、CSS、TypeScript 共同組成&lt;/li&gt;
&lt;li&gt;具有自己的 &lt;code&gt;@Component&lt;/code&gt; 裝飾器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pipe&#34;&gt;Pipe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來轉換資料的工具，可以用於字串格式化、日期格式化等&lt;/li&gt;
&lt;li&gt;可以透過 &lt;code&gt;|&lt;/code&gt; 符號在模板中使用，例如 &lt;code&gt;{{ value | uppercase }}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;內建 Pipes：&lt;code&gt;date&lt;/code&gt;、&lt;code&gt;uppercase&lt;/code&gt;、&lt;code&gt;lowercase&lt;/code&gt;、&lt;code&gt;currency&lt;/code&gt;、&lt;code&gt;percent&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;可以建立自訂 Pipe&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;directive&#34;&gt;Directive&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來修改 DOM 元素的外觀或行為
&lt;ul&gt;
&lt;li&gt;例如 &lt;code&gt;ngIf&lt;/code&gt;、&lt;code&gt;ngFor&lt;/code&gt;、&lt;code&gt;ngStyle&lt;/code&gt;、&lt;code&gt;ngClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分為三種類型：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Structural Directive&lt;/strong&gt;: 修改 DOM 的結構
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*ngIf&lt;/code&gt;, &lt;code&gt;*ngFor&lt;/code&gt;, &lt;code&gt;*ngSwitch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可搭配 &lt;code&gt;ng-container&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;不會產生額外的 DOM 元素，適合在 &lt;code&gt;ngIf&lt;/code&gt; 和 &lt;code&gt;ngFor&lt;/code&gt; 不希望產生額外元素時使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*ngFor&lt;/code&gt; 例子：&lt;code&gt;let item of items; index as i&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attribute Directive&lt;/strong&gt;: 修改 DOM 的屬性，例如 &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngStyle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component Directive&lt;/strong&gt;: 包含 template 的 directive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;負責 API 請求、資料處理等工作&lt;/li&gt;
&lt;li&gt;透過 &lt;strong&gt;Dependency Injection (DI)&lt;/strong&gt; 來提供服務&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Injectable()&lt;/code&gt; 裝飾器用來標記服務
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;providedIn&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;: 服務將在整個應用程式中可用&lt;/li&gt;
&lt;li&gt;也可以在特定 Module 或 Component 的 &lt;code&gt;providers&lt;/code&gt; 中設定要注入的 Service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router&#34;&gt;Router&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;負責處理 URL 路由&lt;/li&gt;
&lt;li&gt;設定路由時使用 &lt;code&gt;routes&lt;/code&gt; 陣列
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;: 定義路徑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component&lt;/code&gt;: 指定對應的 Component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canActivate&lt;/code&gt;: 設定路由守衛 (Guard)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由守衛 (Guard)
&lt;ul&gt;
&lt;li&gt;透過 &lt;code&gt;ng g guard &amp;lt;guard-name&amp;gt;&lt;/code&gt; 來產生&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CanActivate&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;控制是否允許使用者進入某個路由&lt;/li&gt;
&lt;li&gt;適合用來驗證使用者權限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli-command&#34;&gt;CLI Command&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng new my-app&lt;/code&gt;: 建立新的 Angular 專案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng serve&lt;/code&gt;: 啟動開發伺服器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng build&lt;/code&gt;: 打包專案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng generate&lt;/code&gt; (縮寫 &lt;code&gt;ng g&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng g module my-module&lt;/code&gt;: 建立新的 Module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g component my-component&lt;/code&gt;: 建立新的 Component
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--module=app&lt;/code&gt;: 指定 Component 所屬的 Module&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g service my-service&lt;/code&gt;: 建立新的 Service&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g pipe my-pipe&lt;/code&gt;: 建立新的 Pipe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g directive my-directive&lt;/code&gt;: 建立新的 Directive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;module-1&#34;&gt;Module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@NgModule()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;declarations&lt;/code&gt;: 定義同一 Module 中的 Component、Directive、Pipe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imports&lt;/code&gt;: 匯入其他 Module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;providers&lt;/code&gt;: 定義 Service&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bootstrap&lt;/code&gt;: 定義應用程式啟動時的根 Component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exports&lt;/code&gt;: 定義要匯出的 Component、Directive、Pipe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;component-1&#34;&gt;Component&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包含的主要部分：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;: HTML 模板&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TypeScript Class&lt;/strong&gt;: 包含 Component 的邏輯與屬性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Selector&lt;/strong&gt;: 定義 Component 在 HTML 中的名稱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Style&lt;/strong&gt;: 樣式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.spec.ts&lt;/strong&gt;: 測試檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standalone Component&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Angular 新版預設採用 Standalone Component 模式&lt;/li&gt;
&lt;li&gt;Component 不再需要透過 &lt;code&gt;NgModule&lt;/code&gt; 管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lifecycle-hooks&#34;&gt;Lifecycle Hooks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ngOnChanges&lt;/code&gt;: 當輸入屬性變更時調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngOnInit&lt;/code&gt;: 組件初始化時調用（僅執行一次）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngDoCheck&lt;/code&gt;: 手動偵測變更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterContentInit&lt;/code&gt;: &lt;code&gt;ng-content&lt;/code&gt; 投影完成後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterContentChecked&lt;/code&gt;: &lt;code&gt;ng-content&lt;/code&gt; 內容變更後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterViewInit&lt;/code&gt;: &lt;code&gt;ViewChild&lt;/code&gt;、&lt;code&gt;ViewChildren&lt;/code&gt; 初始化後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterViewChecked&lt;/code&gt;: 每次檢查變更後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngOnDestroy&lt;/code&gt;: 組件銷毀前調用，可用於取消訂閱與清除資源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sharing-data-資料傳遞&#34;&gt;Sharing Data (資料傳遞)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Input&lt;/code&gt;: 父元件傳遞資料給子元件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Output&lt;/code&gt;: 子元件透過 &lt;code&gt;EventEmitter&lt;/code&gt; 傳遞資料給父元件&lt;/li&gt;
&lt;li&gt;其他方式：
&lt;ul&gt;
&lt;li&gt;透過 &lt;strong&gt;Service&lt;/strong&gt; 和 &lt;strong&gt;RxJS&lt;/strong&gt; Subject/BehaviorSubject 來進行資料共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;data-binding-資料綁定&#34;&gt;Data Binding (資料綁定)&lt;/h2&gt;
&lt;h3 id=&#34;property-binding-屬性綁定&#34;&gt;Property Binding (屬性綁定)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來設定 HTML 元素的屬性&lt;/li&gt;
&lt;li&gt;使用中括號 &lt;code&gt;[]&lt;/code&gt; 包住屬性名稱&lt;/li&gt;
&lt;li&gt;範例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;imageUrl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;event-binding-事件綁定&#34;&gt;Event Binding (事件綁定)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來設定 HTML 元素的事件&lt;/li&gt;
&lt;li&gt;使用小括號 &lt;code&gt;()&lt;/code&gt; 包住事件名稱&lt;/li&gt;
&lt;li&gt;範例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$event&lt;/code&gt;: 取得事件物件
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;onInput&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;($&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;two-way-binding-雙向綁定&#34;&gt;Two-way Binding (雙向綁定)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;屬性與事件綁定結合在一起&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;[(ngModel)]&lt;/code&gt; 綁定表單輸入&lt;/li&gt;
&lt;li&gt;需要匯入 &lt;code&gt;FormsModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;範例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ngModel&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)]=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Spring Boot 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/spring-boot-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Mon, 06 May 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/spring-boot-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;maven&#34;&gt;Maven&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;專案管理工具&lt;/li&gt;
&lt;li&gt;會先檢查 maven local repository 有沒有需要的 dependency，沒有的話就會去 maven central repository (remote repository) 下載&lt;/li&gt;
&lt;li&gt;pom.xml
&lt;ul&gt;
&lt;li&gt;project cooridnate
&lt;ul&gt;
&lt;li&gt;groupId&lt;/li&gt;
&lt;li&gt;artifactId&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugin
&lt;ul&gt;
&lt;li&gt;和 dependency 的差別是，是用來執行某種 task 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mvnw
&lt;ul&gt;
&lt;li&gt;maven wrapper&lt;/li&gt;
&lt;li&gt;在沒有安裝 maven 的環境下，會下載正確的 maven 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring&#34;&gt;Spring&lt;/h2&gt;
&lt;h3 id=&#34;ioc&#34;&gt;IoC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Invocation of Constructor
&lt;ul&gt;
&lt;li&gt;把物件交給 Spring 管理&lt;/li&gt;
&lt;li&gt;loose coupling&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bean
&lt;ul&gt;
&lt;li&gt;給 Spring 管理的物件&lt;/li&gt;
&lt;li&gt;創建方法
&lt;ul&gt;
&lt;li&gt;@Component
&lt;ul&gt;
&lt;li&gt;創建出的 Bean 名字是 class 的開頭轉小寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注入方法
&lt;ul&gt;
&lt;li&gt;@Autowired
&lt;ul&gt;
&lt;li&gt;種類
&lt;ul&gt;
&lt;li&gt;field injection
&lt;ul&gt;
&lt;li&gt;不太推薦，不利於 unit test&lt;/li&gt;
&lt;li&gt;spring boot 會先建立所有 component，在逐一注入，使元件可能短暫處於初始化不完整狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;constructor injection
&lt;ul&gt;
&lt;li&gt;最推薦&lt;/li&gt;
&lt;li&gt;建立 bean 時就注入&lt;/li&gt;
&lt;li&gt;確保 component 被使用時是處於完整的狀態&lt;/li&gt;
&lt;li&gt;有利於 unit test，因為可以把設計好的 mock bean 從 constructor 傳入&lt;/li&gt;
&lt;li&gt;spring 建議使用 constructor injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;setter injection
&lt;ul&gt;
&lt;li&gt;用 setter 來注入&lt;/li&gt;
&lt;li&gt;創好 component 後，再注入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制
&lt;ol&gt;
&lt;li&gt;該 Class 也得是 Bean&lt;/li&gt;
&lt;li&gt;會根據類型注入 bean
&lt;ul&gt;
&lt;li&gt;如果同時有多個同類型的 bean，會報錯，可以用 @Qualifier 指定要注入的 bean 名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;@Qualifier
&lt;ul&gt;
&lt;li&gt;指定要注入的 bean 名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Primary
&lt;ul&gt;
&lt;li&gt;如果有多個同類型的 bean，會優先注入這個 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cycle life
&lt;ul&gt;
&lt;li&gt;@PostConstruct
&lt;ul&gt;
&lt;li&gt;創建 bean 後，就會執行這個方法&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;必須是 public void&lt;/li&gt;
&lt;li&gt;不能有參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@PreDestroy
&lt;ul&gt;
&lt;li&gt;bean 被銷毀前執行&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;必須是 public void&lt;/li&gt;
&lt;li&gt;不能有參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lazy Initialization
&lt;ul&gt;
&lt;li&gt;本來 beans 不管有沒有用都會被創建&lt;/li&gt;
&lt;li&gt;@Lazy
&lt;ul&gt;
&lt;li&gt;只有在要使用時才會初始化&lt;/li&gt;
&lt;li&gt;缺點是用 @RestController 的話，第一次 request 才會創建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在 application.properties 裡設定 spring.main.lazy-initialization=true，讓所有 beans 都變成 lazy initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aop&#34;&gt;AOP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Aspect Oriented Programming&lt;/li&gt;
&lt;li&gt;透過 Aspect 統一處理不同方法的共同邏輯&lt;/li&gt;
&lt;li&gt;要導入 aop 的 starter&lt;/li&gt;
&lt;li&gt;只有 Bean 才能設置 @Aspect&lt;/li&gt;
&lt;li&gt;Annotation
&lt;ul&gt;
&lt;li&gt;@Aspect
&lt;ul&gt;
&lt;li&gt;這個 class 是一個切面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Before
&lt;ul&gt;
&lt;li&gt;加上切入點，就可以在切入點 (Pointcut) 的方法執行前執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@After
&lt;ul&gt;
&lt;li&gt;在方法之後執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Around
&lt;ul&gt;
&lt;li&gt;在方法之前和之後都執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的功能都已經被封裝好了，開發較少用到 AOP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;run-app&#34;&gt;Run app&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;java -jar&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mvn clean package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java -jar target/xxx.jar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;mvn spring-boot:run&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mvn spring-boot:run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特性&#34;&gt;特性&lt;/h2&gt;
&lt;h3 id=&#34;starter&#34;&gt;Starter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using.build-systems.starters&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Boot Starters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方的 starter 命名是 &lt;code&gt;spring-boot-starter-*&lt;/code&gt;
第三方的 starter 命名是 &lt;code&gt;*-spring-boot-starter&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;外部化配置&#34;&gt;外部化配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application.properties&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;重新啟動 jar 時會自動載入，不用改配置要重新 build jar&lt;/li&gt;
&lt;li&gt;集中管理&lt;/li&gt;
&lt;li&gt;@Value
&lt;ul&gt;
&lt;li&gt;可以注入到變數中&lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;:&lt;/code&gt; 來設定預設值&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;只能在 Bean 和 Configuration 中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;YAML
&lt;ul&gt;
&lt;li&gt;application.properties 寫多後，沒有層級辨識度&lt;/li&gt;
&lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;profiles
&lt;ul&gt;
&lt;li&gt;可以根據不同的環境來設定不同的配置 (dev, test, prod)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application-{profile}.properties&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application-{profile}.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring.profiles.active&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定啟用的 profile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jar
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Dspring.profiles.active=dev&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定配置文件
&lt;ul&gt;
&lt;li&gt;cli
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--spring.config.location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Config 資料夾
&lt;ul&gt;
&lt;li&gt;可以在 jar 目錄下建立 config 資料夾，放配置文件，不用輸入額外的 args&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大致分類
&lt;ul&gt;
&lt;li&gt;core
&lt;ul&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;web&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;actuator&lt;/li&gt;
&lt;li&gt;integration&lt;/li&gt;
&lt;li&gt;devtools&lt;/li&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-management&#34;&gt;Dependency Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;parent 寫了版本號，故 dependency 可以不用寫版本號&lt;/li&gt;
&lt;li&gt;真的要指定的話，可以利用 maven 的就近原則&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;auto-configuration&#34;&gt;Auto Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Component Scan
&lt;ul&gt;
&lt;li&gt;Spring Boot 會掃描主程式所在的 package 以及子 package&lt;/li&gt;
&lt;li&gt;也可以在主程式上加以下註解來指定掃描的 package
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@SpringBootApplication(scanBasePackages = &amp;quot;com.example&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有 starter 都有 &lt;code&gt;spring-boot-starter&lt;/code&gt;，&lt;code&gt;spring-boot-starter&lt;/code&gt; 又有 &lt;code&gt;spring-boot-autoconfigure&lt;/code&gt;，這個就是自動配置的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spring boot 默認掃描不到 spring-boot-autoconfigure 的所有配置類 (因為預設只掃描 Main Application Class 的 package)，但是 @SpringBootApplication 的 @EnableAutoConfiguration 會預設掃描 spring-boot-autoconfigure 的所有配置類
&lt;ul&gt;
&lt;li&gt;它們再依據 conditional annotation 來決定是否要啟用這個配置類&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-annotations&#34;&gt;Common Annotations&lt;/h2&gt;
&lt;p&gt;Spring Boot 放棄了 XML 配置，改用 Annotation 配置&lt;/p&gt;
&lt;h3 id=&#34;component-registration&#34;&gt;Component registration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Configuration, @SpringBootConfiguration
&lt;ul&gt;
&lt;li&gt;@Bean
&lt;ul&gt;
&lt;li&gt;有時候可能會想用第三方套件，此時可能不能修改套件的 code，這時候就可以用 @Configuration 來註冊 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Controller, @Service, @Repository, @Component
&lt;ul&gt;
&lt;li&gt;三層式架構
&lt;ul&gt;
&lt;li&gt;@Controller
&lt;ul&gt;
&lt;li&gt;用來處理請求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Service
&lt;ul&gt;
&lt;li&gt;用來處理業務邏輯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Repository
&lt;ul&gt;
&lt;li&gt;用來處理資料庫操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@SpringBootApplication
&lt;ul&gt;
&lt;li&gt;由以下組成
&lt;ul&gt;
&lt;li&gt;@SpringBootConfiguration&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration&lt;/li&gt;
&lt;li&gt;@ComponentScan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web
&lt;ul&gt;
&lt;li&gt;@RestController
&lt;ul&gt;
&lt;li&gt;@Controller + @ResponseBody&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequestMapping
&lt;ul&gt;
&lt;li&gt;設置 route&lt;/li&gt;
&lt;li&gt;Method
&lt;ul&gt;
&lt;li&gt;@GetMapping&lt;/li&gt;
&lt;li&gt;@PostMapping&lt;/li&gt;
&lt;li&gt;@PutMapping&lt;/li&gt;
&lt;li&gt;@DeleteMapping&lt;/li&gt;
&lt;li&gt;@PatchMapping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得參數
&lt;ul&gt;
&lt;li&gt;@RequestParam
&lt;ul&gt;
&lt;li&gt;取得 url 中的參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequestBody
&lt;ul&gt;
&lt;li&gt;取得 request body&lt;/li&gt;
&lt;li&gt;根據欄位名字調用對應的 setter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequestHeader
&lt;ul&gt;
&lt;li&gt;取得 header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@PathVariable
&lt;ul&gt;
&lt;li&gt;取得 route 中的參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Scope
&lt;ul&gt;
&lt;li&gt;mode
&lt;ul&gt;
&lt;li&gt;singleton
&lt;ul&gt;
&lt;li&gt;預設，共用一個 instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;prototype
&lt;ul&gt;
&lt;li&gt;每次注入都創建新的 instance&lt;/li&gt;
&lt;li&gt;可以用 proxy.mode = ScopedProxyMode.TARGET_CLASS，會變成每次調用 method 都創建新的 instance&lt;/li&gt;
&lt;li&gt;prototype 的元件生出後，spring 不會再管理，要自己管理生命週期，相當於 new 出物件的替代作法&lt;/li&gt;
&lt;li&gt;預設是 lazy initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;request
&lt;ul&gt;
&lt;li&gt;每個 request 都有一個獨立的 instance&lt;/li&gt;
&lt;li&gt;request 指的是 HTTP request，從進入 controller 到離開 controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;session
&lt;ul&gt;
&lt;li&gt;每個 session 都有一個獨立的 instance&lt;/li&gt;
&lt;li&gt;session 指的是 HTTP session，從進入 controller 到離開 controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conditional-annotations&#34;&gt;Conditional Annotations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;條件成立則觸發指定行為&lt;/li&gt;
&lt;li&gt;ConditionalOn&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;ConditionalOnClass
&lt;ul&gt;
&lt;li&gt;如果 classpath 有指定的 class 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConditionalOnMissingClass
&lt;ul&gt;
&lt;li&gt;如果 classpath 沒有指定的 class 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConditionalOnBean
&lt;ul&gt;
&lt;li&gt;如果容器中有指定的 bean 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConditionalOnMissingBean
&lt;ul&gt;
&lt;li&gt;如果容器中沒有指定的 bean 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scenario
&lt;ul&gt;
&lt;li&gt;如果有某個 dependency，則創建某個 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;property-binding&#34;&gt;Property Binding&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把任意 Bean 的 property 與配置文件 (application.properties) 中的 property 綁定&lt;/li&gt;
&lt;li&gt;annotations
&lt;ul&gt;
&lt;li&gt;@ConfigurationProperties
&lt;ul&gt;
&lt;li&gt;prefix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@EnableConfigurationProperties
&lt;ul&gt;
&lt;li&gt;如果 class 只有 @ConfigurationProperties，沒有 @Component，需要加這個 annotation&lt;/li&gt;
&lt;li&gt;用在第三方 package 上，因為默認掃不到第三方的 @component&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-json-data-binding&#34;&gt;Java JSON Data Binding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 Java POJO 和 JSON 之間轉換&lt;/li&gt;
&lt;li&gt;Spring 用 Jackson 來做轉換
&lt;ul&gt;
&lt;li&gt;Jackson 會 call getter, setter 來轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;alias
&lt;ul&gt;
&lt;li&gt;mapping&lt;/li&gt;
&lt;li&gt;marshalling&lt;/li&gt;
&lt;li&gt;serialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;輔助工具&#34;&gt;輔助工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spring boot devtools
&lt;ul&gt;
&lt;li&gt;Hot reload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Boot Actuator
&lt;ul&gt;
&lt;li&gt;公開用來 monitor 的 endpoint&lt;/li&gt;
&lt;li&gt;endpoints
&lt;ul&gt;
&lt;li&gt;都有固定前綴 /actuator&lt;/li&gt;
&lt;li&gt;/health
&lt;ul&gt;
&lt;li&gt;查看應用程式的 status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/info
&lt;ul&gt;
&lt;li&gt;查看應用程式的 info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/beans
&lt;ul&gt;
&lt;li&gt;查看所有 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Logging 選擇&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logging API
&lt;ul&gt;
&lt;li&gt;JCL&lt;/li&gt;
&lt;li&gt;SLF4J (Simple Logging Facade for Java)&lt;/li&gt;
&lt;li&gt;jboss-logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logging implementation
&lt;ul&gt;
&lt;li&gt;Logback&lt;/li&gt;
&lt;li&gt;Log4j2&lt;/li&gt;
&lt;li&gt;JUL (java.util.logging)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Boot 預設使用 Logback 和 SLF4J&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-starter 引用了 spring-boot-starter-logging&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;log-format&#34;&gt;Log Format&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Default example
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2024-05-06T19:21:40.751+08:00  INFO 22932 --- [demo] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path &amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;時間, 日誌等級, pid, 分割符, thread, logger, message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;log-level&#34;&gt;Log Level&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Type (由低到高)
&lt;ul&gt;
&lt;li&gt;ALL&lt;/li&gt;
&lt;li&gt;TRACE
&lt;ul&gt;
&lt;li&gt;一般不用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DEBUG&lt;/li&gt;
&lt;li&gt;INFO&lt;/li&gt;
&lt;li&gt;WARN&lt;/li&gt;
&lt;li&gt;ERROR&lt;/li&gt;
&lt;li&gt;FATAL&lt;/li&gt;
&lt;li&gt;OFF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會 print 出比設定的等級高的 log&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;log-configuration&#34;&gt;Log Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;logging.level.*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定不同 package 的 log 等級&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;logging.level.com.example=DEBUG
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logging.group.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把多個 package 放在一組，可以統一設定&lt;/li&gt;
&lt;li&gt;預設有 web, sql 組&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logging.file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.name
&lt;ul&gt;
&lt;li&gt;檔名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;歸檔 and 切割&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;歸檔
&lt;ul&gt;
&lt;li&gt;每天單獨存&lt;/li&gt;
&lt;li&gt;.logback.rolllingpolicy.file-name-pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切割
&lt;ul&gt;
&lt;li&gt;超過指定大小就切割&lt;/li&gt;
&lt;li&gt;.logback.rolllingpolicy.max-file-size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;filter&#34;&gt;Filter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;實做 javax.servlet.Filter，就能註冊為 spring 的 filter&lt;/li&gt;
&lt;li&gt;OncePerRequestFilter
&lt;ul&gt;
&lt;li&gt;保證一次 request 只會執行一次&lt;/li&gt;
&lt;li&gt;doFilterInternal
&lt;ul&gt;
&lt;li&gt;chain.doFilter(request, response)
&lt;ul&gt;
&lt;li&gt;這行之後代表後面的 filter 都執行完了&lt;/li&gt;
&lt;li&gt;如果只有一個 filter，就代表 controller 執行完了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shouldNotFilter
&lt;ul&gt;
&lt;li&gt;可以設定不要執行的 url pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;註冊-filter&#34;&gt;註冊 Filter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定 @Configuration&lt;/li&gt;
&lt;li&gt;加到 Bean
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; setUrlPatterns
&lt;ul&gt;
&lt;li&gt;只有符合 url pattern 的 request 才會經過這個 filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; setOrder
&lt;ul&gt;
&lt;li&gt;決定 filter 的順序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 filter 要取得 request 和 response 的內容，可以用 ContentCachingRequestWrapper 和 ContentCachingResponseWrapper 重新包裝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為原本的作法是用 stream 讀取資料，只能讀一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@WebFilter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;屬於 Java servlet 而非 Spring
&lt;ul&gt;
&lt;li&gt;要在 application 補上 @ServletComponentScan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以直接註冊 filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-security&#34;&gt;Spring Security&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;名詞
&lt;ul&gt;
&lt;li&gt;Authentication
&lt;ul&gt;
&lt;li&gt;認證
&lt;ul&gt;
&lt;li&gt;檢查是不是系統的使用者，以及是哪個使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authorization
&lt;ul&gt;
&lt;li&gt;授權
&lt;ul&gt;
&lt;li&gt;檢查使用者有沒有權限做某件事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;filter chain&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;UsernamePasswordAuthenticationFilter
&lt;ul&gt;
&lt;li&gt;檢查使用者名稱和密碼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ExceptionTranslationFilter
&lt;ul&gt;
&lt;li&gt;處理例外&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FilterSecurityInterceptor
&lt;ul&gt;
&lt;li&gt;檢查授權&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;authorizeHttpRequests
&lt;ul&gt;
&lt;li&gt;設定哪些 request 需要什麼權限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example: JWT 驗證流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先透過 filter chain 經過 JWT filter&lt;/li&gt;
&lt;li&gt;透過 UserDetailsService 取得使用者資訊&lt;/li&gt;
&lt;li&gt;驗證使用者資訊&lt;/li&gt;
&lt;li&gt;更新 SecurityContextHolder
&lt;ul&gt;
&lt;li&gt;用來判斷使用者是否已經通過 authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@EnableWebSecurity
&lt;ul&gt;
&lt;li&gt;啟用 web security&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecurityFilterChain&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;securityFilterChain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;authorizeHttpRequests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AuthorizeHttpRequestsConfigurer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;AuthorizedUrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;anyRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;authenticated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;httpBasic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Customizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withDefaults&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecurityFilterChain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;把 Spring Boot 預設實作的 fitler chain 的 @Order 拿掉，這是決定誰的優先序高&lt;/li&gt;
&lt;li&gt;也把 formLogin 拿掉，就不會有登入頁面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;userdetails&#34;&gt;UserDetails&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;實現 UserDetailsService 的 Bean 可以被用來取得 UserDetails&lt;/li&gt;
&lt;li&gt;implements UserDetails
&lt;ul&gt;
&lt;li&gt;getAuthorities&lt;/li&gt;
&lt;li&gt;getUsername&lt;/li&gt;
&lt;li&gt;getPassword&lt;/li&gt;
&lt;li&gt;isAccountNonExpired&lt;/li&gt;
&lt;li&gt;isAccountNonLocked&lt;/li&gt;
&lt;li&gt;isCredentialsNonExpired&lt;/li&gt;
&lt;li&gt;isEnabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;securitycontextholder&#34;&gt;SecurityContextHolder&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來存放 authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;commandlinerunner&#34;&gt;CommandLineRunner&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用來在 Spring Boot 啟動後執行一些任務&lt;/li&gt;
&lt;li&gt;會在所有 bean 創建完後執行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jpa&#34;&gt;JPA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jakarta Persistence API&lt;/li&gt;
&lt;li&gt;以前叫 Java Persistence API&lt;/li&gt;
&lt;li&gt;只是一個 specifcation，提供一組 interface，需要實作
&lt;ul&gt;
&lt;li&gt;包含了 Entity, EntityManager, Query, Transaction..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DataSource
&lt;ul&gt;
&lt;li&gt;用來連接資料庫&lt;/li&gt;
&lt;li&gt;定義了連接資料庫的 info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EntityManager
&lt;ul&gt;
&lt;li&gt;用來創建 query 的主要 component&lt;/li&gt;
&lt;li&gt;需要 DataSource&lt;/li&gt;
&lt;li&gt;EntityManager vs JpaRepositroy
&lt;ul&gt;
&lt;li&gt;EntityManager
&lt;ul&gt;
&lt;li&gt;low-level control and flexibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JpaRepository
&lt;ul&gt;
&lt;li&gt;high-level abstraction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JPQL
&lt;ul&gt;
&lt;li&gt;基於 Entity name 和 fields 的 query language&lt;/li&gt;
&lt;li&gt;不是基於資料庫的 column 或 table name，是基於 Entity 的名字，要注意區別&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data access object (DAO)
&lt;ul&gt;
&lt;li&gt;common pattern&lt;/li&gt;
&lt;li&gt;需要 JPA Entity Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Config
&lt;ul&gt;
&lt;li&gt;spring.jpa.hibernate.ddl-auto
&lt;ul&gt;
&lt;li&gt;create
&lt;ul&gt;
&lt;li&gt;每次都會重新創建新的 table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;update
&lt;ul&gt;
&lt;li&gt;只會更新 table，不會刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create-drop
&lt;ul&gt;
&lt;li&gt;創建 table，然後刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;validate
&lt;ul&gt;
&lt;li&gt;只會檢查 table 是否存在，不會創建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Annotation
&lt;ul&gt;
&lt;li&gt;@Entity, @Table
&lt;ul&gt;
&lt;li&gt;也要記得寫 getter, setter&lt;/li&gt;
&lt;li&gt;@Entity 需要 public 或 protected 的無參數建構子&lt;/li&gt;
&lt;li&gt;@Table
&lt;ul&gt;
&lt;li&gt;可選，可以設定 table 名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Transient
&lt;ul&gt;
&lt;li&gt;不會被序列化，不會被存到資料庫&lt;/li&gt;
&lt;li&gt;可用在可以單獨計算的欄位，比如用資料庫的生日可以算出年齡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Transactional
&lt;ul&gt;
&lt;li&gt;用在 method 上，代表這個 method 是一個 transaction&lt;/li&gt;
&lt;li&gt;propagation
&lt;ul&gt;
&lt;li&gt;用在 method 上，被別的 transaction 調用應該怎麼處理，講 transaction 的傳播&lt;/li&gt;
&lt;li&gt;REQUIRED
&lt;ul&gt;
&lt;li&gt;如果有外層 transaction 就用，沒有就創建一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;REQUIRES_NEW
&lt;ul&gt;
&lt;li&gt;無論有沒有外層 transaction，都創建一個新的，不受影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NESTED
&lt;ul&gt;
&lt;li&gt;嵌套 transaction，如果外層 transaction rollback，內層也會 rollback&lt;/li&gt;
&lt;li&gt;如果自己 rollback，外層不受影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Column
&lt;ul&gt;
&lt;li&gt;可以設定欄位名稱&lt;/li&gt;
&lt;li&gt;這是可選的，沒有的話就是用變數名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Id
&lt;ul&gt;
&lt;li&gt;Primary key&lt;/li&gt;
&lt;li&gt;@GeneratedValue
&lt;ul&gt;
&lt;li&gt;strategy
&lt;ul&gt;
&lt;li&gt;AUTO
&lt;ul&gt;
&lt;li&gt;根據資料庫自動選擇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDENTITY
&lt;ul&gt;
&lt;li&gt;用資料庫的 identity column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SEQUENCE
&lt;ul&gt;
&lt;li&gt;用資料庫的 sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Table
&lt;ul&gt;
&lt;li&gt;用 underlying table 來確保唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UUID
&lt;ul&gt;
&lt;li&gt;用 UUID 來確保唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@OneToMany, @ManyToOne
&lt;ul&gt;
&lt;li&gt;用來設定關聯&lt;/li&gt;
&lt;li&gt;cascade
&lt;ul&gt;
&lt;li&gt;設定當 parent 被刪除時，child 要怎麼處理
&lt;ul&gt;
&lt;li&gt;CascadeType.ALL
&lt;ul&gt;
&lt;li&gt;parent 被刪除時，child 也會被刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CascadeType.PERSIST
&lt;ul&gt;
&lt;li&gt;parent 被刪除時，child 不會被刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data JPA
&lt;ul&gt;
&lt;li&gt;用特定語法，只需要定好 interface，不用 implement&lt;/li&gt;
&lt;li&gt;extends JpaRepository&amp;lt;Entity, ID&amp;gt;
&lt;ul&gt;
&lt;li&gt;第一個參數是 entity&lt;/li&gt;
&lt;li&gt;第二個參數是 primary key 的型態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示範
&lt;ul&gt;
&lt;li&gt;findByXxx
&lt;ul&gt;
&lt;li&gt;用 XXX 的欄位來查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;findByXXXLike
&lt;ul&gt;
&lt;li&gt;用 XXX 的欄位來模糊查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jparepository&#34;&gt;JpaRepository&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Repository
&lt;ul&gt;
&lt;li&gt;用來標記 DAO&lt;/li&gt;
&lt;li&gt;extends JpaRepository&amp;lt;Entity, ID&amp;gt;
&lt;ul&gt;
&lt;li&gt;第一個參數是 entity&lt;/li&gt;
&lt;li&gt;第二個參數是 entity 的 id 的型態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以自定義方法
&lt;ul&gt;
&lt;li&gt;遵循命名規則，他會自己轉 SQL&lt;/li&gt;
&lt;li&gt;也可以用 @Query 來自定義 SQL
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;?0&amp;gt;&lt;/code&gt; 代表第一個參數，以此類推&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hibernate&#34;&gt;Hibernate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來儲存 java object 到資料庫的框架&lt;/li&gt;
&lt;li&gt;ORM
&lt;ul&gt;
&lt;li&gt;Object Relational Mapping&lt;/li&gt;
&lt;li&gt;用物件來操作資料庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一種 JPA 的實作&lt;/li&gt;
&lt;li&gt;背後用 JDBC 來操作資料庫&lt;/li&gt;
&lt;li&gt;Spring Boot 預設用 Hibernate 來實作 JPA&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;validation&#34;&gt;Validation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;field validation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@NotEmpty&lt;/li&gt;
&lt;li&gt;@Min&lt;/li&gt;
&lt;li&gt;@Max&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Valid&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用在 controller 上，才會自動檢查參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exception&#34;&gt;Exception&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RuntimeException
&lt;ul&gt;
&lt;li&gt;繼承這個，可以設置 status, message, timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@ExceptionHandler
&lt;ul&gt;
&lt;li&gt;放在 Controller 中的 exception handler method 上，可以處理底下 method 丟出的 exception&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@ControllerAdvice
&lt;ul&gt;
&lt;li&gt;類似 interceptor/filter&lt;/li&gt;
&lt;li&gt;可以 pre-process request, post-process response&lt;/li&gt;
&lt;li&gt;可以用在 global exception handler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;h3 id=&#34;integration-test&#34;&gt;Integration Test&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 test class 前面的 annotation
&lt;ul&gt;
&lt;li&gt;@RunWith(SpringRunner.class)&lt;/li&gt;
&lt;li&gt;@SpringBootTest&lt;/li&gt;
&lt;li&gt;@AutoConfigureMockMvc
&lt;ul&gt;
&lt;li&gt;測試開始時會在容器中創建 MockMvc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 test method 前面加的 annotation
&lt;ul&gt;
&lt;li&gt;@Test&lt;/li&gt;
&lt;li&gt;@Before, @After
&lt;ul&gt;
&lt;li&gt;在每個測試前後執行，可以用來清空資料庫和設置 header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mockmvc&#34;&gt;MockMvc&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來模擬 HTTP request&lt;/li&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MockMvc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;perform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isOk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;h3 id=&#34;lombok&#34;&gt;Lombok&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Getter, @Setter
&lt;ul&gt;
&lt;li&gt;生成 getter, setter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@ToString
&lt;ul&gt;
&lt;li&gt;印出所有變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@EqualsAndHashCode
&lt;ul&gt;
&lt;li&gt;生成 equals, hashCode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Args
&lt;ul&gt;
&lt;li&gt;@NoArgsConstructor
&lt;ul&gt;
&lt;li&gt;生成無參數建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@AllArgsConstructor
&lt;ul&gt;
&lt;li&gt;生成所有參數建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequiredArgsConstructor
&lt;ul&gt;
&lt;li&gt;只幫 final 變數生成建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Data
&lt;ul&gt;
&lt;li&gt;同時用 @Getter, @Setter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Value
&lt;ul&gt;
&lt;li&gt;把所有變數都設成 final&lt;/li&gt;
&lt;li&gt;同時用 @Getter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor&lt;/li&gt;
&lt;li&gt;和 Spring boot 的 @Value 撞名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Builder
&lt;ul&gt;
&lt;li&gt;生成 builder pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Slf4j
&lt;ul&gt;
&lt;li&gt;生成 log 變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jackson&#34;&gt;Jackson&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ObjectMapper
&lt;ul&gt;
&lt;li&gt;用來轉換物件和 JSON&lt;/li&gt;
&lt;li&gt;readValue
&lt;ul&gt;
&lt;li&gt;把 JSON 轉成物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 getter, setter 來判斷欄位&lt;/li&gt;
&lt;li&gt;Annotation
&lt;ul&gt;
&lt;li&gt;@JsonIgnore
&lt;ul&gt;
&lt;li&gt;不轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonProperty
&lt;ul&gt;
&lt;li&gt;指定欄位名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonUnwrapped
&lt;ul&gt;
&lt;li&gt;把物件的欄位展開，從巢狀變成平面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonInclude
&lt;ul&gt;
&lt;li&gt;設定要不要轉換 null&lt;/li&gt;
&lt;li&gt;如果設定為 Include.NON_NULL，給 null 的話，就不會轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonFormat
&lt;ul&gt;
&lt;li&gt;設定日期格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>設計模式 Desing Pattern</title>
        <link>https://roykesydon.github.io/Blog/p/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-desing-pattern/</link>
        <pubDate>Tue, 10 Oct 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-desing-pattern/</guid>
        <description>&lt;h2 id=&#34;creational-patterns&#34;&gt;Creational patterns&lt;/h2&gt;
&lt;p&gt;關於 object creation 的 patterns。&lt;/p&gt;
&lt;h3 id=&#34;factory-method&#34;&gt;Factory Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將不同 Product 定義一個共有的 Interface(以下簡稱 PI)，並由子類別實作，同時也幫不同工廠定義一個生成 product 的 interface(以下簡稱 FI)，透過不同的工廠類別實體來建立有共同 interface (PI)的不同 Product。&lt;/li&gt;
&lt;li&gt;優點
&lt;ul&gt;
&lt;li&gt;將建立 Product 的方法獨立出來，符合 Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;可以輕易擴充新種類的 Product，而不用修改原本的程式碼，符合 Open-Closed Principle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstract-factory&#34;&gt;Abstract Factory&lt;/h3&gt;
&lt;p&gt;相比 Factory Method，現在的情境是有多個 Product 的同時，又會分不同系列，而且每次都是使用同一系列的 Product。
- ex: 有一套家具，但是分多種不同的風格，每次都是使用同一風格的家具。&lt;/p&gt;
&lt;p&gt;現在 Factory 會有一個共有的 interface，但是這個 interface 包含了建立一整套 product 的方法&lt;/p&gt;
&lt;h3 id=&#34;builder&#34;&gt;Builder&lt;/h3&gt;
&lt;p&gt;對於建構一個複雜且具備多種組合的產品，可以透過下面兩種方式其中之一解決：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建構巨大的建構函式&lt;/li&gt;
&lt;li&gt;覆蓋所有可能的子類別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但都存在其問題，要不是大量的子類別，不然就是難以呼叫的建構函式。&lt;/p&gt;
&lt;p&gt;把建立物件的每個 component 獨立出來，並且切成多個可分開執行的 step，再根據自己的需求調用需要的函式。&lt;/p&gt;
&lt;p&gt;對於建置步驟可能需要不同時做的情況，定義一個 Builder interface，包含了建立物件的每個 component 的方法，然後由 Builder 的子類別來實作這些方法。&lt;/p&gt;
&lt;p&gt;Client 可以根據自己的需要調用 Builder 中的方法（不用全部調用），就可以在同樣的建構程式碼下透過不同的 Builder 來建立不同的物件。&lt;/p&gt;
&lt;p&gt;Director 不是必需的，但有需要的話可以讓他幫忙調用 Builder 的 method，好在專案中重複使用。&lt;/p&gt;
&lt;h3 id=&#34;prototype&#34;&gt;Prototype&lt;/h3&gt;
&lt;p&gt;使用在想要獲得某個對象的 clone 的情境。如果直接照著外表複製，可能會因為看不到私有屬性而造成問題。&lt;/p&gt;
&lt;p&gt;把 clone 的責任交給對象本身，而不是交給 Client。由對象本身提供 clone method。
支援 clone 方法的物像被稱為 prototype。&lt;/p&gt;
&lt;h3 id=&#34;singleton&#34;&gt;Singleton&lt;/h3&gt;
&lt;p&gt;確保某個類別只有一個 instance，並且提供一個 global access point。&lt;/p&gt;
&lt;p&gt;但是這樣違反了 Single Responsibility Principle，因為他現在要解決兩個問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要讓唯一的 instance 可以被全域存取&lt;/li&gt;
&lt;li&gt;負責確保自己的類別只有一個 instance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而且會讓全域變數有的缺點轉移過來，比如不安全，因為別的程式碼可能也可能修改我們在用的變數&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;structural-patterns&#34;&gt;Structural patterns&lt;/h2&gt;
&lt;p&gt;探討如何組裝類別和物件成為更大的結構。&lt;/p&gt;
&lt;h3 id=&#34;adapter&#34;&gt;Adapter&lt;/h3&gt;
&lt;p&gt;轉換某個對象的 interface 到另外一種 interface，讓另外一個 Object 可以理解他。
就像 XML 要轉到 JSON。&lt;/p&gt;
&lt;h3 id=&#34;brdige&#34;&gt;Brdige&lt;/h3&gt;
&lt;p&gt;把一個大類別分成兩個獨立的維度（抽象和實作），讓他們可以獨立變化。&lt;/p&gt;
&lt;h4 id=&#34;gura-舉的簡單例子&#34;&gt;Gura 舉的簡單例子&lt;/h4&gt;
&lt;p&gt;這例子可以被拿來想像具體實作可能長怎樣&lt;/p&gt;
&lt;p&gt;使用在需要在多個 orthogonal (independent) 的維度上擴展類別時的情境。比如我們要生產的一堆 entity 有分不同的 shape 和 color。
如果有兩種 shape 和兩種 color，我們就會有 4 種子類別&lt;/p&gt;
&lt;p&gt;目標是讓情況從難以計數的子類別數，變成多組功能聯合起來。可以透過把其中一個維度轉換成單獨的類別，然後用引用的方式獲取。&lt;/p&gt;
&lt;h4 id=&#34;作法&#34;&gt;作法&lt;/h4&gt;
&lt;p&gt;拆成 abstraction (high-level control) 和 implementation (實際工作)，
由 abstraction 來控制 implementation，比如 GUI 來控制底下的 API。
這樣的好處是兩邊都可以各自發展，以 GUI 和 API 舉例，GUI 可以開發不同方法調用事先說好的 API 介面（abstract），而根據 API 介面可以發展出不同的 implementation。&lt;/p&gt;
&lt;p&gt;未來有更新的 GUI （繼承原有的 abstraction）也因為 implementation 是獨立的，不用擔心影響到他&lt;/p&gt;
&lt;h3 id=&#34;composite&#34;&gt;Composite&lt;/h3&gt;
&lt;p&gt;用在程式模型具有層級結構（像是表示成樹）的情況。比如說我現在有一個大盒子，每次拆開盒子裡面有可能是多個東西，然後東西可能是小一點的盒子，或是產品。&lt;/p&gt;
&lt;p&gt;如果要確認全部的產品價格總和，就要層層展開所有盒子，直到看到所有產品。&lt;/p&gt;
&lt;h4 id=&#34;作法-1&#34;&gt;作法&lt;/h4&gt;
&lt;p&gt;假設盒子結構稱為 Composite，而裡面的東西稱為 Component。我們可以定義一個共同介面，以價格為例，可能是讓 composite 和 component 都有獲取價格的 method，但是當調用 composite 的價格時，他會往 child 調用獲取價格的 method，然後把價格加總起來。用遞迴的方式來處理。&lt;/p&gt;
&lt;p&gt;對於 Composite (Container)，不但實現 Component，也提供一個 list 來存放子 component，以及加入和從 list 中移除的 method。&lt;/p&gt;
&lt;p&gt;對 Composite 的操作，會被委託給子 component，不需要 client 擔心。&lt;/p&gt;
&lt;p&gt;就像指揮官只需要對高階軍官下命令。&lt;/p&gt;
&lt;h3 id=&#34;decorator&#34;&gt;Decorator&lt;/h3&gt;
&lt;p&gt;當今天有多種同類型的東西，你可以能會同時用到多種子類別所形成的組合時，就可以用 Decorator。&lt;/p&gt;
&lt;p&gt;Guru 舉例，不同社群平台的 notification，你可能會想要有不同的 notifier，發到一些指定的社群平台。也有拿天冷穿衣服舉例，可以層層穿不同的衣服。&lt;/p&gt;
&lt;p&gt;但這是一層層的感覺，具有順序性。
Decorator 和 Component 都繼承同一個 interface。
有兩種實作辦法，可以層層包裹但是在外部自行調用，也可以把包裹的功能放在 Decorator 裡面，讓他自己調用。
如果是第二種，可能就像下面這樣
就像是 &lt;code&gt;data = new Encrypt(new Compress(new FileData(data)))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;存在很難從 stack 中刪除特定 decorator 的缺點。&lt;/p&gt;
&lt;h3 id=&#34;facade&#34;&gt;Facade&lt;/h3&gt;
&lt;p&gt;為複雜的一堆子系統提供一個外部介面 Class，讓 client 可以使用他們關心的功能。
實際怎麼調用 client 無須知道。&lt;/p&gt;
&lt;p&gt;Guru 舉例，比如說你要轉換影片，可能要調用很多不同的子系統，比如說轉檔、壓縮、上傳等等，可以獨立出去一個新的 class 提供轉換影片的功能，然後內部調用這堆子系統，client 只需要調用這個新的 class 就好。&lt;/p&gt;
&lt;p&gt;容易形成 god object。&lt;/p&gt;
&lt;h3 id=&#34;flyweight&#34;&gt;Flyweight&lt;/h3&gt;
&lt;p&gt;對於大量類似的物件，為求節省記憶體而誕生的 pattern。&lt;/p&gt;
&lt;p&gt;把物件的內容分成 intrinsic 和 extrinsic，intrinsic 是不會改變的 (unique)，而 extrinsic 是會改變的 (repeating)。讓 extrinsic 的東西用同一塊記憶體。&lt;/p&gt;
&lt;p&gt;可以透過一個可以儲存建立過共有物件的 factory 來建立物件。&lt;/p&gt;
&lt;h3 id=&#34;proxy&#34;&gt;Proxy&lt;/h3&gt;
&lt;p&gt;用在多個服務想要調用某個重量級資源的情境下，可能只有很偶爾的情況需要用這 entity，但是如果平常就佔據著這個 entity，可能會消耗大量資源。&lt;/p&gt;
&lt;p&gt;如果在服務和 entity 之間加上 proxy，就可以讓 proxy 來處理這些情況。可以用 proxy 的場景較多，下面以 cache 的場景為例子。&lt;/p&gt;
&lt;p&gt;獲取某個靜態檔案可能非常花時間，但如果透過 proxy，第一個 service 想要這檔案的時候，proxy 可以去調用並暫存，其他 service 來要求的時候就可以直接回傳給他們。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;behavioral-patterns&#34;&gt;Behavioral patterns&lt;/h2&gt;
&lt;p&gt;探討物件或是演算法之間的溝通和分配職責。&lt;/p&gt;
&lt;h3 id=&#34;chain-of-responsibility&#34;&gt;Chain of Responsibility&lt;/h3&gt;
&lt;p&gt;透過一連串可以串接起來的 handler，來處理請求。&lt;/p&gt;
&lt;p&gt;對於一系列檢查的情況，可以用這種作法，有兩種形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一路檢查，檢查失敗則中斷請求。
&lt;ul&gt;
&lt;li&gt;常見的例子是用在網頁的 middleware，如果有一個 middleware 檢查失敗，就不會往下傳。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每個 Handler 自行決定要不要處理該請求，要的話則不會往下傳。
&lt;ul&gt;
&lt;li&gt;這樣可能會最後沒人處理&lt;/li&gt;
&lt;li&gt;就像網頁點擊事件，一層層元素往上問。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;command&#34;&gt;Command&lt;/h3&gt;
&lt;p&gt;把請求獨立出來，讓請求可以被用各種方式調用。
比如說把業務邏輯從 GUI 中抽出來，讓 GUI 只負責呼叫 command，然後 GUI 就可以有多個地方呼叫同一個 command。&lt;/p&gt;
&lt;p&gt;比如多種不同的按鈕或快捷鍵背後都執行同一個存檔功能。存檔就可以作為 command 獨立出來。
背後再根據這個 command 實施對應的業務邏輯。&lt;/p&gt;
&lt;h3 id=&#34;iterator&#34;&gt;Iterator&lt;/h3&gt;
&lt;p&gt;用來需要遍歷集合中元素的情境，把不同種類的遍歷行為細節隱藏起來。&lt;/p&gt;
&lt;p&gt;提供多種不同的 iterator，但遵循同一種 interface，讓使用者可以根據需要選擇 iterator。
對於不關心用哪種 iterator 的使用者，也能受益於 iterator 的 interface，而不必耦合於特定的演算法。&lt;/p&gt;
&lt;h3 id=&#34;mediator&#34;&gt;Mediator&lt;/h3&gt;
&lt;p&gt;禁止多個 component 直接溝通，迫使他們透過 mediator 來溝通，避免複雜的關係。
所有人只能透過 notify mediator 來溝通，mediator 根據 sender 和 event，來做出相應處理。&lt;/p&gt;
&lt;p&gt;所有的 component 都不知道最終會有哪些 component 處理自己的請求，同樣的，他們也不知道請求是誰造成的，彼此不知道對方的存在。&lt;/p&gt;
&lt;h3 id=&#34;memento&#34;&gt;Memento&lt;/h3&gt;
&lt;p&gt;讓你可以儲存和復原到先前的狀態。&lt;/p&gt;
&lt;p&gt;讓要儲存的對象自己生成 snapshot。&lt;/p&gt;
&lt;p&gt;建議存在名為 momento 的 special object，這個 object 不能讓除了 producer 外的其他 object 直接存取。&lt;/p&gt;
&lt;p&gt;其他 object 只能透過 limited interface 來取得透過 producer 產生的 momento。&lt;/p&gt;
&lt;p&gt;這些限制讓 momento 可以交給其他 object 來管理，稱為 caretaker，要復原的時候再把 momento 交還給 producer。&lt;/p&gt;
&lt;h3 id=&#34;observer&#34;&gt;Observer&lt;/h3&gt;
&lt;p&gt;定義 subscription 機制。&lt;/p&gt;
&lt;p&gt;有 interesting state 的 object 稱為 subject，但由於他也會通知其他人，所以又稱為 publisher。追蹤它的人稱為 Subscriber。&lt;/p&gt;
&lt;p&gt;Subscriber 如果想要在 Publisher 的狀態改變時被通知，就要訂閱 Publisher。然後 Publisher 維護一個 list 來存放所有訂閱者。&lt;/p&gt;
&lt;h3 id=&#34;state&#34;&gt;State&lt;/h3&gt;
&lt;p&gt;用在類似 Finite-State Machine 的情況。&lt;/p&gt;
&lt;p&gt;把物件可能的狀態給提取出去，建立一個 interface，interface 包含了所有在不同狀態下會表現行為不同的 method。&lt;/p&gt;
&lt;p&gt;該 pattern 把每個 state 獨立成一個 Class，把實際的行為委託給 state，而不是由 context (原始物件) 來控制。Context 只管切換 state。&lt;/p&gt;
&lt;h3 id=&#34;strategy&#34;&gt;Strategy&lt;/h3&gt;
&lt;p&gt;把不同實現方法的演算法定義為遵循同一個 interface 的類別，讓使用者可以根據需要選擇演算法。&lt;/p&gt;
&lt;p&gt;原始的類別叫做 Context，client 可以把不同的策略傳給 Context，然後 Context 再根據策略來執行。&lt;/p&gt;
&lt;h3 id=&#34;template-method&#34;&gt;Template Method&lt;/h3&gt;
&lt;p&gt;把演算法拆成多個步驟，讓子類別可以選擇性覆寫其中的一些步驟，但不改變演算法的結構。&lt;/p&gt;
&lt;p&gt;原始的 template 可能有已經有預設實作或是 abstract method，就算有預設實作，子類別也可以選擇性覆寫。&lt;/p&gt;
&lt;h3 id=&#34;visitor&#34;&gt;Visitor&lt;/h3&gt;
&lt;p&gt;如果今天有一堆有共同父類別的子類別，我想新增某個功能，並給他們所有人用，同時不太希望修改到既有的這些類別，這時候可以用 visitor（雖然還是會做微不足道的修改）。&lt;/p&gt;
&lt;p&gt;Visitor 要解決的問題和 Double Dispatch 很像。&lt;/p&gt;
&lt;p&gt;vistor 會把新功能放在名為 Visitor 的新 class 中，然後透過 double dispatch 來執行。&lt;/p&gt;
&lt;p&gt;新功能會根據這些子類別提供不同的 method，然後透過這些 method 來執行新功能。&lt;/p&gt;
&lt;p&gt;我們最終會在這些子類別中新增一個 accept method，這個 method 會接受一個 visitor，然後根據 visitor 來執行對應的 method。&lt;/p&gt;
&lt;p&gt;雖然這樣依然會修改到子 class，但這屬於微不足道的改變，而且可以讓之後新增的一些功能不用再去修改這些子 class。&lt;/p&gt;
&lt;h4 id=&#34;single-dispatch&#34;&gt;Single Dispatch&lt;/h4&gt;
&lt;p&gt;dispatch 是指決定在 runtime 要呼叫哪個 method 的過程。
大多數的物件導向程式語言都支持 single dispatch，比如說在執行時期，遇到多型的時候，選擇要執行什麼 method。（我不確定有沒有多型以外的情況）&lt;/p&gt;
&lt;h4 id=&#34;double-dispatch&#34;&gt;Double Dispatch&lt;/h4&gt;
&lt;p&gt;這是一種技巧，讓我們可以在執行時期根據接收者（物件本身）和參數（傳進方法的物件）的類型決定要執行哪個 method。&lt;/p&gt;
&lt;p&gt;好像也可以說是兩個參數的多型。&lt;/p&gt;
&lt;p&gt;這是因為在編譯時期，看利用多型的程式碼，我們只能知道物件的多型型別，但是不知道他的實際型別，所以我們無法知道要執行哪個 method。&lt;/p&gt;
&lt;p&gt;但是如果我們在執行時期，可以根據物件的實際型別來決定要執行哪個 method，這樣就可以達到我們想要的效果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Visitor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Visitor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// visitor 不一定要用重名，這裏只是舉例
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;調用的時候可能會像&lt;code&gt;a.accept(visitor)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第一次調用發生在 accept method，根據 a 來決定要執行哪個 accept method&lt;/p&gt;
&lt;p&gt;第二次調用發生在 visit method，根據 參數的類型 來決定要執行哪個 visit method&lt;/p&gt;
</description>
        </item>
        <item>
        <title>資料結構筆記</title>
        <link>https://roykesydon.github.io/Blog/p/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</link>
        <pubDate>Tue, 29 Aug 2023 00:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;union-find-dsu&#34;&gt;Union-Find (DSU)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不同條件下的時間複雜度
&lt;ul&gt;
&lt;li&gt;待補&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;trie&#34;&gt;Trie&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nxt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nxt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;segment-tree-單點修改線段樹&#34;&gt;Segment Tree 單點修改線段樹&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define pl(x) (x * 2 + 1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define pr(x) (x * 2 + 2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ql&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>未分類演算法 &amp; 資料結構筆記</title>
        <link>https://roykesydon.github.io/Blog/p/%E6%9C%AA%E5%88%86%E9%A1%9E%E6%BC%94%E7%AE%97%E6%B3%95-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sun, 27 Aug 2023 00:09:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E6%9C%AA%E5%88%86%E9%A1%9E%E6%BC%94%E7%AE%97%E6%B3%95-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;sorting&#34;&gt;Sorting&lt;/h2&gt;
&lt;h3 id=&#34;merge-sort&#34;&gt;Merge Sort&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一直拆分兩邊最後再輪流 merge 起來，merge 時看兩邊開頭誰最小，依序放&lt;/li&gt;
&lt;li&gt;都是 $O(nlogn)$&lt;/li&gt;
&lt;li&gt;stable&lt;/li&gt;
&lt;li&gt;not in-place&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;quick-sort&#34;&gt;Quick sort&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;選定一個 pivot，用兩個指針從兩邊開始往中間找。當左指針找到比 pivot 大的數值，右指針找到比 pivot 小的數值後交換。直到兩個指針相遇，再把 pivot 換到中間，繼續兩邊處理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最差會到 $O(n^2)$，平均 $O(nlogn)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;選 pivot&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隨機選&lt;/li&gt;
&lt;li&gt;Median of Three
&lt;ul&gt;
&lt;li&gt;選開頭、中間和結尾的中位數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other&#34;&gt;Other&lt;/h2&gt;
&lt;h3 id=&#34;binary-exponentiation-快速冪&#34;&gt;Binary Exponentiation 快速冪&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;qpow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;discretization-離散化&#34;&gt;Discretization 離散化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lower_bound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;ternary-search-三分搜&#34;&gt;Ternary Search 三分搜&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;10000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ml&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>圖論筆記</title>
        <link>https://roykesydon.github.io/Blog/p/%E5%9C%96%E8%AB%96%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sun, 27 Aug 2023 00:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E5%9C%96%E8%AB%96%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;floyd-warshall&#34;&gt;Floyd-Warshall&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nodeCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nodeCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nodeCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;DP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;dijkstra&#34;&gt;dijkstra&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;時間複雜度 $O((V+E)*log(E))$
&lt;ul&gt;
&lt;li&gt;最差每條邊都要插入 heap&lt;/li&gt;
&lt;li&gt;要取出 V 個點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;cmp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;priority_queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;pq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;edge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;pq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;topological-sorting&#34;&gt;Topological Sorting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;記得確認是不是 Directed Acyclic Graph&lt;/li&gt;
&lt;li&gt;BFS 是沒有前繼節點優先，DFS 是沒有後繼節點優先&lt;/li&gt;
&lt;li&gt;用 BFS 的話就是把入度為 0 的點加入 Queue，一直維護該 Queue&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;vis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;toposort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toposort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toposort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;樹的直徑&#34;&gt;樹的直徑&lt;/h2&gt;
&lt;p&gt;兩次 DFS，第一次找到離任意點最遠的點，第二次從該點出發找到離他最遠的點，這兩個點之間的距離就是樹的直徑。&lt;/p&gt;
&lt;h2 id=&#34;lowest-common-ancestor&#34;&gt;Lowest Common Ancestor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;待補&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;eulerian-path-歐拉路徑&#34;&gt;Eulerian path 歐拉路徑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每條邊只能被訪問一次（一筆畫問題）&lt;/li&gt;
&lt;li&gt;條件
&lt;ul&gt;
&lt;li&gt;除了兩個點外，其他都得為入度==出度。另外兩個點，最多有一個出度要比入度大一，最多有一個入度要比出度大一。（只能有 0 或 2 個奇點）&lt;/li&gt;
&lt;li&gt;須為連通圖
&lt;ul&gt;
&lt;li&gt;視作無向圖的時候是否可以連到每個點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;matching&#34;&gt;Matching&lt;/h2&gt;
&lt;h3 id=&#34;hungarian-algorithm&#34;&gt;Hungarian Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;待補&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最小點覆蓋等等&#34;&gt;最小點覆蓋等等&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;待補&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GraphQL 簡介</title>
        <link>https://roykesydon.github.io/Blog/p/graphql-%E7%B0%A1%E4%BB%8B/</link>
        <pubDate>Tue, 22 Aug 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/graphql-%E7%B0%A1%E4%BB%8B/</guid>
        <description>&lt;h2 id=&#34;簡介&#34;&gt;簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Meta 在 2015 年公開的 API Query Language&lt;/li&gt;
&lt;li&gt;相較於傳統的 REST API，具備更靈活的查詢能力&lt;/li&gt;
&lt;li&gt;可讓客戶端精確地獲取所需的資料，避免多餘的請求和回應&lt;/li&gt;
&lt;li&gt;被多家公司採用，如：
&lt;ul&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;graphql-與-rest-api-的主要差異&#34;&gt;GraphQL 與 REST API 的主要差異&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single Endpoint&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST API 針對不同資源 (resource) 需要不同的 endpoint，而 GraphQL 透過單一 endpoint 存取所有資源&lt;/li&gt;
&lt;li&gt;但 GraphQL 由於僅有一個 URL，無法直接利用 HTTP caching 進行快取，而是依賴 client-side caching 或 persistent queries 來優化效能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解決 Under-fetching 和 Over-fetching 問題&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Under-fetching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個 API call 無法取得所有需要的資料，導致需要多次 API call&lt;/li&gt;
&lt;li&gt;例如，使用 RESTful API 取得一篇文章及其作者資訊，可能需要先請求文章資料，再請求作者資料&lt;/li&gt;
&lt;li&gt;GraphQL 透過 nested query 可以在單次 API call 內獲取文章及作者資訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Over-fetching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 回應的資料超過實際所需，造成資源浪費&lt;/li&gt;
&lt;li&gt;GraphQL 允許客戶端指定僅需要的欄位，避免傳輸過多無用資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;graphql-的運作方式&#34;&gt;GraphQL 的運作方式&lt;/h2&gt;
&lt;p&gt;GraphQL 需要特別架設 GraphQL server，可考慮使用 Apollo Server、Express + graphql 套件等方式實作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需定義 schema 來描述不同的資料類型 (Data type) 及其關聯 (relationship)&lt;/li&gt;
&lt;li&gt;透過 resolver 來處理查詢和資料變更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;query-查詢&#34;&gt;Query (查詢)&lt;/h3&gt;
&lt;p&gt;GraphQL 的查詢語法允許客戶端精確地獲取所需的資料，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;postQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;### Mutation (變更資料)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;GraphQL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;透過&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Mutation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;來處理新增、修改、刪除資料，例如新增文章的請求：&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;graphql&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;addPost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;AddPostInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;addPost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Redis</title>
        <link>https://roykesydon.github.io/Blog/p/redis/</link>
        <pubDate>Mon, 05 Jun 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/redis/</guid>
        <description>&lt;h2 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Cache
&lt;ul&gt;
&lt;li&gt;把常用的資料回傳，省略長時間的 IO 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared Session
&lt;ul&gt;
&lt;li&gt;在 stateless server 間共享 session&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed lock
&lt;ul&gt;
&lt;li&gt;用在程式間想共用某種資源的時候&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;setnx&lt;/code&gt; (set if not exists)
&lt;ul&gt;
&lt;li&gt;atomic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rate Limiter
&lt;ul&gt;
&lt;li&gt;用 increment 和 expiration 實現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;快取常見策略&#34;&gt;快取常見策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cache aside
&lt;ul&gt;
&lt;li&gt;先問 cache，沒有的話再問 db，並把 db 回傳的資料放到 cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read through
&lt;ul&gt;
&lt;li&gt;client 只能存取到 cache，如果沒資料，cache 會去 db 拿資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write through
&lt;ul&gt;
&lt;li&gt;client 寫資料時，cache 會留一份資料，並把資料寫到 db&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write behind
&lt;ul&gt;
&lt;li&gt;和 write through 很像，但是不會立即寫到 db，會等到有更多的資料時，才一次寫到 db&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feature&#34;&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;In-memory&lt;/li&gt;
&lt;li&gt;Key-Value&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-command&#34;&gt;Basic Command&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis-server&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;default port: 6379&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;access-data&#34;&gt;Access data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pretty much everything stored in Redis is going to be a type of string by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;del &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exists &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keys &amp;lt;pattern&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find keys with certain pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keys *&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;get all keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flushall&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get rid of everything&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;expiration&#34;&gt;Expiration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ttl &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show time to live
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;-1&amp;rdquo; for no expiration&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-2&amp;rdquo; already expired&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expire &amp;lt;key&amp;gt; &amp;lt;second&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setex &amp;lt;key&amp;gt; &amp;lt;seconds&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set with expiration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data Structure&lt;/h3&gt;
&lt;h4 id=&#34;list&#34;&gt;List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lpush/rpush &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lrange &amp;lt;key&amp;gt; &amp;lt;start index&amp;gt; &amp;lt;end index&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;end index&amp;gt;&lt;/code&gt; can be -1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lpop/rpop &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sadd &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smembers &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;srem &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;remove&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hash&#34;&gt;Hash&lt;/h4&gt;
&lt;p&gt;Key-value in Key-value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hset &amp;lt;key&amp;gt; &amp;lt;field&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hget &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hgetall &amp;lt;key&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;get everything about &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hdel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexists &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Redis doesn&amp;rsquo;t support nested hash struct&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;刪除過期-key&#34;&gt;刪除過期 key&lt;/h2&gt;
&lt;h3 id=&#34;定期刪除&#34;&gt;定期刪除&lt;/h3&gt;
&lt;p&gt;在固定間隔時間隨機抽 key 檢查並刪除&lt;/p&gt;
&lt;h3 id=&#34;惰性刪除&#34;&gt;惰性刪除&lt;/h3&gt;
&lt;p&gt;在訪問 key 的時候發現過期就刪除&lt;/p&gt;
&lt;h2 id=&#34;maxmemory-policy-eviction&#34;&gt;maxmemory-policy (Eviction)&lt;/h2&gt;
&lt;p&gt;可以設定這些 policy，在記憶體依然額滿的情況下做對應的處理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;noeviction&lt;/li&gt;
&lt;li&gt;allkeys-lru&lt;/li&gt;
&lt;li&gt;allkeys-lfu&lt;/li&gt;
&lt;li&gt;volatile-lru&lt;/li&gt;
&lt;li&gt;volatile-lfu&lt;/li&gt;
&lt;li&gt;allkeys-random&lt;/li&gt;
&lt;li&gt;volatile-random&lt;/li&gt;
&lt;li&gt;volatile-ttl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快取情境問題&#34;&gt;快取情境問題&lt;/h2&gt;
&lt;h3 id=&#34;快取雪崩-cache-avalanche&#34;&gt;快取雪崩 Cache Avalanche&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某個時刻大量 cache 失效，使資料庫需要承擔很大的流量。&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;幫 cache 加上額外的隨機過期時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取擊穿-hotspot-invalid&#34;&gt;快取擊穿 Hotspot Invalid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某個 hotspot 的 cache 失效，使大量請求跑到資料庫&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;讓 hotspot 永不過期&lt;/li&gt;
&lt;li&gt;查詢資料庫的部分加上 lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取穿透-cache-penetration&#34;&gt;快取穿透 Cache Penetration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;client request 不存在的資料，因為同時不存在於 cache 和資料庫中，所以直接跑到資料庫&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;在 application 先過濾掉非法請求&lt;/li&gt;
&lt;li&gt;Bloom Filter 布隆過濾器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;persistence&#34;&gt;Persistence&lt;/h2&gt;
&lt;h3 id=&#34;rdb&#34;&gt;RDB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;固定時間對所有資料做快照，memory dump 出來&lt;/li&gt;
&lt;li&gt;recovery 比 AOF 快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt;、&lt;code&gt;bgsave&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof&#34;&gt;AOF&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;紀錄操作流程&lt;/li&gt;
&lt;li&gt;檔案比較肥&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rewrite&#34;&gt;Rewrite&lt;/h4&gt;
&lt;p&gt;當 AOF 太大，Redis 會生一個新文件取代舊的，用最少操作生出目前的資料&lt;/p&gt;
&lt;h3 id=&#34;混合&#34;&gt;混合&lt;/h3&gt;
&lt;p&gt;在 AOF 重寫的時候也利用 RDB
前面是 RDB，後面是 AOF&lt;/p&gt;
&lt;h2 id=&#34;availability&#34;&gt;Availability&lt;/h2&gt;
&lt;h3 id=&#34;主從同步&#34;&gt;主從同步&lt;/h3&gt;
&lt;p&gt;一主多從，把讀取壓力分擔到 slave 上&lt;/p&gt;
&lt;h3 id=&#34;哨兵模式-sentinel&#34;&gt;哨兵模式 Sentinel&lt;/h3&gt;
&lt;p&gt;會有哨兵不斷地 Ping 主從伺服器，確認是否有異常&lt;/p&gt;
&lt;p&gt;如果哨兵是集群，有哨兵檢測到異常，會判斷某伺服器主觀下線，當有一定數量的哨兵投票認為伺服器不可能用，就會變成客觀下線，進行 failover&lt;/p&gt;
&lt;h3 id=&#34;cluster&#34;&gt;Cluster&lt;/h3&gt;
&lt;p&gt;分擔寫入壓力&lt;/p&gt;
&lt;p&gt;Redis 有 16384 個 slot，透過 hash 分配 key 到不同的 slot&lt;/p&gt;
&lt;p&gt;預設會另外用 port 16379 來讓節點間溝通&lt;/p&gt;
&lt;p&gt;可以混和主從同步達到高可用&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Clean Architecture</title>
        <link>https://roykesydon.github.io/Blog/p/clean-architecture/</link>
        <pubDate>Mon, 22 May 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/clean-architecture/</guid>
        <description>&lt;h2 id=&#34;hexagonal-architecture-ports-and-adapters-architecture&#34;&gt;Hexagonal Architecture (Ports and Adapters Architecture)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目標是讓應用程式的核心邏輯與外部系統解耦&lt;/li&gt;
&lt;li&gt;把軟體分為內部部分與外部部分
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;內部部分&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;包含 domain logic&lt;/li&gt;
&lt;li&gt;先被開發，不受外部系統影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部部分&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;包含所有的依賴層 (dependency layers)&lt;/li&gt;
&lt;li&gt;不屬於應用程式的部分，如 UI、資料庫 (DB)、或應用框架 (framework)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ports&#34;&gt;Ports&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;介面 (interface)，定義外部系統可以使用的方法&lt;/li&gt;
&lt;li&gt;兩種類型
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input Ports&lt;/strong&gt;：由內部應用程式暴露給外部使用，定義應用程式的行為&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output Ports&lt;/strong&gt;：由內部應用程式呼叫外部系統，如資料庫或 API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adapters&#34;&gt;Adapters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來實作 Ports，轉換外部請求到應用程式內部邏輯&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;primary-adapter&#34;&gt;Primary Adapter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;實作 Input Port，負責接收外部輸入並調用 Use Case&lt;/li&gt;
&lt;li&gt;例如 Web Controller 或 CLI Handler&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;secondary-adapter&#34;&gt;Secondary Adapter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;實作 Output Port，負責將 Use Case 的結果傳遞到外部系統&lt;/li&gt;
&lt;li&gt;例如資料庫存取層 (Repository) 或 API 呼叫&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;clean-architecture&#34;&gt;Clean Architecture&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目標是讓 domain logic 與其他部分分離，使系統可以隨時更換技術而不影響核心邏輯&lt;/li&gt;
&lt;li&gt;透過 &lt;strong&gt;DIP (Dependency Inversion Principle)&lt;/strong&gt; 達成
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高層次模組不應依賴低層次模組，兩者應依賴抽象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象不應依賴細節，細節應依賴抽象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;將軟體分為不同層次，並確保依賴方向只能往內部流動&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常見架構比較&#34;&gt;常見架構比較&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;傳統三層架構 (Three-Tier Architecture)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依賴關係：&lt;code&gt;Presentation Layer -&amp;gt; Business Logic Layer -&amp;gt; Data Access Layer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;這種架構會導致 Business Logic 依賴 Data Access，影響可測試性與可維護性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clean Architecture&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有外部層次都應依賴 &lt;strong&gt;Business Logic Layer (Use Cases)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;依賴方向為 &lt;code&gt;Frameworks &amp;amp; Drivers -&amp;gt; Interface Adapters -&amp;gt; Use Cases -&amp;gt; Entities&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;優點&#34;&gt;優點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技術可替換性高&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;domain logic 獨立於技術實現，允許更換 UI、資料庫、框架等技術&lt;/li&gt;
&lt;li&gt;只需替換 Adapters，不影響核心邏輯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;測試方便&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;domain logic 不依賴外部系統，可以使用 mock 測試&lt;/li&gt;
&lt;li&gt;減少整合測試的負擔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更容易擴展與維護&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;避免不同技術層相互耦合，讓系統更具彈性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;clean-architecture-的層次結構&#34;&gt;Clean Architecture 的層次結構&lt;/h2&gt;
&lt;h3 id=&#34;entities&#34;&gt;Entities&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心物件&lt;/strong&gt;，負責企業規則 (Enterprise Business Rules)&lt;/li&gt;
&lt;li&gt;只關心應用程式的核心邏輯，與技術無關&lt;/li&gt;
&lt;li&gt;例如帳戶物件：包含帳號名稱、密碼、驗證密碼的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;應用程式規則 (Application Business Rules)&lt;/strong&gt;，定義具體業務邏輯&lt;/li&gt;
&lt;li&gt;負責協調 Entities，確保業務流程正確&lt;/li&gt;
&lt;li&gt;例如處理使用者登入、交易等邏輯&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interface-adapters&#34;&gt;Interface Adapters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;負責資料轉換&lt;/strong&gt;，讓資料符合不同層的需求&lt;/li&gt;
&lt;li&gt;例如 View Model 轉換、DTO 轉換、Repository 轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;frameworks-and-drivers&#34;&gt;Frameworks and Drivers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;包含所有技術相關的部分&lt;/strong&gt;，如 Web 框架、資料庫、第三方 API&lt;/li&gt;
&lt;li&gt;這些技術可以隨時替換，不影響 Use Cases 和 Entities&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>領域驅動設計 Domain-Driven Design</title>
        <link>https://roykesydon.github.io/Blog/p/%E9%A0%98%E5%9F%9F%E9%A9%85%E5%8B%95%E8%A8%AD%E8%A8%88-domain-driven-design/</link>
        <pubDate>Mon, 22 May 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E9%A0%98%E5%9F%9F%E9%A9%85%E5%8B%95%E8%A8%AD%E8%A8%88-domain-driven-design/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;軟體要對 domain 做 Modeling，呈現出 domain 裡的核心概念，才能滿足使用者需求，因此不乏與領域專家的討論&lt;/p&gt;
&lt;h2 id=&#34;通用語言-ubiquitous-language&#34;&gt;通用語言 Ubiquitous Language&lt;/h2&gt;
&lt;p&gt;開發人員與領域專家熟悉的知識不同，容易產生交流困難。因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;領域專家和開發團隊要訂定共同的語言，避免使用自己熟悉但對方不理解的術語。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;確保這些語言在代碼、文件、溝通中保持一致&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;layered-architecture&#34;&gt;Layered Architecture&lt;/h2&gt;
&lt;p&gt;分為四個概念層，只會往下調用，可能會跨層&lt;/p&gt;
&lt;p&gt;可以達到關注點分離 (separation of concerns)，提高各個方面的 cohesive&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;User Interface (Presentation Layer)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;負責 UI 呈現（使用者可能是人或另一個系統）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Layer&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不包含 &lt;strong&gt;business logic&lt;/strong&gt;，負責協調 &lt;strong&gt;domain object&lt;/strong&gt; 完成業務流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain Layer&lt;/strong&gt;（&lt;strong&gt;核心&lt;/strong&gt;）
&lt;ul&gt;
&lt;li&gt;負責業務邏輯、業務規則、狀態管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;這一層的設計是 Model-Driven Design 的關鍵！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infrastructure Layer&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;負責技術支援（如資料庫存取、外部 API 連接）&lt;/li&gt;
&lt;li&gt;保存業務狀態的技術細節在此實作&lt;/li&gt;
&lt;li&gt;為前三層提供支援&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;主要概念&#34;&gt;主要概念&lt;/h2&gt;
&lt;h3 id=&#34;entity實體&#34;&gt;Entity（實體）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;具備 &lt;strong&gt;identity&lt;/strong&gt;，即使 &lt;strong&gt;state&lt;/strong&gt; 改變，identity 仍保持不變&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mutable&lt;/strong&gt;，但應該透過業務邏輯來控制修改方式&lt;/li&gt;
&lt;li&gt;追蹤 &lt;strong&gt;Entity&lt;/strong&gt; 需要較高的成本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;value-object值物件&#34;&gt;Value Object（值物件）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沒有 identity&lt;/strong&gt;，只關心 &lt;strong&gt;Value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutable&lt;/strong&gt;（不可變），如需修改，則應&lt;strong&gt;創建新的值物件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以安全地&lt;strong&gt;共用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以輕易創建丟棄&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有些動作不屬於某個 Entity 或 Value Object，因為它是跨物件的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stateless&lt;/strong&gt;（無狀態）：每個請求互不影響&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aggregate聚合&#34;&gt;Aggregate（聚合）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;把複雜關聯的物件聚合在一起&lt;/strong&gt;，確保 &lt;strong&gt;consistency&lt;/strong&gt; 和 &lt;strong&gt;invariants&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;consistency (一致性)
&lt;ul&gt;
&lt;li&gt;相關物件的資料一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;invariants (不變量)
&lt;ul&gt;
&lt;li&gt;資料改變時要維護的規則&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aggregate Root&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;具備 &lt;strong&gt;global identity&lt;/strong&gt;，內部 Entity 只有 &lt;strong&gt;local identity&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通常是 entity 擔任&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部只能透過 Aggregate Root 存取內部其他物件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他-building-blocks&#34;&gt;其他 Building Blocks&lt;/h2&gt;
&lt;h3 id=&#34;factory&#34;&gt;Factory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;若創建 aggregate、entity、value object 的過程很複雜，或是涉及專業知識，就該用 factory 封裝&lt;/li&gt;
&lt;li&gt;若情況不複雜，或是需要更細的控制，可以直接使用建構函式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;repository&#34;&gt;Repository&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;若所有物件都直接存取資料庫，會破壞精心設計的結構，導致封裝性降低&lt;/li&gt;
&lt;li&gt;Repository 封裝了資料庫操作，提供物件存取的統一介面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;domain-event&#34;&gt;Domain event&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代表 Domain 中的重要事件&lt;/li&gt;
&lt;li&gt;其他物件或 aggregate 可以訂閱它，讓 aggregate 通知它們某個 domain event 發生&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;strategic-design&#34;&gt;Strategic Design&lt;/h2&gt;
&lt;h3 id=&#34;subdomain&#34;&gt;Subdomain&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將 domain 拆分為小塊，理想情況下 subdomain 和 bounded context 是一對一的關係&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Core Subdomain&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;公司的競爭優勢所在，最核心的業務邏輯，例如搜尋引擎的搜尋演算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Subdomain&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一般常見的功能，例如登入系統&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supporting Subdomain&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;輔助核心業務的部分，例如電商網站的商品篩選功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bounded-context&#34;&gt;Bounded Context&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;劃定界線，確保同一個 bounded context 內的概念和規則保持一致&lt;/li&gt;
&lt;li&gt;相同的名詞可能在不同的 context 中有不同的意義&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;context-map&#34;&gt;Context Map&lt;/h3&gt;
&lt;p&gt;描述 Bounded Context 之間的關係&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;上下游 (U/D)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;上游提供服務，下游依賴上游&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared Kernel&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;兩個 BC 共享某些部分&lt;/li&gt;
&lt;li&gt;違反 BC 原則，是一種例外設計&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customer-Supplier&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一個子系統重度依賴另一個子系統&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conformist&lt;/strong&gt;：Customer 完全配合 Supplier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partnership&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;兩個 BC 互相合作，沒有主次之分，成敗與共&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anticorruption Layer (ACL)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在開發系統與外部系統之間加一層適配，防止影響內部模型&lt;/li&gt;
&lt;li&gt;常用到 &lt;strong&gt;Facade&lt;/strong&gt; 和 &lt;strong&gt;Adapter&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open Host Service (OHS)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;外部系統提供統一的服務接口，避免每個用戶端都要自己實作 ACL&lt;/li&gt;
&lt;li&gt;通常搭配 &lt;strong&gt;Published Language (PL)&lt;/strong&gt;（PL 是協定傳送資料的格式，例如 XML、JSON、Protocol Buffer）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;anti-pattern&#34;&gt;Anti-Pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;應該避免的情形&lt;/li&gt;
&lt;li&gt;Smart UI
&lt;ul&gt;
&lt;li&gt;超肥的萬能 UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anemic Domain Model
&lt;ul&gt;
&lt;li&gt;貧血模型&lt;/li&gt;
&lt;li&gt;只有 getter 和 setter，沒有業務邏輯的模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pratical-ddd&#34;&gt;Pratical DDD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The strangler migration
&lt;ul&gt;
&lt;li&gt;透過 Facade，把一些服務慢慢移植給新系統，最後取代 legacy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>重構 Refactoring</title>
        <link>https://roykesydon.github.io/Blog/p/%E9%87%8D%E6%A7%8B-refactoring/</link>
        <pubDate>Tue, 25 Apr 2023 14:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E9%87%8D%E6%A7%8B-refactoring/</guid>
        <description>&lt;h2 id=&#34;重構&#34;&gt;重構&lt;/h2&gt;
&lt;p&gt;在不改變軟體行為的情況下，對軟體內部構造進行改善&lt;/p&gt;
&lt;h2 id=&#34;code-smell&#34;&gt;Code Smell&lt;/h2&gt;
&lt;p&gt;也稱 Bad Smell，代表程式碼中需要重構的部分&lt;/p&gt;
&lt;h2 id=&#34;bloaters&#34;&gt;Bloaters&lt;/h2&gt;
&lt;p&gt;程式碼（類別、方法）過於龐大&lt;/p&gt;
&lt;h3 id=&#34;long-method&#34;&gt;Long Method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;用 Extract Method 拆解過長的 function&lt;/li&gt;
&lt;li&gt;用 Replace Temp with Query 取代暫存變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;large-class&#34;&gt;Large Class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個 Class 有太多 fields / methods / lines&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Extract Class&lt;/li&gt;
&lt;li&gt;Extract Subclass
&lt;ul&gt;
&lt;li&gt;把部分功能移到新建的子類別&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;long-parameter-list&#34;&gt;Long Parameter List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Preserve Whole Object
&lt;ul&gt;
&lt;li&gt;把來自同一物件的資料直接該物件取代&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduce Parameter Object
&lt;ul&gt;
&lt;li&gt;把相關的參數包成一個 Object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-clumps&#34;&gt;Data Clumps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不同的程式碼區域出現相同的變數組（Guru 舉的例子是連接資料庫用的參數）&lt;/li&gt;
&lt;li&gt;常一起出現的資料群應該被單獨抽成一個 Class&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Extract Class&lt;/li&gt;
&lt;li&gt;Introduce Parameter Object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;primitive-obsession&#34;&gt;Primitive Obsession&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;過度使用基本類別（primitives），造成 Shotgun Surgery&lt;/li&gt;
&lt;li&gt;Magic Number 也是一種 Primitive Obsession&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Replace Data Value with Object&lt;/li&gt;
&lt;li&gt;Replace Type Code with Class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;object-orientation-abusers&#34;&gt;Object-Orientation Abusers&lt;/h2&gt;
&lt;p&gt;亂用物件導向程式設計原則&lt;/p&gt;
&lt;h3 id=&#34;switch-statements&#34;&gt;Switch Statements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有非常複雜的 Switch Case 或是 if-else&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Replace Conditional with Polymorphism&lt;/li&gt;
&lt;li&gt;Replace Type Code with Subclasses
&lt;ul&gt;
&lt;li&gt;直接把多種狀態個別建立子物件，並把相關行為放進去，用多型處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Replace Type Code with State/Strategy
&lt;ul&gt;
&lt;li&gt;用一個 state 物件來取代 type code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;temporary-field&#34;&gt;Temporary Field&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指那些只在特定情況下才會被使用的 field，平時都是 null&lt;/li&gt;
&lt;li&gt;通常是因為存在需要大量參數的 function，但是這些參數被選擇放到 field&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Extract Class
&lt;ul&gt;
&lt;li&gt;把這些 field 和會用到的 function 抽成一個 Class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduce Null Object
&lt;ul&gt;
&lt;li&gt;用一個 Null Object 來取代 null，他可以提供一些預設的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;alternative-classes-with-different-interfaces&#34;&gt;Alternative Classes with Different Interfaces&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩個 Class 具有功能相同、命名不同的 function&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Rename Method&lt;/li&gt;
&lt;li&gt;Extract Superclass
&lt;ul&gt;
&lt;li&gt;把兩個 Class 的共同功能抽成一個父類別&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;change-preventers&#34;&gt;Change Preventers&lt;/h2&gt;
&lt;p&gt;一處改變會導致多處程式碼改變&lt;/p&gt;
&lt;h3 id=&#34;divergent-change&#34;&gt;Divergent Change&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對一個類別的修改會導致類別的多處也需要修改&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Extract Class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shotgun-surgery&#34;&gt;Shotgun Surgery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某個責任被分散到大量的 Class 身上，使修改其時要大量修改&lt;/li&gt;
&lt;li&gt;對多個類別進行同一種修改&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Move Method&lt;/li&gt;
&lt;li&gt;Move Field&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dispensables&#34;&gt;Dispensables&lt;/h2&gt;
&lt;p&gt;不必要的程式碼&lt;/p&gt;
&lt;h3 id=&#34;duplicated-code&#34;&gt;Duplicated Code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多個程式碼片段幾乎相同&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Extract Method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lazy-class&#34;&gt;Lazy Class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;沒什麼用的冗餘 Class&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Inline Class
&lt;ul&gt;
&lt;li&gt;把這個 Class 的 feature 全部移到另一個 Class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collapse Hierarchy
&lt;ul&gt;
&lt;li&gt;子類別和父類別功能差不多，可以把子類別和父類別合併&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;couplers&#34;&gt;Couplers&lt;/h2&gt;
&lt;p&gt;導致類別之間高度耦合&lt;/p&gt;
&lt;h3 id=&#34;feature-envy&#34;&gt;Feature Envy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;存取別的 Object 的 Data 的情形比自己的還頻繁&lt;/li&gt;
&lt;li&gt;這方法可能應該屬於另一個 Object&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Move Method
&lt;ul&gt;
&lt;li&gt;把這個方法移到另一個 Class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extract Method
&lt;ul&gt;
&lt;li&gt;如果只有一部分有這種情況，可以把這部分抽出來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;message-chains&#34;&gt;Message Chains&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Client 請求 A 物件，A 物件又請求 B 物件，以此類推&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Hide Delegate
&lt;ul&gt;
&lt;li&gt;情境是 client 從 A 物件取得 B 物件，然後又呼叫 B 物件的方法&lt;/li&gt;
&lt;li&gt;解法是把 B 物件的方法轉移給 A 物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extract Method &amp;amp; Move Method
&lt;ul&gt;
&lt;li&gt;把最終的方法抽出來，放到開頭的物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;inappropriate-intimacy&#34;&gt;Inappropriate Intimacy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個類別使用另一個類別的內部欄位或方法
&lt;ul&gt;
&lt;li&gt;不單是存取私有變數，應該說依賴於另外一個類別的實作細節，比如出於某些原因知道要以特定順序呼叫方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 Feature Envy 相比，損害了其他類別的封裝性&lt;/li&gt;
&lt;li&gt;部分解法
&lt;ul&gt;
&lt;li&gt;Move Method / Move Field
&lt;ul&gt;
&lt;li&gt;如果該類別確實不需要這些東西可以考慮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extract Class
&lt;ul&gt;
&lt;li&gt;把這些方法和欄位抽成一個 Class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Database Normalization</title>
        <link>https://roykesydon.github.io/Blog/p/database-normalization/</link>
        <pubDate>Tue, 14 Mar 2023 10:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-normalization/</guid>
        <description>&lt;h2 id=&#34;normalization-目的&#34;&gt;Normalization 目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;避免 redundant information
&lt;ul&gt;
&lt;li&gt;資料重複容易導致資料不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免 anomalies
&lt;ul&gt;
&lt;li&gt;避免資料不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;隨著 1NF ~ 5NF，有更多的 safety guarantee&lt;/p&gt;
&lt;h2 id=&#34;functional-dependency&#34;&gt;Functional Dependency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;{X} -&amp;gt; {Y}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X 是 determinant，Y 是 dependent&lt;/li&gt;
&lt;li&gt;Y is functionally dependent on X (Y depends on X)&lt;/li&gt;
&lt;li&gt;X functionally determines Y&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 attribute 的 value 可以決定另一個 attribute 的 value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex: {playerID} -&amp;gt; {playerName}&lt;/li&gt;
&lt;li&gt;這代表 playerID 決定了 playerName&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用箭頭表示，左邊是 determinant，右邊是 dependent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 attribute 可以有多個 dependent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex: {playerID} -&amp;gt; {playerName, playerAge}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 attribute 也可以是多個 attribute 的 dependent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex: {playerID, itemID} -&amp;gt; {itemName}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1nf&#34;&gt;1NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;去除重複性&lt;/li&gt;
&lt;li&gt;違反條件
&lt;ol&gt;
&lt;li&gt;用 row order 傳達資訊&lt;/li&gt;
&lt;li&gt;mixing data types in single column
&lt;ul&gt;
&lt;li&gt;但 relational database 不會讓你這樣做&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存在沒有 primary key 的 table&lt;/li&gt;
&lt;li&gt;repeating groups
&lt;ul&gt;
&lt;li&gt;同一個 column 有多個數值，或是在同一個 row 存多個同類型的數值
&lt;ul&gt;
&lt;li&gt;每個 column 的 value 都應該是 atomic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ex :
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;player&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 item_1, 4 item_2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;star&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 item_4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;player&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item_type1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;quantity1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item_type2&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;quantity2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;star&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2nf&#34;&gt;2NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;去除 partial dependency&lt;/li&gt;
&lt;li&gt;所有的 non-key attribute 都要 depend on 整個 PK
&lt;ul&gt;
&lt;li&gt;非正式定義，有點細微差異&lt;/li&gt;
&lt;li&gt;如果是 composite key，不能 depend on PK 的其中一部分&lt;/li&gt;
&lt;li&gt;functional dependency
&lt;ul&gt;
&lt;li&gt;ex: {playerID, itemID} -&amp;gt; {itemName}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;違反的例子
&lt;ul&gt;
&lt;li&gt;ex:
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;playerID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;這裡的 PK 是 {playerID, itemID}，但 itemName 只 depend on itemID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3nf&#34;&gt;3NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;去除 transitive dependency&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transitive dependency
&lt;ul&gt;
&lt;li&gt;{A} -&amp;gt; {B} -&amp;gt; {C}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考慮到 functional dependency 有遞移性(Transitivity)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transitivity
&lt;ul&gt;
&lt;li&gt;{A} -&amp;gt; {B}，{B} -&amp;gt; {C}，則 {A} -&amp;gt; {C}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有 non-key attribute 都要 depend on the whole key，不能 depend on 其他 non-key attribute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;違反的例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex:
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;playerID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemName&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemCategory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;weapon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;weapon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;weapon&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;這裡的 PK 是 {playerID, itemID}，但 itemCategory 只 depend on itemName&lt;/li&gt;
&lt;li&gt;這裡的 itemCategory 是 transitive dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;boyce-codd-normal-form-bcnf&#34;&gt;Boyce-Codd Normal Form (BCNF)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;3NF 的強化版，又稱 3.5NF&lt;/li&gt;
&lt;li&gt;實務中大多做到 3NF&lt;/li&gt;
&lt;li&gt;對於每個 functional dependency，左邊的 attribute 都是 super key&lt;/li&gt;
&lt;li&gt;違反例子
&lt;ul&gt;
&lt;li&gt;ex:
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;playerID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemName&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PlayerName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;存在至少兩個 functional dependency
&lt;ul&gt;
&lt;li&gt;{itemID} -&amp;gt; {itemName}&lt;/li&gt;
&lt;li&gt;{playerID} -&amp;gt; {playerName}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是 {playerID} 和 {itemID} 都不是 super key
&lt;ul&gt;
&lt;li&gt;拆成三個表就可以解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4nf&#34;&gt;4NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要先符合 BCNF&lt;/li&gt;
&lt;li&gt;去除多值依賴(Multivalued Dependency)
&lt;ul&gt;
&lt;li&gt;multivalued dependency
&lt;ul&gt;
&lt;li&gt;一個表格至少要有 3 個 column 才有可能有 multivalued dependency&lt;/li&gt;
&lt;li&gt;對於 {A} -&amp;gt; {B}，如果一個 A 可以對應到多個 B，也可以對應到多個 C，然後 B 和 C 獨立，則有 multivalued dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一個 table 中的所有 multivalued dependency 必須依賴於 key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5nf&#34;&gt;5NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;又稱 Project-Join Normal Form (PJNF)&lt;/li&gt;
&lt;li&gt;去除 join dependency
&lt;ul&gt;
&lt;li&gt;join dependency
&lt;ul&gt;
&lt;li&gt;一個 table 可以表示成其他 table join 起來的結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果 JOIN dependency 存在，就拆分多個 table&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>UML 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/uml-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Thu, 09 Mar 2023 14:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/uml-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;class-diagram&#34;&gt;Class Diagram&lt;/h2&gt;
&lt;h3 id=&#34;類別關係-class-relationships&#34;&gt;類別關係 (Class Relationships)&lt;/h3&gt;
&lt;h4 id=&#34;依賴-dependency&#34;&gt;依賴 (Dependency)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：「uses-a」關係，表示某個類別&lt;strong&gt;暫時依賴&lt;/strong&gt;於另一個類別，通常體現在方法的參數或回傳值中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符號&lt;/strong&gt;：虛線箭頭 &lt;code&gt;- - -&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;Class A - - -&amp;gt; Class B&lt;/code&gt;（A 使用 B，但 B 的變動不會影響 A）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;關聯-association&#34;&gt;關聯 (Association)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：「knows-a」關係，表示兩個類別彼此有關聯，可存取對方的屬性或方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符號&lt;/strong&gt;：實線 &lt;code&gt;-----&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;額外資訊&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;單向關聯&lt;/strong&gt;：A 知道 B，但 B 不知道 A&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;雙向關聯&lt;/strong&gt;：A 和 B 彼此知道對方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;聚合-aggregation&#34;&gt;聚合 (Aggregation)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：「has-a」關係，表示物件之間的組合，但子物件 (&lt;code&gt;child&lt;/code&gt;) 可以獨立存在，不受 &lt;code&gt;parent&lt;/code&gt; 影響。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符號&lt;/strong&gt;：空心菱形 &lt;code&gt;◊-----&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：學校 (&lt;code&gt;School&lt;/code&gt;) 擁有多個老師 (&lt;code&gt;Teacher&lt;/code&gt;)，但學校刪除後，老師仍然可以存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;組合-composition&#34;&gt;組合 (Composition)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：「has-a」關係，強於聚合，表示 &lt;code&gt;child&lt;/code&gt; 的生命週期依賴 &lt;code&gt;parent&lt;/code&gt;，若 &lt;code&gt;parent&lt;/code&gt; 被刪除，&lt;code&gt;child&lt;/code&gt; 也會消失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符號&lt;/strong&gt;：實心菱形 &lt;code&gt;◆-----&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：房子 (&lt;code&gt;House&lt;/code&gt;) 由房間 (&lt;code&gt;Room&lt;/code&gt;) 組成，若房子被拆除，房間也會消失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;繼承-inheritance&#34;&gt;繼承 (Inheritance)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：「is-a」關係，表示子類別 (&lt;code&gt;subclass&lt;/code&gt;) 繼承父類別 (&lt;code&gt;superclass&lt;/code&gt;) 的屬性和行為。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符號&lt;/strong&gt;：實線箭頭 &lt;code&gt;-----▷&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;Dog&lt;/code&gt; 是 &lt;code&gt;Animal&lt;/code&gt; 的子類別 (&lt;code&gt;Dog -----▷ Animal&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;實作-implementation&#34;&gt;實作 (Implementation)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：「can-do」關係，表示類別實作 (&lt;code&gt;implements&lt;/code&gt;) 介面 (&lt;code&gt;interface&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;符號&lt;/strong&gt;：虛線箭頭 &lt;code&gt;- - - -▷&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;Bird&lt;/code&gt; 實作 &lt;code&gt;Flyable&lt;/code&gt; (&lt;code&gt;Bird - - - -▷ Flyable&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;額外特性-other-features&#34;&gt;額外特性 (Other Features)&lt;/h3&gt;
&lt;h4 id=&#34;導向-navigation&#34;&gt;導向 (Navigation)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;若兩個類別都能訪問對方，則使用無箭頭的關聯線 &lt;code&gt;-----&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;若只有一方能訪問對方，則使用箭頭 &lt;code&gt;-----&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;角色名稱-role-name&#34;&gt;角色名稱 (Role Name)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在關聯線旁標示角色名稱，表示該類別在關係中的角色。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;Person&lt;/code&gt; 與 &lt;code&gt;Car&lt;/code&gt; 之間的關係中，&lt;code&gt;Car&lt;/code&gt; 可能有 &lt;code&gt;owner&lt;/code&gt; 角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多重度-multiplicity&#34;&gt;多重度 (Multiplicity)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定義關聯物件的數量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;：只能有一個實例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0..1&lt;/code&gt;：最多一個&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;：零個或多個&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1..*&lt;/code&gt;：至少一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自關聯-self-association&#34;&gt;自關聯 (Self-Association)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;當類別內部的物件彼此有關聯時，可用自關聯 (Self-Association)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;Employee&lt;/code&gt; 可能是另一個 &lt;code&gt;Employee&lt;/code&gt; 的 &lt;code&gt;manager&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存取修飾詞-access-modifiers&#34;&gt;存取修飾詞 (Access Modifiers)&lt;/h3&gt;
&lt;p&gt;在 UML 類別圖中，可以用 &lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;#&lt;/code&gt; 來表示不同的存取權限：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符號&lt;/th&gt;
&lt;th&gt;存取修飾詞&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;任何類別都可以存取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;只有該類別本身可以存取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;只有該類別與其子類別可以存取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;package (default)&lt;/td&gt;
&lt;td&gt;只有相同 package 內的類別可以存取&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>軟體設計 - Low Level</title>
        <link>https://roykesydon.github.io/Blog/p/%E8%BB%9F%E9%AB%94%E8%A8%AD%E8%A8%88-low-level/</link>
        <pubDate>Wed, 08 Mar 2023 14:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E8%BB%9F%E9%AB%94%E8%A8%AD%E8%A8%88-low-level/</guid>
        <description>&lt;h2 id=&#34;軟體設計原則&#34;&gt;軟體設計原則&lt;/h2&gt;
&lt;h2 id=&#34;軟體設計原則-1&#34;&gt;軟體設計原則&lt;/h2&gt;
&lt;h3 id=&#34;encapsulate-what-varies&#34;&gt;Encapsulate What Varies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;封裝經常改變的程式碼，以避免影響其他區塊的程式碼，提升維護性&lt;/li&gt;
&lt;li&gt;具體做法包括將變動部分抽象為 &lt;code&gt;interface&lt;/code&gt;，讓實作細節與使用方解耦&lt;/li&gt;
&lt;li&gt;例如，在策略模式（Strategy Pattern）中，將變動行為封裝於獨立類別，並透過 &lt;code&gt;interface&lt;/code&gt; 進行交換&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;favor-composition-over-inheritance&#34;&gt;Favor Composition over Inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Composition&lt;/code&gt;（組合）在許多情境下可取代 &lt;code&gt;Inheritance&lt;/code&gt;（繼承），並能達成 &lt;code&gt;Polymorphism&lt;/code&gt;（多型）&lt;/li&gt;
&lt;li&gt;只有在符合 &lt;code&gt;is-a&lt;/code&gt; 關係時才應考慮使用繼承，例如「貓是動物」&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Composition&lt;/code&gt; 透過組合物件的方式擴展功能，通常比繼承更具彈性，且能降低耦合度&lt;/li&gt;
&lt;li&gt;比如有 &lt;code&gt;Engine&lt;/code&gt; 類別，&lt;code&gt;Car&lt;/code&gt; 可以有一個 &lt;code&gt;Engine&lt;/code&gt; 的物件，而不是繼承 &lt;code&gt;Engine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solid-設計原則&#34;&gt;SOLID 設計原則&lt;/h2&gt;
&lt;h3 id=&#34;single-responsibility-principle-srp---單一職責原則&#34;&gt;Single Responsibility Principle (SRP) - 單一職責原則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A class should have only one reason to change&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每個類別應該只負責一項功能，避免職責過於複雜&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;實踐方式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;把一個複雜的模組拆成多個獨立的類別&lt;/li&gt;
&lt;li&gt;例如，把「資料庫存取」與「商業邏輯」分開，避免單一類別同時負責多種功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;open-closed-principle-ocp---開放封閉原則&#34;&gt;Open-Closed Principle (OCP) - 開放封閉原則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You should be able to extend the behavior of a system without having to modify that system&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;系統應該&lt;strong&gt;對擴充開放，對修改封閉&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;實踐方式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;抽象類別&lt;/strong&gt;與&lt;strong&gt;介面&lt;/strong&gt;，讓新功能可以透過擴展來新增，而不是直接修改原始碼&lt;/li&gt;
&lt;li&gt;例如，在 &lt;code&gt;Shape&lt;/code&gt; 介面下定義 &lt;code&gt;draw()&lt;/code&gt;，新增 &lt;code&gt;Circle&lt;/code&gt;、&lt;code&gt;Rectangle&lt;/code&gt; 只需實作該介面，而無需修改原有 &lt;code&gt;Shape&lt;/code&gt; 相關程式碼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;liskov-substitution-principle-lsp---里氏替換原則&#34;&gt;Liskov Substitution Principle (LSP) - 里氏替換原則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;子類別應該能替換父類別，且不影響程式的正確性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;確保繼承時不破壞原有功能，避免發生「使用父類別時正常，但換成子類別就出錯」的情況&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;實踐方式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;避免子類別重寫父類別方法時，改變原有的行為或拋出例外&lt;/li&gt;
&lt;li&gt;例如，如果 &lt;code&gt;Bird&lt;/code&gt; 有 &lt;code&gt;fly()&lt;/code&gt; 方法，而 &lt;code&gt;Penguin&lt;/code&gt; 繼承 &lt;code&gt;Bird&lt;/code&gt;，但企鵝不會飛，則應改用 &lt;code&gt;CanFly&lt;/code&gt; 介面來區分，而非讓 &lt;code&gt;Penguin&lt;/code&gt; 繼承 &lt;code&gt;Bird&lt;/code&gt; 而空實作 &lt;code&gt;fly()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interface-segregation-principle-isp---介面隔離原則&#34;&gt;Interface Segregation Principle (ISP) - 介面隔離原則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No client should be forced to depend on methods it does not use&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;避免讓一個介面擁有過多功能，導致實作該介面的類別需要實作不必要的功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;實踐方式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;把大介面拆分為多個小介面，使類別只需實作與自身業務相關的介面&lt;/li&gt;
&lt;li&gt;例如，&lt;code&gt;Worker&lt;/code&gt; 介面包含 &lt;code&gt;work()&lt;/code&gt;、&lt;code&gt;eat()&lt;/code&gt; 方法，則應將其拆成 &lt;code&gt;Workable&lt;/code&gt; 介面（包含 &lt;code&gt;work()&lt;/code&gt;）與 &lt;code&gt;Eatable&lt;/code&gt; 介面（包含 &lt;code&gt;eat()&lt;/code&gt;），避免機器人類別被迫實作 &lt;code&gt;eat()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-inversion-principle-dip---依賴反轉原則&#34;&gt;Dependency Inversion Principle (DIP) - 依賴反轉原則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高階模組不應該依賴低階模組，兩者都應依賴抽象層&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象不應依賴具體實現，具體實現應依賴抽象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;實踐方式&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;透過 &lt;code&gt;interface&lt;/code&gt; 或 &lt;code&gt;抽象類別&lt;/code&gt; 來解耦高階與低階模組&lt;/li&gt;
&lt;li&gt;例如，&lt;code&gt;OrderService&lt;/code&gt; 依賴 &lt;code&gt;PaymentProcessor&lt;/code&gt; 介面，而不是直接依賴 &lt;code&gt;PayPalProcessor&lt;/code&gt; 或 &lt;code&gt;StripeProcessor&lt;/code&gt;，這樣未來更換支付方式時無需修改 &lt;code&gt;OrderService&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modularity&#34;&gt;Modularity&lt;/h2&gt;
&lt;h3 id=&#34;coupling耦合&#34;&gt;Coupling（耦合）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;模組間的依賴程度，耦合越鬆散，模組的獨立性越高，維護與擴展性越好&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;tight-coupling緊密耦合&#34;&gt;Tight Coupling（緊密耦合）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Coupling（內容耦合）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個模組直接依賴另一個模組的內部運作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：一個模組直接存取另一個模組的變數（假設變數表示長度，單位是公尺）
&lt;ul&gt;
&lt;li&gt;若另一個模組改變單位為公分，則所有存取該變數的模組都會受到影響&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解法&lt;/strong&gt;：透過 &lt;code&gt;getter&lt;/code&gt; 提供 &lt;code&gt;getMeter()&lt;/code&gt; 方法，而不是直接存取變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Coupling（公共耦合）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多個模組共同存取和修改同一個 &lt;code&gt;global data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：多個模組使用相同的全域變數，當其中一個模組錯誤修改該變數時，其他模組可能會出錯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;External Coupling（外部耦合）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多個模組依賴相同的外部 I/O&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：所有模組直接呼叫相同的 API，若 API 變更，所有模組都需修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;medium-coupling中等耦合&#34;&gt;Medium Coupling（中等耦合）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Control Coupling（控制耦合）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個模組透過參數影響另一個模組的內部邏輯&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：函式 &lt;code&gt;process(data, mode)&lt;/code&gt; 內部邏輯依賴 &lt;code&gt;mode&lt;/code&gt; 參數，若 &lt;code&gt;mode&lt;/code&gt; 值的定義變更，所有呼叫該函式的地方都需同步修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data-Structure Coupling（資料結構耦合）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多個模組共用相同的 &lt;code&gt;data structure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：若所有模組都依賴一個 &lt;code&gt;dict&lt;/code&gt; 來存取資料，當 &lt;code&gt;dict&lt;/code&gt; 結構變更時，所有模組都會受到影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;loose-coupling鬆散耦合&#34;&gt;Loose Coupling（鬆散耦合）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Coupling（資料耦合）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模組之間僅透過資料交換（參數或回傳值）來溝通&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：函式 &lt;code&gt;calculateTax(amount)&lt;/code&gt; 接受 &lt;code&gt;amount&lt;/code&gt; 參數，而不依賴全域變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Message Coupling（訊息耦合）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模組之間透過訊息或指令進行溝通，而不是直接影響彼此的邏輯&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：一個模組透過 &lt;code&gt;event bus&lt;/code&gt; 發送 &lt;code&gt;order_created&lt;/code&gt; 訊息，另一個模組根據訊息執行相應動作（而不依賴具體的函式呼叫）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cohesion內聚&#34;&gt;Cohesion（內聚）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;衡量模組內部功能的相關性，內聚度越高，模組的單一性越強，功能更專注且更易於維護&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;weak-cohesion弱內聚&#34;&gt;Weak Cohesion（弱內聚）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coincidental Cohesion（偶然內聚）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模組內的功能沒有關聯，只是被放在同一個檔案內&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：單一檔案內包含不相關的函式，如 &lt;code&gt;calculateTax()&lt;/code&gt; 和 &lt;code&gt;generateReport()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Temporal Cohesion（時間內聚）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能的唯一關聯是它們在相同時間執行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;Initializer&lt;/code&gt; 類別內包含 &lt;code&gt;initDatabase()&lt;/code&gt;、&lt;code&gt;initCache()&lt;/code&gt;、&lt;code&gt;initLogger()&lt;/code&gt;，這些功能只在初始化時執行，內聚度較低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logical Cohesion（邏輯內聚）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模組內的功能可以被歸類為相同的類別&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;BackupController&lt;/code&gt; 負責多種不同類型的備份，沒有專注於單一職責&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;medium-cohesion中等內聚&#34;&gt;Medium Cohesion（中等內聚）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Procedural Cohesion（程序內聚）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模組內的功能需要以特定順序執行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;Sender&lt;/code&gt; 類別內包含 &lt;code&gt;connect()&lt;/code&gt;、&lt;code&gt;sendData()&lt;/code&gt;、&lt;code&gt;disconnect()&lt;/code&gt;，這些功能需要按照順序執行，內聚度較高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Communicational Cohesion（通信內聚）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模組內的功能都圍繞在某個特定資料結構上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;ShoppingCart&lt;/code&gt; 類別內包含 &lt;code&gt;addItem()&lt;/code&gt;、&lt;code&gt;removeItem()&lt;/code&gt;、&lt;code&gt;calculateTotal()&lt;/code&gt;，這些功能都圍繞在 &lt;code&gt;items&lt;/code&gt; 屬性上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sequential Cohesion（順序內聚）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某個函式的輸出作為另一個函式的輸入，且具有執行順序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;readData()&lt;/code&gt; → &lt;code&gt;processData()&lt;/code&gt; → &lt;code&gt;saveData()&lt;/code&gt;，內聚度相對較高，但仍可能包含非核心功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;strong-cohesion強內聚&#34;&gt;Strong Cohesion（強內聚）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Functional Cohesion（功能內聚）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;模組中的各部分都對模組中單一明確的目標有貢獻&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;：&lt;code&gt;CalculateCircleArea&lt;/code&gt; 類別僅包含 &lt;code&gt;calculateArea()&lt;/code&gt; 方法，專注於計算圓形面積&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Bayesian Optimization</title>
        <link>https://roykesydon.github.io/Blog/p/bayesian-optimization/</link>
        <pubDate>Thu, 26 Jan 2023 01:36:53 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/bayesian-optimization/</guid>
        <description>&lt;h1 id=&#34;介紹&#34;&gt;介紹&lt;/h1&gt;
&lt;p&gt;一種用於自動化找超參數的方法，用在採樣昂貴而且是黑盒子的情況&lt;/p&gt;
&lt;h1 id=&#34;流程&#34;&gt;流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;取樣一些資料點&lt;/li&gt;
&lt;li&gt;生出一個 Surrogate Model(可採用 Gaussian Process)&lt;/li&gt;
&lt;li&gt;反覆做以下事情
&lt;ul&gt;
&lt;li&gt;用 Acquisition Function 挑選下一個要採樣的點&lt;/li&gt;
&lt;li&gt;重新評估 Surrogate Model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;gaussian-process&#34;&gt;Gaussian Process&lt;/h2&gt;
&lt;p&gt;最終的 prediction 是一個 distribution 而不是單一個數字
生成方法需借助 kernel function，常用 RBF(Radial Basis Function)&lt;/p&gt;
&lt;p&gt;$K(x, x^{&amp;rsquo;}|\tau)=\sigma^2exp(-\frac{1}{2}(\frac{x-x^{&amp;rsquo;}}{l})^2)$&lt;/p&gt;
&lt;p&gt;$\sigma$ 和 $l$ 是兩個可以調整的超參數&lt;/p&gt;
&lt;h2 id=&#34;acquisition-function&#34;&gt;Acquisition Function&lt;/h2&gt;
&lt;p&gt;可用超參數來調節 exploitation 和 exploitation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UCB(Upper confidence bound)&lt;/li&gt;
&lt;li&gt;PI(probability of improvement)&lt;/li&gt;
&lt;li&gt;EI(Expected improvement)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
