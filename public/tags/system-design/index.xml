<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>system-design on Roykesydon</title>
        <link>https://roykesydon.github.io/Blog/tags/system-design/</link>
        <description>Recent content in system-design on Roykesydon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 03 Aug 2024 00:08:46 +0800</lastBuildDate><atom:link href="https://roykesydon.github.io/Blog/tags/system-design/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>System Design</title>
        <link>https://roykesydon.github.io/Blog/p/system-design/</link>
        <pubDate>Sat, 03 Aug 2024 00:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/system-design/</guid>
        <description>&lt;h2 id=&#34;estimation&#34;&gt;Estimation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要評估的指標
&lt;ul&gt;
&lt;li&gt;latency&lt;/li&gt;
&lt;li&gt;throughput&lt;/li&gt;
&lt;li&gt;capacity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database 估計
&lt;ul&gt;
&lt;li&gt;沒特別指定的話，可以預估 single relational database 可以處理 read &amp;amp; write 10K per second&lt;/li&gt;
&lt;li&gt;single relational database 的容量可以抓 3 TB&lt;/li&gt;
&lt;li&gt;redis 可以抓 100K，但是受限於 memory，可能抓 30GB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以問的問題類型
&lt;ul&gt;
&lt;li&gt;總共有多少用戶？&lt;/li&gt;
&lt;li&gt;有多少活躍用戶？&lt;/li&gt;
&lt;li&gt;每個用戶平均每天使用多久？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;
&lt;h3 id=&#34;load-balancer&#34;&gt;Load Balancer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;type
&lt;ul&gt;
&lt;li&gt;application load balancer (ALB)
&lt;ul&gt;
&lt;li&gt;OSI layer 7 (Application layer)&lt;/li&gt;
&lt;li&gt;可以根據 request header, URL, query string 來做 routing&lt;/li&gt;
&lt;li&gt;可以 validate / terminate SSL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network load balancer (NLB)
&lt;ul&gt;
&lt;li&gt;OSI layer 4 (Transport layer)&lt;/li&gt;
&lt;li&gt;可以根據 protocol (TCP, UDP, IP..), destination port etc 來做 routing&lt;/li&gt;
&lt;li&gt;一般來說預設會 pass through SSL&lt;/li&gt;
&lt;li&gt;比較適合應付高流量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;strategy
&lt;ul&gt;
&lt;li&gt;round robin
&lt;ul&gt;
&lt;li&gt;輪流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;least connection&lt;/li&gt;
&lt;li&gt;resource-based
&lt;ul&gt;
&lt;li&gt;考慮每個 instance 的資源使用情況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;weighted variants of the above
&lt;ul&gt;
&lt;li&gt;可以把上面說的各種情況多加入 weight 的考量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;random&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點
&lt;ul&gt;
&lt;li&gt;resilience
&lt;ul&gt;
&lt;li&gt;可以關注到某個 instance down 了，自動把 request 轉到其他 instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scalability
&lt;ul&gt;
&lt;li&gt;後面的 instance 可以 horizontal scale&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 API Gateway 的差異
&lt;ul&gt;
&lt;li&gt;API Gateway 除了 load balancing 會有更多的功能，例如 rate limiting, authentication, authorization, request validation, caching, logging etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;protocol--sendreceive-data&#34;&gt;Protocol &amp;amp; Send/Receive data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;UDP&lt;/li&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;li&gt;websocket
&lt;ul&gt;
&lt;li&gt;duplex (two-way) communication&lt;/li&gt;
&lt;li&gt;只會建立一次 TCP connection&lt;/li&gt;
&lt;li&gt;load balancer 可以會遇到問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;long polling
&lt;ul&gt;
&lt;li&gt;client 送 request 給 server，server 不會立刻 close connection，而是等待有新資料或 timeout 才回應&lt;/li&gt;
&lt;li&gt;某些不能用 websocket 的情況下，可以用 long polling 來模擬&lt;/li&gt;
&lt;li&gt;但是在一些框架或語言可能不好實作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gRPC
&lt;ul&gt;
&lt;li&gt;RPC
&lt;ul&gt;
&lt;li&gt;remote procedure call&lt;/li&gt;
&lt;li&gt;把一些 service 包裝成像 local function 一樣，就可以像調用本地函式一樣使用 remote 的服務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;google 開發的 RPC 框架&lt;/li&gt;
&lt;li&gt;用 protobuf 作為 IDL (Interface Definition Language)
&lt;ul&gt;
&lt;li&gt;binary protocol
&lt;ul&gt;
&lt;li&gt;非 readable，需要 encode / decode&lt;/li&gt;
&lt;li&gt;但比 json 小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.proto file
&lt;ul&gt;
&lt;li&gt;定義 message 的格式&lt;/li&gt;
&lt;li&gt;描述了 interface 長怎樣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;protoc
&lt;ul&gt;
&lt;li&gt;用來 compile .proto file，根據指定的程式語言，產生 client / server code
&lt;ul&gt;
&lt;li&gt;server 再實作 interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 http/2 來傳輸&lt;/li&gt;
&lt;li&gt;不能用在 browser&lt;/li&gt;
&lt;li&gt;適合用在內部服務之間的溝通&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User perspective
&lt;ul&gt;
&lt;li&gt;描述身為 user 期待看到什麼東西&lt;/li&gt;
&lt;li&gt;這裡可以先簡單介紹這個 app 的大概邏輯，之後 marketplace 再針對不同 role 探討資料和使用情境&lt;/li&gt;
&lt;li&gt;也可以詢問使用的平台&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Marketplace
&lt;ul&gt;
&lt;li&gt;詢問要支援的用戶數量，以及活躍用戶數量&lt;/li&gt;
&lt;li&gt;如果有多種用戶，也要分開討論
&lt;ul&gt;
&lt;li&gt;ex: 叫車服務會有司機和乘客&lt;/li&gt;
&lt;li&gt;有更多角色後，可以開始根據角色討論他們的 perspective&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得一些數字
&lt;ul&gt;
&lt;li&gt;考慮 sotrage 以及 throughput&lt;/li&gt;
&lt;li&gt;叫車服務範例
&lt;ul&gt;
&lt;li&gt;乘客總數量、活躍乘客數、每月乘客需求趟數&lt;/li&gt;
&lt;li&gt;司機總數量、活躍司機數、單趟平均時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;throuput
&lt;ul&gt;
&lt;li&gt;活躍用戶&lt;/li&gt;
&lt;li&gt;refresh rate&lt;/li&gt;
&lt;li&gt;每個 user 平均打開 app 的次數&lt;/li&gt;
&lt;li&gt;平均打開 app 會用多久&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rough design
&lt;ul&gt;
&lt;li&gt;探討資料的傳遞
&lt;ul&gt;
&lt;li&gt;根據不同 role 去講他們應該傳送什麼資料，用什麼協定，request 的頻率 (request per second)
&lt;ul&gt;
&lt;li&gt;討論的時候可以用 average，但是會有 peak time，可以考慮 X2, X4, X10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;探討資料的儲存
&lt;ul&gt;
&lt;li&gt;要準備一些前提，比如假設單一資料庫每秒可以 insert 5K 筆資料&lt;/li&gt;
&lt;li&gt;可以討論不同的 sharding
&lt;ul&gt;
&lt;li&gt;考慮怎樣存可以讓大小減少&lt;/li&gt;
&lt;li&gt;評估這樣分是否可能導致 sharding uneven&lt;/li&gt;
&lt;li&gt;怎樣的切法可以讓 query 盡量不要跨 shard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每個階段也可以探討 throughput&lt;/li&gt;
&lt;li&gt;開始根據情境設計不同的 service 來表達他們的交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;
&lt;h3 id=&#34;查找&#34;&gt;查找&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能不能用地理資訊來做 hashing&lt;/li&gt;
&lt;li&gt;能不能用 geo index&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工具--技術&#34;&gt;工具 &amp;amp; 技術&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;headless browser
&lt;ul&gt;
&lt;li&gt;沒有 user interface 的 browser&lt;/li&gt;
&lt;li&gt;但是依然有 rendering engine 和 js interpreter。可以用來得到最終的 html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cyclic redundancy check (CRC)
&lt;ul&gt;
&lt;li&gt;一般用在檢查封包是否有錯誤，但是我們也可以用來檢查某個檔案是否有被修改，好做 sync&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CQRS (Command Query Responsibility Segregation)
&lt;ul&gt;
&lt;li&gt;把 read 和 write 分開&lt;/li&gt;
&lt;li&gt;一個 storage 針對 read 做 optimize，另一個 storage 針對 write 做 optimize&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unique-id&#34;&gt;Unique ID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UUID 是 random 且 human-readable（不會有相近的 char，比如 0 和 O）
&lt;ul&gt;
&lt;li&gt;但是太長&lt;/li&gt;
&lt;li&gt;可以用不同的 encoding 壓縮長度
&lt;ul&gt;
&lt;li&gt;因為 UUID 用的 charactor 是 0-9, a-f，所以可以用有更多種 charactor 的 encoding 來壓縮&lt;/li&gt;
&lt;li&gt;BASE62
&lt;ul&gt;
&lt;li&gt;包含 0-9, a-z, A-Z&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BASE58
&lt;ul&gt;
&lt;li&gt;BASE62 但不包含容易混淆的 0, O, I, l&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BASE64
&lt;ul&gt;
&lt;li&gt;BASE62 但多了 +, /&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個 Phase 可以多和 interviewer 討論，確認走在正確的方向上&lt;/li&gt;
&lt;li&gt;面對面試官給的數字可以嘗試為了好算向上抓一些&lt;/li&gt;
&lt;li&gt;延遲任務
&lt;ul&gt;
&lt;li&gt;如果遇到因為某些原因需要晚點才能做某個任務，可以用 queue 來處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache 除了用專門的 cache database 做，Server 自身也可以用 memory 來 cache&lt;/li&gt;
&lt;li&gt;對於先搶先贏的系統不一定要追求公平，只要達成目標即可&lt;/li&gt;
&lt;li&gt;對於搶票機制可以做 pre-populate，事先在 database 生好指定數量的票，這樣就可以只 lock 某個 row，不用 lock 整個 table&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
