<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>database on Roykesydon</title>
        <link>https://roykesydon.github.io/Blog/tags/database/</link>
        <description>Recent content in database on Roykesydon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 16 Aug 2024 00:00:17 +0800</lastBuildDate><atom:link href="https://roykesydon.github.io/Blog/tags/database/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MongoDB 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/mongodb-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Fri, 16 Aug 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/mongodb-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;mongodb-基礎&#34;&gt;MongoDB 基礎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以 BSON (Binary JSON) 儲存資料
&lt;ul&gt;
&lt;li&gt;BSON 是 JSON 的二進位版本，支援更多資料型別，如日期和二進位資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;_id 欄位作為預設的主鍵
&lt;ul&gt;
&lt;li&gt;若未指定，MongoDB 會自動生成一個 12 字節的 ObjectId&lt;/li&gt;
&lt;li&gt;用於確保文件中唯一性，特別在分散式系統中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;索引機制&#34;&gt;索引機制&lt;/h2&gt;
&lt;h3 id=&#34;composite-index&#34;&gt;Composite Index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由多個欄位組成，例如 (a, b)&lt;/li&gt;
&lt;li&gt;Prefix 特性
&lt;ul&gt;
&lt;li&gt;如果索引為 (a, b)，則 (a) 也可被單獨使用&lt;/li&gt;
&lt;li&gt;但 (b) 或 (a, b, c) 無法直接利用此索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hint
&lt;ul&gt;
&lt;li&gt;可強制 MongoDB 使用特定索引&lt;/li&gt;
&lt;li&gt;用於測試或避免 optimizer 選錯索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;explain-分析查詢&#34;&gt;Explain 分析查詢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來檢視查詢的執行計畫&lt;/li&gt;
&lt;li&gt;重要欄位
&lt;ul&gt;
&lt;li&gt;cursor
&lt;ul&gt;
&lt;li&gt;BasicCursor 表示全表掃描，應避免&lt;/li&gt;
&lt;li&gt;BtreeCursor 表示使用索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nscanned
&lt;ul&gt;
&lt;li&gt;掃描的索引數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nscannedObjects
&lt;ul&gt;
&lt;li&gt;掃描的文件數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;n
&lt;ul&gt;
&lt;li&gt;最終返回的文件數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關係：nscanned &amp;gt;= nscannedObjects &amp;gt;= n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scanAndOrder
&lt;ul&gt;
&lt;li&gt;表示需要將文件載入記憶體並排序&lt;/li&gt;
&lt;li&gt;通常一次性返回所有結果，效率較低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;optimizer-索引選擇&#34;&gt;Optimizer 索引選擇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一階段：尋找最佳索引
&lt;ul&gt;
&lt;li&gt;最佳索引條件
&lt;ul&gt;
&lt;li&gt;包含所有 filter 和 sort 的欄位&lt;/li&gt;
&lt;li&gt;equality filter 必須在 range filter 之前&lt;/li&gt;
&lt;li&gt;sort 欄位必須在 range filter 之後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若有多個最佳索引條件符合條件，隨便選擇一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二階段：實驗性選擇
&lt;ul&gt;
&lt;li&gt;若無最佳索引，會測試多個索引&lt;/li&gt;
&lt;li&gt;optimizer 選擇 nscanned 最小的索引作為最終方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;儲存引擎&#34;&gt;儲存引擎&lt;/h2&gt;
&lt;h3 id=&#34;mmapv1&#34;&gt;MMAPv1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB 早期的儲存引擎&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;_id 直接對應 disk 偏移量 (diskloc)
&lt;ul&gt;
&lt;li&gt;查詢速度快，但更新需維護偏移量，效能低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鎖定機制
&lt;ul&gt;
&lt;li&gt;初始為 database-level lock&lt;/li&gt;
&lt;li&gt;後期升級至 collection-level lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已於 MongoDB 4.0 後棄用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wiredtiger&#34;&gt;WiredTiger&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB 收購並採用的新儲存引擎&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;Document-level locking，提升並發效能&lt;/li&gt;
&lt;li&gt;支援資料壓縮，減少儲存空間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本演進
&lt;ul&gt;
&lt;li&gt;5.2 之前
&lt;ul&gt;
&lt;li&gt;_id 用於查找 recordid&lt;/li&gt;
&lt;li&gt;recordid 作為 clustered index，指向實際文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5.3 之後
&lt;ul&gt;
&lt;li&gt;_id 直接成為 clustered index&lt;/li&gt;
&lt;li&gt;_id 為 12 字節 (ObjectId)，比原 64 位 recordid 更大&lt;/li&gt;
&lt;li&gt;影響
&lt;ul&gt;
&lt;li&gt;對 secondary index 增加儲存負擔&lt;/li&gt;
&lt;li&gt;提升跨機器和 shard 環境中的唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Database Transactions and ACID Properties</title>
        <link>https://roykesydon.github.io/Blog/p/database-transactions-and-acid-properties/</link>
        <pubDate>Sun, 21 Jul 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-transactions-and-acid-properties/</guid>
        <description>&lt;h2 id=&#34;transaction&#34;&gt;Transaction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個或多個操作的集合&lt;/li&gt;
&lt;li&gt;一個 transaction 要不全部執行，要不全部不執行&lt;/li&gt;
&lt;li&gt;即使程式中未顯式使用 transaction，資料庫也會自動為操作包裹一個隱式的 transaction&lt;/li&gt;
&lt;li&gt;lifespan
&lt;ul&gt;
&lt;li&gt;begin&lt;/li&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;li&gt;rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;atomicity&#34;&gt;Atomicity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個 transaction 要不全部執行，要不全部不執行&lt;/li&gt;
&lt;li&gt;在 commit 前不管因為任何理由失敗，都該 rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consistency&#34;&gt;Consistency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;符合當初制定的規則 (ex: 設置的 foreign key 指向的資料一定要存在)
&lt;ul&gt;
&lt;li&gt;referential integrity
&lt;ul&gt;
&lt;li&gt;保證 primary key 和 foreign key 之間的關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eventual consistency
&lt;ul&gt;
&lt;li&gt;最後一定會 consistent，儘管過程中可能會出現短暫的不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;isolation&#34;&gt;Isolation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個 transaction 的執行不應該影響其他 transaction&lt;/li&gt;
&lt;li&gt;read phenomena
&lt;ul&gt;
&lt;li&gt;dirty read
&lt;ul&gt;
&lt;li&gt;一個 transaction 讀到了另一個 transaction 已經寫了但還沒 commit 的資料。這個資料有可能被 commit 也有可能被 rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;non-repeatable read
&lt;ul&gt;
&lt;li&gt;一個 transaction 兩次讀取同個資料時，得到的資料不一樣因是因為有其他 transaction 更新了這個資料（已經 commit 了）&lt;/li&gt;
&lt;li&gt;和 dirty read 不同的是，這個資料是已經 commit 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;phantom read
&lt;ul&gt;
&lt;li&gt;也是第一次和第二次讀取的資料不一樣，第二次發現多了額外的資料，這次是因為有其他 transaction 寫入了新的資料（並且 commit 了）&lt;/li&gt;
&lt;li&gt;之所以要和 non-repeatable read 分開，是因為他這裡沒辦法簡單的靠鎖起來已經讀過的資料，因為你沒辦法鎖你本來看不到的資料&lt;/li&gt;
&lt;li&gt;系統設計遇到這問題可以考慮用 pre-populate 的方式，把所有可能的資料都先創好，就可以個別鎖住&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lost update
&lt;ul&gt;
&lt;li&gt;我更新了某筆資料，但是在 commit 之前，有其他 transaction 也更新了這筆資料，並且 commit。我再去讀取這筆資料時，發現我更新的資料就被覆蓋了&lt;/li&gt;
&lt;li&gt;double booking problem
&lt;ul&gt;
&lt;li&gt;當兩個 transaction 同時搶更新同個資源就有可能遇到該問題&lt;/li&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;兩個 transaction 都先 select 再 update&lt;/li&gt;
&lt;li&gt;他們兩個 select 都先看到有空位，然後一前一後更新，就會造成 double booking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Isolation level
&lt;ul&gt;
&lt;li&gt;為了解決 read phenomena，資料庫提供了不同的隔離等級&lt;/li&gt;
&lt;li&gt;不同的隔離等級會影響到 transaction 之間讀取資料的方式，以達到不同的資料一致性要求&lt;/li&gt;
&lt;li&gt;不會影響自身 transaction 前面所 write 的資料&lt;/li&gt;
&lt;li&gt;read uncommitted
&lt;ul&gt;
&lt;li&gt;No isolation&lt;/li&gt;
&lt;li&gt;可以看到其他 transaction 還沒 commit 的資料&lt;/li&gt;
&lt;li&gt;所有的 read phenomena 都有可能發生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read committed
&lt;ul&gt;
&lt;li&gt;只能看到其他 transaction commit 的資料&lt;/li&gt;
&lt;li&gt;許多資料庫的預設隔離等級&lt;/li&gt;
&lt;li&gt;除了 dirty read 之外，其他 read phenomena 都有可能發生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;repeatable read
&lt;ul&gt;
&lt;li&gt;確保同一筆資料在同一個 transaction 中讀取時，結果是一樣的&lt;/li&gt;
&lt;li&gt;phantom read 還是有可能發生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;snapshot
&lt;ul&gt;
&lt;li&gt;保證 transaction 得到的資料是一致的&lt;/li&gt;
&lt;li&gt;只會看到 transaction 開始時的 snapshot&lt;/li&gt;
&lt;li&gt;read phenomena 都不會發生&lt;/li&gt;
&lt;li&gt;好像不是所有資料庫都有這個隔離等級，也有些 repeatable read 就是用 snapshot 來實現的
&lt;ul&gt;
&lt;li&gt;比如 PostgreSQL 就是用 snapshot 來實現 repeatable read&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但這不代表不會遇到問題，請參考 double booking problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;serializable
&lt;ul&gt;
&lt;li&gt;最高隔離等級&lt;/li&gt;
&lt;li&gt;保證所有 concurrent transaction 執行起來會和依序執行的效果一樣
&lt;ul&gt;
&lt;li&gt;如果 transaction 不會彼此影響，還是有可能會讓 transaction 並行執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read phenomena 都不會發生&lt;/li&gt;
&lt;li&gt;和要求 exclusive lock 相比，有可能實現方法是遇到衝突會 fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;durability&#34;&gt;Durability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一旦 transaction 完成，資料應該要 persistent
&lt;ul&gt;
&lt;li&gt;完成的 transaction 會被記在 non-volatile storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;durability technique
&lt;ul&gt;
&lt;li&gt;Write ahead log (WAL)
&lt;ul&gt;
&lt;li&gt;先寫 log (寫你做了什麼操作，但不去真的改 disk 上對應的資料)，有空再修改
&lt;ul&gt;
&lt;li&gt;這樣一些修改就可以改在 memory，如果 crash 了，可以用 log 來 recover&lt;/li&gt;
&lt;li&gt;而且考量硬碟限制，如果你想修改的資料遠小於硬碟可寫的最小單位，會很浪費&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous snapshot
&lt;ul&gt;
&lt;li&gt;在後台把 snapshot 寫到 disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Redis</title>
        <link>https://roykesydon.github.io/Blog/p/redis/</link>
        <pubDate>Mon, 05 Jun 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/redis/</guid>
        <description>&lt;h2 id=&#34;基本介紹&#34;&gt;基本介紹&lt;/h2&gt;
&lt;h3 id=&#34;功能特性&#34;&gt;功能特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL 資料庫&lt;/li&gt;
&lt;li&gt;記憶體式存儲 (In-memory)&lt;/li&gt;
&lt;li&gt;以鍵值對 (Key-Value) 形式存儲資料&lt;/li&gt;
&lt;li&gt;支援多種資料結構，如列表 (List)、集合 (Set)、雜湊 (Hash) 等&lt;/li&gt;
&lt;li&gt;高性能，適合需要快速讀寫的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用場景&#34;&gt;使用場景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快取 (Cache)&lt;/strong&gt;&lt;br&gt;
儲存常用資料，減少長時間的 IO 操作，提升回應速度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共享會話 (Shared Session)&lt;/strong&gt;&lt;br&gt;
在無狀態 (stateless) 的伺服器間共享會話資料&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分散式鎖 (Distributed Lock)&lt;/strong&gt;&lt;br&gt;
用於多個程序共享資源時，透過 &lt;code&gt;SETNX&lt;/code&gt; (set if not exists) 實現原子性鎖定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速率限制 (Rate Limiter)&lt;/strong&gt;&lt;br&gt;
利用計數器 (increment) 和過期時間 (expiration) 實現請求限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;h3 id=&#34;啟動與連線&#34;&gt;啟動與連線&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis-server&lt;/code&gt;&lt;br&gt;
啟動 Redis 服務，預設埠為 6379&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;br&gt;
進入 Redis 命令列介面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料存取&#34;&gt;資料存取&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SET &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
設定鍵值對，預設值為字串類型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取指定鍵的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEL &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
刪除指定鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXISTS &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
檢查鍵是否存在&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KEYS &amp;lt;pattern&amp;gt;&lt;/code&gt;&lt;br&gt;
查找符合模式的鍵，例如 &lt;code&gt;KEYS *&lt;/code&gt; 可列出所有鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLUSHALL&lt;/code&gt;&lt;br&gt;
清空所有資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;過期機制&#34;&gt;過期機制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TTL &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
查看鍵的剩餘存活時間，單位為秒
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;-1&amp;rdquo; 表示永不過期&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-2&amp;rdquo; 表示已過期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPIRE &amp;lt;key&amp;gt; &amp;lt;second&amp;gt;&lt;/code&gt;&lt;br&gt;
設定鍵的過期時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SETEX &amp;lt;key&amp;gt; &amp;lt;seconds&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
設定鍵值對並同時指定過期時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支援的資料結構&#34;&gt;支援的資料結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;列表 (List)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LPUSH/RPUSH &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
從左/右端推入值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LRANGE &amp;lt;key&amp;gt; &amp;lt;start index&amp;gt; &amp;lt;end index&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取指定範圍的值，&lt;code&gt;end index&lt;/code&gt; 可為 -1 表示到最後&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LPOP/RPOP &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
從左/右端彈出值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合 (Set)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SADD &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
加入值到集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMEMBERS &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
列出集合所有成員&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SREM &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
移除集合中的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;雜湊 (Hash)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HSET &amp;lt;key&amp;gt; &amp;lt;field&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
設定雜湊欄位的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HGET &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取指定欄位的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HGETALL &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取雜湊所有欄位與值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HDEL &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;br&gt;
刪除指定欄位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEXISTS &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;br&gt;
檢查欄位是否存在&lt;/li&gt;
&lt;li&gt;注意：Redis 不支援巢狀雜湊結構&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快取機制&#34;&gt;快取機制&lt;/h2&gt;
&lt;h3 id=&#34;常見快取策略&#34;&gt;常見快取策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cache Aside&lt;/strong&gt;&lt;br&gt;
先查詢快取，若無資料則查詢資料庫，並將結果存入快取&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read Through&lt;/strong&gt;&lt;br&gt;
用戶端僅存取快取，若快取無資料，由快取負責從資料庫取回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Through&lt;/strong&gt;&lt;br&gt;
寫入資料時，快取保留一份並同步寫入資料庫&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Behind&lt;/strong&gt;&lt;br&gt;
與 Write Through 類似，但不會立即寫入資料庫，而是累積資料後批量寫入&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取情境問題與解法&#34;&gt;快取情境問題與解法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快取雪崩 (Cache Avalanche)&lt;/strong&gt;&lt;br&gt;
大量快取同時失效，導致資料庫瞬間承受高流量
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;br&gt;
為快取加上隨機過期時間，避免集中失效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快取擊穿 (Hotspot Invalid)&lt;/strong&gt;&lt;br&gt;
熱點快取失效，大量請求直接衝擊資料庫
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;br&gt;
設定熱點資料永不過期，或在查詢資料庫時加鎖控制流量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快取穿透 (Cache Penetration)&lt;/strong&gt;&lt;br&gt;
用戶請求不存在的資料，快取與資料庫皆無結果，直接衝擊資料庫
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;br&gt;
在應用層過濾非法請求，或使用布隆過濾器 (Bloom Filter) 預先檢查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;記憶體管理&#34;&gt;記憶體管理&lt;/h2&gt;
&lt;h3 id=&#34;過期鍵刪除策略&#34;&gt;過期鍵刪除策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定期刪除&lt;/strong&gt;&lt;br&gt;
每隔固定時間隨機抽樣檢查部分鍵，若過期則刪除&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;惰性刪除&lt;/strong&gt;&lt;br&gt;
訪問鍵時檢查是否過期，若過期則立即刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;記憶體淘汰策略-maxmemory-policy-eviction&#34;&gt;記憶體淘汰策略 (maxmemory-policy, Eviction)&lt;/h3&gt;
&lt;p&gt;當記憶體使用達到上限時，根據設定的策略處理資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;noeviction&lt;/strong&gt;&lt;br&gt;
不淘汰任何鍵，記憶體滿時拒絕新寫入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-lru&lt;/strong&gt;&lt;br&gt;
對所有鍵使用最近最少使用 (LRU) 算法淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-lfu&lt;/strong&gt;&lt;br&gt;
對所有鍵使用最不常用 (LFU) 算法淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-lru&lt;/strong&gt;&lt;br&gt;
僅對設有過期時間的鍵使用 LRU 淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-lfu&lt;/strong&gt;&lt;br&gt;
僅對設有過期時間的鍵使用 LFU 淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-random&lt;/strong&gt;&lt;br&gt;
從所有鍵中隨機淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-random&lt;/strong&gt;&lt;br&gt;
從設有過期時間的鍵中隨機淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-ttl&lt;/strong&gt;&lt;br&gt;
優先淘汰剩餘存活時間 (TTL) 較短的鍵&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;持久化&#34;&gt;持久化&lt;/h2&gt;
&lt;h3 id=&#34;rdb-redis-database&#34;&gt;RDB (Redis Database)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以固定時間間隔對記憶體中的資料進行快照 (memory dump)&lt;/li&gt;
&lt;li&gt;優點：恢復速度快，適合大規模資料備份&lt;/li&gt;
&lt;li&gt;缺點：若伺服器故障，可能丟失最後一次快照後的資料&lt;/li&gt;
&lt;li&gt;相關命令
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SAVE&lt;/code&gt;&lt;br&gt;
同步生成快照，會阻塞主進程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BGSAVE&lt;/code&gt;&lt;br&gt;
異步生成快照，不影響主進程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof-append-only-file&#34;&gt;AOF (Append Only File)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;記錄每一次寫入操作的流程，類似操作日誌&lt;/li&gt;
&lt;li&gt;優點：資料一致性高，丟失風險低&lt;/li&gt;
&lt;li&gt;缺點：檔案較大，恢復速度比 RDB 慢&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AOF 重寫 (Rewrite)&lt;/strong&gt;&lt;br&gt;
當 AOF 檔案過大時，Redis 會生成新檔案，&lt;br&gt;
用最少的操作重建當前資料狀態，取代舊檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;混合模式&#34;&gt;混合模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;結合 RDB 和 AOF 優勢&lt;/li&gt;
&lt;li&gt;在 AOF 重寫時，前段使用 RDB 格式快照，後段附加 AOF 操作日誌&lt;/li&gt;
&lt;li&gt;兼顧恢復速度與資料完整性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高可用性-high-availability&#34;&gt;高可用性 (High Availability)&lt;/h2&gt;
&lt;h3 id=&#34;主從同步&#34;&gt;主從同步&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一主多從架構，主節點負責寫入，從節點分擔讀取壓力&lt;/li&gt;
&lt;li&gt;從節點會即時同步主節點的資料&lt;/li&gt;
&lt;li&gt;提升讀取效能，但主節點故障需手動切換&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哨兵模式-sentinel&#34;&gt;哨兵模式 (Sentinel)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;部署哨兵進程監控主從伺服器的運行狀態&lt;/li&gt;
&lt;li&gt;哨兵持續 Ping 伺服器，檢測異常&lt;/li&gt;
&lt;li&gt;若為哨兵叢集：
&lt;ul&gt;
&lt;li&gt;單一哨兵檢測異常時，標記伺服器為主觀下線&lt;/li&gt;
&lt;li&gt;多數哨兵同意後，判定為客觀下線，觸發故障轉移 (failover)&lt;/li&gt;
&lt;li&gt;自動選出新主節點，確保服務可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;叢集模式-cluster&#34;&gt;叢集模式 (Cluster)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將資料分片儲存，分散寫入壓力&lt;/li&gt;
&lt;li&gt;Redis 預設提供 16384 個槽 (slot)，透過雜湊函數分配鍵到不同槽&lt;/li&gt;
&lt;li&gt;節點間使用預設埠 16379 進行通訊&lt;/li&gt;
&lt;li&gt;可結合主從同步實現高可用性&lt;/li&gt;
&lt;li&gt;適用於大規模資料與高併發場景&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Database Normalization</title>
        <link>https://roykesydon.github.io/Blog/p/database-normalization/</link>
        <pubDate>Tue, 14 Mar 2023 10:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-normalization/</guid>
        <description>&lt;h2 id=&#34;normalization-目的&#34;&gt;Normalization 目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;避免 redundant information
&lt;ul&gt;
&lt;li&gt;資料重複容易導致資料不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免 anomalies
&lt;ul&gt;
&lt;li&gt;避免資料不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;隨著 1NF ~ 5NF，有更多的 safety guarantee&lt;/p&gt;
&lt;h2 id=&#34;functional-dependency&#34;&gt;Functional Dependency&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;{X} -&amp;gt; {Y}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X 是 determinant，Y 是 dependent&lt;/li&gt;
&lt;li&gt;Y is functionally dependent on X (Y depends on X)&lt;/li&gt;
&lt;li&gt;X functionally determines Y&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 attribute 的 value 可以決定另一個 attribute 的 value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex: {playerID} -&amp;gt; {playerName}&lt;/li&gt;
&lt;li&gt;這代表 playerID 決定了 playerName&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用箭頭表示，左邊是 determinant，右邊是 dependent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 attribute 可以有多個 dependent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex: {playerID} -&amp;gt; {playerName, playerAge}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 attribute 也可以是多個 attribute 的 dependent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex: {playerID, itemID} -&amp;gt; {itemName}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1nf&#34;&gt;1NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;去除重複性&lt;/li&gt;
&lt;li&gt;違反條件
&lt;ol&gt;
&lt;li&gt;用 row order 傳達資訊&lt;/li&gt;
&lt;li&gt;mixing data types in single column
&lt;ul&gt;
&lt;li&gt;但 relational database 不會讓你這樣做&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存在沒有 primary key 的 table&lt;/li&gt;
&lt;li&gt;repeating groups
&lt;ul&gt;
&lt;li&gt;同一個 column 有多個數值，或是在同一個 row 存多個同類型的數值
&lt;ul&gt;
&lt;li&gt;每個 column 的 value 都應該是 atomic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ex :
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;player&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 item_1, 4 item_2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;star&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 item_4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;player&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item_type1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;quantity1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item_type2&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;quantity2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;star&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2nf&#34;&gt;2NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;去除 partial dependency&lt;/li&gt;
&lt;li&gt;所有的 non-key attribute 都要 depend on 整個 PK
&lt;ul&gt;
&lt;li&gt;非正式定義，有點細微差異&lt;/li&gt;
&lt;li&gt;如果是 composite key，不能 depend on PK 的其中一部分&lt;/li&gt;
&lt;li&gt;functional dependency
&lt;ul&gt;
&lt;li&gt;ex: {playerID, itemID} -&amp;gt; {itemName}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;違反的例子
&lt;ul&gt;
&lt;li&gt;ex:
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;playerID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;這裡的 PK 是 {playerID, itemID}，但 itemName 只 depend on itemID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3nf&#34;&gt;3NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;去除 transitive dependency&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transitive dependency
&lt;ul&gt;
&lt;li&gt;{A} -&amp;gt; {B} -&amp;gt; {C}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;考慮到 functional dependency 有遞移性(Transitivity)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transitivity
&lt;ul&gt;
&lt;li&gt;{A} -&amp;gt; {B}，{B} -&amp;gt; {C}，則 {A} -&amp;gt; {C}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有 non-key attribute 都要 depend on the whole key，不能 depend on 其他 non-key attribute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;違反的例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex:
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;playerID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemName&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemCategory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;weapon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;weapon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;weapon&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;這裡的 PK 是 {playerID, itemID}，但 itemCategory 只 depend on itemName&lt;/li&gt;
&lt;li&gt;這裡的 itemCategory 是 transitive dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;boyce-codd-normal-form-bcnf&#34;&gt;Boyce-Codd Normal Form (BCNF)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;3NF 的強化版，又稱 3.5NF&lt;/li&gt;
&lt;li&gt;實務中大多做到 3NF&lt;/li&gt;
&lt;li&gt;對於每個 functional dependency，左邊的 attribute 都是 super key&lt;/li&gt;
&lt;li&gt;違反例子
&lt;ul&gt;
&lt;li&gt;ex:
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;playerID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;itemName&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PlayerName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;存在至少兩個 functional dependency
&lt;ul&gt;
&lt;li&gt;{itemID} -&amp;gt; {itemName}&lt;/li&gt;
&lt;li&gt;{playerID} -&amp;gt; {playerName}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是 {playerID} 和 {itemID} 都不是 super key
&lt;ul&gt;
&lt;li&gt;拆成三個表就可以解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4nf&#34;&gt;4NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要先符合 BCNF&lt;/li&gt;
&lt;li&gt;去除多值依賴(Multivalued Dependency)
&lt;ul&gt;
&lt;li&gt;multivalued dependency
&lt;ul&gt;
&lt;li&gt;一個表格至少要有 3 個 column 才有可能有 multivalued dependency&lt;/li&gt;
&lt;li&gt;對於 {A} -&amp;gt; {B}，如果一個 A 可以對應到多個 B，也可以對應到多個 C，然後 B 和 C 獨立，則有 multivalued dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一個 table 中的所有 multivalued dependency 必須依賴於 key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5nf&#34;&gt;5NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;又稱 Project-Join Normal Form (PJNF)&lt;/li&gt;
&lt;li&gt;去除 join dependency
&lt;ul&gt;
&lt;li&gt;join dependency
&lt;ul&gt;
&lt;li&gt;一個 table 可以表示成其他 table join 起來的結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果 JOIN dependency 存在，就拆分多個 table&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
