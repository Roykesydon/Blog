<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cache on Roykesydon</title>
        <link>https://roykesydon.github.io/Blog/tags/cache/</link>
        <description>Recent content in cache on Roykesydon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 05 Jun 2023 00:00:17 +0800</lastBuildDate><atom:link href="https://roykesydon.github.io/Blog/tags/cache/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis</title>
        <link>https://roykesydon.github.io/Blog/p/redis/</link>
        <pubDate>Mon, 05 Jun 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/redis/</guid>
        <description>&lt;h2 id=&#34;基本介紹&#34;&gt;基本介紹&lt;/h2&gt;
&lt;h3 id=&#34;功能特性&#34;&gt;功能特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL 資料庫&lt;/li&gt;
&lt;li&gt;記憶體式存儲 (In-memory)&lt;/li&gt;
&lt;li&gt;以鍵值對 (Key-Value) 形式存儲資料&lt;/li&gt;
&lt;li&gt;支援多種資料結構，如列表 (List)、集合 (Set)、雜湊 (Hash) 等&lt;/li&gt;
&lt;li&gt;高性能，適合需要快速讀寫的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用場景&#34;&gt;使用場景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快取 (Cache)&lt;/strong&gt;&lt;br&gt;
儲存常用資料，減少長時間的 IO 操作，提升回應速度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共享會話 (Shared Session)&lt;/strong&gt;&lt;br&gt;
在無狀態 (stateless) 的伺服器間共享會話資料&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分散式鎖 (Distributed Lock)&lt;/strong&gt;&lt;br&gt;
用於多個程序共享資源時，透過 &lt;code&gt;SETNX&lt;/code&gt; (set if not exists) 實現原子性鎖定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速率限制 (Rate Limiter)&lt;/strong&gt;&lt;br&gt;
利用計數器 (increment) 和過期時間 (expiration) 實現請求限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;h3 id=&#34;啟動與連線&#34;&gt;啟動與連線&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis-server&lt;/code&gt;&lt;br&gt;
啟動 Redis 服務，預設埠為 6379&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;br&gt;
進入 Redis 命令列介面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料存取&#34;&gt;資料存取&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SET &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
設定鍵值對，預設值為字串類型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取指定鍵的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEL &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
刪除指定鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXISTS &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
檢查鍵是否存在&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KEYS &amp;lt;pattern&amp;gt;&lt;/code&gt;&lt;br&gt;
查找符合模式的鍵，例如 &lt;code&gt;KEYS *&lt;/code&gt; 可列出所有鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FLUSHALL&lt;/code&gt;&lt;br&gt;
清空所有資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;過期機制&#34;&gt;過期機制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TTL &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
查看鍵的剩餘存活時間，單位為秒
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;-1&amp;rdquo; 表示永不過期&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-2&amp;rdquo; 表示已過期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPIRE &amp;lt;key&amp;gt; &amp;lt;second&amp;gt;&lt;/code&gt;&lt;br&gt;
設定鍵的過期時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SETEX &amp;lt;key&amp;gt; &amp;lt;seconds&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
設定鍵值對並同時指定過期時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支援的資料結構&#34;&gt;支援的資料結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;列表 (List)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LPUSH/RPUSH &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
從左/右端推入值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LRANGE &amp;lt;key&amp;gt; &amp;lt;start index&amp;gt; &amp;lt;end index&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取指定範圍的值，&lt;code&gt;end index&lt;/code&gt; 可為 -1 表示到最後&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LPOP/RPOP &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
從左/右端彈出值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合 (Set)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SADD &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
加入值到集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMEMBERS &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
列出集合所有成員&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SREM &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
移除集合中的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;雜湊 (Hash)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HSET &amp;lt;key&amp;gt; &amp;lt;field&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
設定雜湊欄位的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HGET &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取指定欄位的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HGETALL &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br&gt;
獲取雜湊所有欄位與值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HDEL &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;br&gt;
刪除指定欄位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEXISTS &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;br&gt;
檢查欄位是否存在&lt;/li&gt;
&lt;li&gt;注意：Redis 不支援巢狀雜湊結構&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快取機制&#34;&gt;快取機制&lt;/h2&gt;
&lt;h3 id=&#34;常見快取策略&#34;&gt;常見快取策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cache Aside&lt;/strong&gt;&lt;br&gt;
先查詢快取，若無資料則查詢資料庫，並將結果存入快取&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read Through&lt;/strong&gt;&lt;br&gt;
用戶端僅存取快取，若快取無資料，由快取負責從資料庫取回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Through&lt;/strong&gt;&lt;br&gt;
寫入資料時，快取保留一份並同步寫入資料庫&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write Behind&lt;/strong&gt;&lt;br&gt;
與 Write Through 類似，但不會立即寫入資料庫，而是累積資料後批量寫入&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取情境問題與解法&#34;&gt;快取情境問題與解法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快取雪崩 (Cache Avalanche)&lt;/strong&gt;&lt;br&gt;
大量快取同時失效，導致資料庫瞬間承受高流量
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;br&gt;
為快取加上隨機過期時間，避免集中失效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快取擊穿 (Hotspot Invalid)&lt;/strong&gt;&lt;br&gt;
熱點快取失效，大量請求直接衝擊資料庫
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;br&gt;
設定熱點資料永不過期，或在查詢資料庫時加鎖控制流量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快取穿透 (Cache Penetration)&lt;/strong&gt;&lt;br&gt;
用戶請求不存在的資料，快取與資料庫皆無結果，直接衝擊資料庫
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;br&gt;
在應用層過濾非法請求，或使用布隆過濾器 (Bloom Filter) 預先檢查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;記憶體管理&#34;&gt;記憶體管理&lt;/h2&gt;
&lt;h3 id=&#34;過期鍵刪除策略&#34;&gt;過期鍵刪除策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定期刪除&lt;/strong&gt;&lt;br&gt;
每隔固定時間隨機抽樣檢查部分鍵，若過期則刪除&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;惰性刪除&lt;/strong&gt;&lt;br&gt;
訪問鍵時檢查是否過期，若過期則立即刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;記憶體淘汰策略-maxmemory-policy-eviction&#34;&gt;記憶體淘汰策略 (maxmemory-policy, Eviction)&lt;/h3&gt;
&lt;p&gt;當記憶體使用達到上限時，根據設定的策略處理資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;noeviction&lt;/strong&gt;&lt;br&gt;
不淘汰任何鍵，記憶體滿時拒絕新寫入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-lru&lt;/strong&gt;&lt;br&gt;
對所有鍵使用最近最少使用 (LRU) 算法淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-lfu&lt;/strong&gt;&lt;br&gt;
對所有鍵使用最不常用 (LFU) 算法淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-lru&lt;/strong&gt;&lt;br&gt;
僅對設有過期時間的鍵使用 LRU 淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-lfu&lt;/strong&gt;&lt;br&gt;
僅對設有過期時間的鍵使用 LFU 淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;allkeys-random&lt;/strong&gt;&lt;br&gt;
從所有鍵中隨機淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-random&lt;/strong&gt;&lt;br&gt;
從設有過期時間的鍵中隨機淘汰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile-ttl&lt;/strong&gt;&lt;br&gt;
優先淘汰剩餘存活時間 (TTL) 較短的鍵&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;持久化&#34;&gt;持久化&lt;/h2&gt;
&lt;h3 id=&#34;rdb-redis-database&#34;&gt;RDB (Redis Database)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以固定時間間隔對記憶體中的資料進行快照 (memory dump)&lt;/li&gt;
&lt;li&gt;優點：恢復速度快，適合大規模資料備份&lt;/li&gt;
&lt;li&gt;缺點：若伺服器故障，可能丟失最後一次快照後的資料&lt;/li&gt;
&lt;li&gt;相關命令
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SAVE&lt;/code&gt;&lt;br&gt;
同步生成快照，會阻塞主進程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BGSAVE&lt;/code&gt;&lt;br&gt;
異步生成快照，不影響主進程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof-append-only-file&#34;&gt;AOF (Append Only File)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;記錄每一次寫入操作的流程，類似操作日誌&lt;/li&gt;
&lt;li&gt;優點：資料一致性高，丟失風險低&lt;/li&gt;
&lt;li&gt;缺點：檔案較大，恢復速度比 RDB 慢&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AOF 重寫 (Rewrite)&lt;/strong&gt;&lt;br&gt;
當 AOF 檔案過大時，Redis 會生成新檔案，&lt;br&gt;
用最少的操作重建當前資料狀態，取代舊檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;混合模式&#34;&gt;混合模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;結合 RDB 和 AOF 優勢&lt;/li&gt;
&lt;li&gt;在 AOF 重寫時，前段使用 RDB 格式快照，後段附加 AOF 操作日誌&lt;/li&gt;
&lt;li&gt;兼顧恢復速度與資料完整性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高可用性-high-availability&#34;&gt;高可用性 (High Availability)&lt;/h2&gt;
&lt;h3 id=&#34;主從同步&#34;&gt;主從同步&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一主多從架構，主節點負責寫入，從節點分擔讀取壓力&lt;/li&gt;
&lt;li&gt;從節點會即時同步主節點的資料&lt;/li&gt;
&lt;li&gt;提升讀取效能，但主節點故障需手動切換&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哨兵模式-sentinel&#34;&gt;哨兵模式 (Sentinel)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;部署哨兵進程監控主從伺服器的運行狀態&lt;/li&gt;
&lt;li&gt;哨兵持續 Ping 伺服器，檢測異常&lt;/li&gt;
&lt;li&gt;若為哨兵叢集：
&lt;ul&gt;
&lt;li&gt;單一哨兵檢測異常時，標記伺服器為主觀下線&lt;/li&gt;
&lt;li&gt;多數哨兵同意後，判定為客觀下線，觸發故障轉移 (failover)&lt;/li&gt;
&lt;li&gt;自動選出新主節點，確保服務可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;叢集模式-cluster&#34;&gt;叢集模式 (Cluster)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將資料分片儲存，分散寫入壓力&lt;/li&gt;
&lt;li&gt;Redis 預設提供 16384 個槽 (slot)，透過雜湊函數分配鍵到不同槽&lt;/li&gt;
&lt;li&gt;節點間使用預設埠 16379 進行通訊&lt;/li&gt;
&lt;li&gt;可結合主從同步實現高可用性&lt;/li&gt;
&lt;li&gt;適用於大規模資料與高併發場景&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
