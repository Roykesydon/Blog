<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cache on Roykesydon</title>
        <link>https://roykesydon.github.io/Blog/tags/cache/</link>
        <description>Recent content in cache on Roykesydon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 21 Jul 2024 00:00:17 +0800</lastBuildDate><atom:link href="https://roykesydon.github.io/Blog/tags/cache/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Database 一般筆記</title>
        <link>https://roykesydon.github.io/Blog/p/database-%E4%B8%80%E8%88%AC%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sun, 21 Jul 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-%E4%B8%80%E8%88%AC%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;database-internal&#34;&gt;Database internal&lt;/h2&gt;
&lt;h3 id=&#34;storage-concept&#34;&gt;Storage concept&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Table&lt;/li&gt;
&lt;li&gt;Row_id
&lt;ul&gt;
&lt;li&gt;多數 database 會維護自己的 row_id&lt;/li&gt;
&lt;li&gt;也叫做 tuple id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page
&lt;ul&gt;
&lt;li&gt;多個 row 會被存在一個 page&lt;/li&gt;
&lt;li&gt;讀取不會只讀一個 row，而是一個或多個 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IO
&lt;ul&gt;
&lt;li&gt;IO operation 指的是存取 disk 的操作&lt;/li&gt;
&lt;li&gt;一個 IO 可能會獲得多個 page，也可能只是用 cache 的資料&lt;/li&gt;
&lt;li&gt;Database 常常會利用 cache 來減少 IO
&lt;ul&gt;
&lt;li&gt;因此有些 query 很快，可能是因為有快取資料可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heap data structure
&lt;ul&gt;
&lt;li&gt;儲存整個 table 的資料&lt;/li&gt;
&lt;li&gt;有些 database 會用 clustered index 來儲存，就不會有 heap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Index data structure (b-tree)
&lt;ul&gt;
&lt;li&gt;一個有 pointer 來指向 heap 的資料結構
&lt;ul&gt;
&lt;li&gt;較流行的是 b-tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以對一個或多個 column 做 index&lt;/li&gt;
&lt;li&gt;index 可以告訴你要查詢的資料在哪個 page&lt;/li&gt;
&lt;li&gt;index 也會被儲存在 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;row-oriented-vs-column-oriented&#34;&gt;Row-oriented vs Column-oriented&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Row-oriented database (row store)
&lt;ul&gt;
&lt;li&gt;每個 row 接著下個 row 來儲存&lt;/li&gt;
&lt;li&gt;每次 IO 會獲得多個 row，每個都有所有的 column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Col-oriented database (column store)
&lt;ul&gt;
&lt;li&gt;每個 column 接著下個 column 來儲存&lt;/li&gt;
&lt;li&gt;比較好壓縮，也比較好做 aggregation，所以在一些分析資料的軟體會用到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;B-tree
&lt;ul&gt;
&lt;li&gt;Balanced data structure for fast search&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;node 中的 element 同時存了 key 和 value&lt;/li&gt;
&lt;li&gt;range query 效率很差，因為要各別 random access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B+Tree
&lt;ul&gt;
&lt;li&gt;B-tree 的變形，和 B-tree 很像，不過 internal node 只存放 key，只有 leaf node 會存放 value
&lt;ul&gt;
&lt;li&gt;internal node 因為現在只需要儲存 key，element size 比較小，所以可以存放更多 element&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;leaf node 會用 linked list 串起來
&lt;ul&gt;
&lt;li&gt;適合 range query&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常一個 node 是一個 DBMS page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LSM-tree
&lt;ul&gt;
&lt;li&gt;Log-Structured Merge-Tree&lt;/li&gt;
&lt;li&gt;都加在尾端，不會覆蓋原本的資料，對 SSD 有利&lt;/li&gt;
&lt;li&gt;B-Tree 為了平衡會頻繁修改&lt;/li&gt;
&lt;li&gt;有利於 insert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fragmentation&#34;&gt;Fragmentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這裡是以 database 為出發點去看 fragmentation&lt;/li&gt;
&lt;li&gt;Internal fragmentation
&lt;ul&gt;
&lt;li&gt;一個 Page 中有很多空間是空的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;External fragmentation
&lt;ul&gt;
&lt;li&gt;多個 Page 存放不是連續的。剩下的空間夠儲存新的資料，但是因為不連續，所以不能用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;database-cursor&#34;&gt;Database cursor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當資料庫有很大的結果集時，不可能一次把所有資料用網路傳給 client，用戶也沒有 memory 來存放所有資料&lt;/li&gt;
&lt;li&gt;Server side / client side cursor
&lt;ul&gt;
&lt;li&gt;Server side
&lt;ul&gt;
&lt;li&gt;一次只傳一部分資料給 client&lt;/li&gt;
&lt;li&gt;但是要多次往返可能最後總時間會比較久&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client side
&lt;ul&gt;
&lt;li&gt;一次把所有資料傳給 client&lt;/li&gt;
&lt;li&gt;client 自己分批處理&lt;/li&gt;
&lt;li&gt;對 network bandwidth 要求較大&lt;/li&gt;
&lt;li&gt;可能沒有足夠的 memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;partitioning&#34;&gt;Partitioning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把大 table 分成多個小 table&lt;/li&gt;
&lt;li&gt;Vertical vs Horizontal
&lt;ul&gt;
&lt;li&gt;Vertical
&lt;ul&gt;
&lt;li&gt;根據 columns 拆成多個 partition&lt;/li&gt;
&lt;li&gt;可以把不太常用又大的 column (比如 blob) 放到另外一個 partition
&lt;ul&gt;
&lt;li&gt;可以把他放在較慢的 disk，保留其他常存取的 column 在 SSD&lt;/li&gt;
&lt;li&gt;也可以讓比較不常用的資料比較不容易進入 cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Horizontal
&lt;ul&gt;
&lt;li&gt;把 rows 拆成多個 partition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點
&lt;ul&gt;
&lt;li&gt;用 single query 存取單一 partition 的速度更快&lt;/li&gt;
&lt;li&gt;對某些 sequential scan 有幫助&lt;/li&gt;
&lt;li&gt;可以把舊資料放在比較便宜的設備&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺點
&lt;ul&gt;
&lt;li&gt;如果要從一個 partition 移動資料到另一個 partition，效率很慢&lt;/li&gt;
&lt;li&gt;對於效率很差的 query，可能會需要 scan 所有 partition，此時比掃描整個沒做 partition 的 table 還要慢&lt;/li&gt;
&lt;li&gt;partition 可能會 unbalance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;database-indexing&#34;&gt;Database indexing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果需要搜索的欄位沒做 index，那麼就會需要 scan 整個 table，直到找到
&lt;ul&gt;
&lt;li&gt;如果要求欄位做 &lt;code&gt;like&lt;/code&gt; 之類的，那麼依然需要 scan 整個 table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;搜索方法
&lt;ul&gt;
&lt;li&gt;table scan
&lt;ul&gt;
&lt;li&gt;如果掃描的範圍過大，Database 可能就會選擇該方法&lt;/li&gt;
&lt;li&gt;通常會用 parallel 的方式搜尋，所以還是會快一些&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index scan&lt;/li&gt;
&lt;li&gt;Index-only scan
&lt;ul&gt;
&lt;li&gt;也叫 covering index&lt;/li&gt;
&lt;li&gt;需要的欄位在 index 裡面就有了，在這種情況不用去 heap 取，可以加速很多&lt;/li&gt;
&lt;li&gt;但也要小心使 index 變得過大。如果 memory 不夠，又會用到 disk，拖垮效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;non-key column
&lt;ul&gt;
&lt;li&gt;可以用 include 把一些常常需要一起帶入的資訊放到 index 裡面&lt;/li&gt;
&lt;li&gt;可以促成 index-only scan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;composite index
&lt;ul&gt;
&lt;li&gt;把多個 col 作為 key 做 index&lt;/li&gt;
&lt;li&gt;在 PostgreSQL ，如果有一個 index 是 (a, b)，用靠左的 index 可以做 index scan，但是用靠右的就不行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clustered-index&#34;&gt;Clustered index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;也叫做 Index-Organized Table
&lt;ul&gt;
&lt;li&gt;資料圍繞 index 來組織&lt;/li&gt;
&lt;li&gt;這也是為什麼 clustered index 只能有一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒特別指定的話，primary key 一般是 clustered index&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;primary-key-vs-secondary-key&#34;&gt;Primary key vs Secondary key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;primary key
&lt;ul&gt;
&lt;li&gt;clusering
&lt;ul&gt;
&lt;li&gt;把 table 圍繞 primary key 來組織，但也有些 Database 不是這樣設計，比如 PostgreSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要維持 order，但是如果我要根據 PK 取得小範圍內的資料，和不顧排序相比，就可能不用多次 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Secondary key
&lt;ul&gt;
&lt;li&gt;不在乎原本 table 的 order，而是根據自訂的 key 來排序&lt;/li&gt;
&lt;li&gt;但是會有另外一個結構去放 index，可以找到 row_id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設計差異
&lt;ul&gt;
&lt;li&gt;PostgreSQL 的 index 都指向 row，不管是 primary 還是 secondary
&lt;ul&gt;
&lt;li&gt;這樣 secondary index 就可以直接取資料，不用再跳一層 primary key&lt;/li&gt;
&lt;li&gt;但是如果更新 row，會更新 row id，連帶影響要更新所有 secondary index，不管修改的欄位有沒有在這 index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MySQL 的 secondary index 指向 primary key，primary key 指向 row
&lt;ul&gt;
&lt;li&gt;這樣 secondary index 就要先找到 primary key，再找到 row&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;distributed-database&#34;&gt;Distributed database&lt;/h2&gt;
&lt;h3 id=&#34;sharding&#34;&gt;Sharding&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把 table 拆成多個 table，分散在不同的 database&lt;/li&gt;
&lt;li&gt;分散式會帶來很多問題，比如要怎麼做 transaction 和 join?&lt;/li&gt;
&lt;li&gt;Horizontal partitioning vs sharding
&lt;ul&gt;
&lt;li&gt;Horizontal partitioning
&lt;ul&gt;
&lt;li&gt;一個 table 拆成多個 table，但是還是在同一個 database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 Horizontal partitioning 的差別
&lt;ul&gt;
&lt;li&gt;table 現在會分到不同的 database server&lt;/li&gt;
&lt;li&gt;做 partition，client 不用管資料具體在哪個 partition，交給 DBMS 去處理。但是 sharding 就要 client 自己去處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;database-replication&#34;&gt;Database replication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;透過 redundancy 來提高 reliability, tolerance, accessibility&lt;/li&gt;
&lt;li&gt;Master / Backup replication
&lt;ul&gt;
&lt;li&gt;也叫 master-slave replication&lt;/li&gt;
&lt;li&gt;只有一個 master / leader，有一或多個 backup / standby&lt;/li&gt;
&lt;li&gt;一寫多讀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-master replication
&lt;ul&gt;
&lt;li&gt;多個 master，可以同時寫入&lt;/li&gt;
&lt;li&gt;需要處理 conflict&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sychronous vs Asynchronous replication
&lt;ul&gt;
&lt;li&gt;Synchronous
&lt;ul&gt;
&lt;li&gt;transaction 會被 blocked，直到所有的 backup 都寫入&lt;/li&gt;
&lt;li&gt;有些 database 可以設定 First N 或是 any 完成就好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous
&lt;ul&gt;
&lt;li&gt;transaction 被寫入 master 後就算完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;concurrency-control&#34;&gt;Concurrency control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;strategy
&lt;ul&gt;
&lt;li&gt;pessimistic
&lt;ul&gt;
&lt;li&gt;用各種 lock 來保證 isolation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;optimistic
&lt;ul&gt;
&lt;li&gt;不用 lock，真的有 transaction 衝突時就 fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lock
&lt;ul&gt;
&lt;li&gt;shared vs exclusive
&lt;ul&gt;
&lt;li&gt;shared lock 可以被多個 transaction 同時持有
&lt;ul&gt;
&lt;li&gt;用在讀取，所以可以多個 transaction 同時讀取&lt;/li&gt;
&lt;li&gt;在有 shared lock  的條件下，其他 transaction 也可以設置 shared lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;exclusive lock 只能被一個 transaction 持有
&lt;ul&gt;
&lt;li&gt;他人不能讀取或寫入&lt;/li&gt;
&lt;li&gt;PostgreSQL 有一個 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 來取得 exclusive lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當涉及的資料持有其中一種 lock 時，其他 transaction 都不能設置另外一種 lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deadlock
&lt;ul&gt;
&lt;li&gt;多個 transaction 互相等待對方釋放 lock&lt;/li&gt;
&lt;li&gt;多數 DBMS 會檢查 deadlock，並讓最後一個造成 deadlock 的 transaction rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two-phase locking (2PL)
&lt;ul&gt;
&lt;li&gt;DBMS 為了實現 isolation 需要保證 conflict serializability (CSR)，2PL 可以保證這一點&lt;/li&gt;
&lt;li&gt;two-phase
&lt;ul&gt;
&lt;li&gt;growing phase
&lt;ul&gt;
&lt;li&gt;取得 lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shrinking phase
&lt;ul&gt;
&lt;li&gt;釋放 lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;強調一個 transaction 不能釋放 lock 後就再也無法取得&lt;/li&gt;
&lt;li&gt;有可能造成 deadlock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;database-engine&#34;&gt;Database Engine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;也叫 storage engine 或 embedded database&lt;/li&gt;
&lt;li&gt;負責處理 CRUD 的 library&lt;/li&gt;
&lt;li&gt;DBMS 基於 engine 來提供更多功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;orm&#34;&gt;ORM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Eager vs Lazy loading
&lt;ul&gt;
&lt;li&gt;Eager
&lt;ul&gt;
&lt;li&gt;一次把所有相關的資料都讀取出來&lt;/li&gt;
&lt;li&gt;如果 Teacher 有很多 Student，可能會一次把所有 Student 都讀取出來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lazy
&lt;ul&gt;
&lt;li&gt;只有在需要的時候才讀取&lt;/li&gt;
&lt;li&gt;但是可能會有很多次 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open session in view (OSIV)
&lt;ul&gt;
&lt;li&gt;一個 request 一個 database session&lt;/li&gt;
&lt;li&gt;可以配合 lazy loading 來用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N+1 problem
&lt;ul&gt;
&lt;li&gt;一個 query 取得所有資料，然後再用每個資料的 id 來取得相關資料&lt;/li&gt;
&lt;li&gt;這樣就會有 N+1 次 IO
&lt;ul&gt;
&lt;li&gt;第一次是從主表拿清單&lt;/li&gt;
&lt;li&gt;接下來 N 次是從子表拿資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;盡量不要使用 offset
&lt;ul&gt;
&lt;li&gt;最 naive 的實現 pagination 的做法就是用 offset + limit。但是 offset 代表讀取並丟掉前面幾筆資料，所以他會多讀一堆沒用的資料&lt;/li&gt;
&lt;li&gt;可以讓用戶那邊保存 id，where 設置 id 要大於多少來規避 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connection pool
&lt;ul&gt;
&lt;li&gt;維護一定數量的連接，避免每次都要建立連接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Idempotency key
&lt;ul&gt;
&lt;li&gt;用來確保一個 request 只會被執行一次&lt;/li&gt;
&lt;li&gt;會生成一個唯一的 key，並且在 request 中帶上這個 key。執行操作後會把這個 key 存起來，下次再收到這個 key 時就不會再執行操作&lt;/li&gt;
&lt;li&gt;可以用 ULID 而不用 UUID，因為 ULID 前面的 bit 有時間戳，可以用來排序
&lt;ul&gt;
&lt;li&gt;輸入的資料集中在相近的 page，還都加在尾端，可以減少 IO (相較隨機的 UUID)
&lt;ul&gt;
&lt;li&gt;不用被迫頻繁存取 disk。而且 UUID 的隨機性拉一堆 page 會導致 buffer 更容易被塞滿，而得強制寫入 disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;consistent hashing
&lt;ul&gt;
&lt;li&gt;把 hash function 的結果分散在一個 hash ring 上
&lt;ul&gt;
&lt;li&gt;根據 hash function 的結果，看自己落在哪段範圍，配給指定的 server&lt;/li&gt;
&lt;li&gt;這樣的好處是追加或是移除 server 時，只會影響一台 server 的資料&lt;/li&gt;
&lt;li&gt;也可以追加到負載比較高的 server 附近&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write amplification
&lt;ul&gt;
&lt;li&gt;寫入資料時，發現 disk 寫入的資料比你預期寫入的資料多很多&lt;/li&gt;
&lt;li&gt;分很多不同 level，通常是在說 SSD 造成的&lt;/li&gt;
&lt;li&gt;想更新的時候，更新的 page 會被標記為不能使用。會有另外一隻非同步程式定期處理這種
&lt;ul&gt;
&lt;li&gt;但是他會把整個 block 寫到新的地方，再把原地方設為 free，就為了那些不能再被使用的空間搬整個 block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Redis</title>
        <link>https://roykesydon.github.io/Blog/p/redis/</link>
        <pubDate>Mon, 05 Jun 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/redis/</guid>
        <description>&lt;h2 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Cache
&lt;ul&gt;
&lt;li&gt;把常用的資料回傳，省略長時間的 IO 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared Session
&lt;ul&gt;
&lt;li&gt;在 stateless server 間共享 session&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed lock
&lt;ul&gt;
&lt;li&gt;用在程式間想共用某種資源的時候&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;setnx&lt;/code&gt; (set if not exists)
&lt;ul&gt;
&lt;li&gt;atomic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rate Limiter
&lt;ul&gt;
&lt;li&gt;用 increment 和 expiration 實現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;快取常見策略&#34;&gt;快取常見策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cache aside
&lt;ul&gt;
&lt;li&gt;先問 cache，沒有的話再問 db，並把 db 回傳的資料放到 cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read through
&lt;ul&gt;
&lt;li&gt;client 只能存取到 cache，如果沒資料，cache 會去 db 拿資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write through
&lt;ul&gt;
&lt;li&gt;client 寫資料時，cache 會留一份資料，並把資料寫到 db&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write behind
&lt;ul&gt;
&lt;li&gt;和 write through 很像，但是不會立即寫到 db，會等到有更多的資料時，才一次寫到 db&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feature&#34;&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;In-memory&lt;/li&gt;
&lt;li&gt;Key-Value&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-command&#34;&gt;Basic Command&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis-server&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;default port: 6379&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;access-data&#34;&gt;Access data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pretty much everything stored in Redis is going to be a type of string by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;del &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exists &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keys &amp;lt;pattern&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find keys with certain pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keys *&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;get all keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flushall&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get rid of everything&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;expiration&#34;&gt;Expiration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ttl &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show time to live
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;-1&amp;rdquo; for no expiration&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-2&amp;rdquo; already expired&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expire &amp;lt;key&amp;gt; &amp;lt;second&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setex &amp;lt;key&amp;gt; &amp;lt;seconds&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set with expiration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data Structure&lt;/h3&gt;
&lt;h4 id=&#34;list&#34;&gt;List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lpush/rpush &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lrange &amp;lt;key&amp;gt; &amp;lt;start index&amp;gt; &amp;lt;end index&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;end index&amp;gt;&lt;/code&gt; can be -1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lpop/rpop &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sadd &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smembers &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;srem &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;remove&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hash&#34;&gt;Hash&lt;/h4&gt;
&lt;p&gt;Key-value in Key-value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hset &amp;lt;key&amp;gt; &amp;lt;field&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hget &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hgetall &amp;lt;key&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;get everything about &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hdel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexists &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Redis doesn&amp;rsquo;t support nested hash struct&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;刪除過期-key&#34;&gt;刪除過期 key&lt;/h2&gt;
&lt;h3 id=&#34;定期刪除&#34;&gt;定期刪除&lt;/h3&gt;
&lt;p&gt;在固定間隔時間隨機抽 key 檢查並刪除&lt;/p&gt;
&lt;h3 id=&#34;惰性刪除&#34;&gt;惰性刪除&lt;/h3&gt;
&lt;p&gt;在訪問 key 的時候發現過期就刪除&lt;/p&gt;
&lt;h2 id=&#34;maxmemory-policy-eviction&#34;&gt;maxmemory-policy (Eviction)&lt;/h2&gt;
&lt;p&gt;可以設定這些 policy，在記憶體依然額滿的情況下做對應的處理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;noeviction&lt;/li&gt;
&lt;li&gt;allkeys-lru&lt;/li&gt;
&lt;li&gt;allkeys-lfu&lt;/li&gt;
&lt;li&gt;volatile-lru&lt;/li&gt;
&lt;li&gt;volatile-lfu&lt;/li&gt;
&lt;li&gt;allkeys-random&lt;/li&gt;
&lt;li&gt;volatile-random&lt;/li&gt;
&lt;li&gt;volatile-ttl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快取情境問題&#34;&gt;快取情境問題&lt;/h2&gt;
&lt;h3 id=&#34;快取雪崩-cache-avalanche&#34;&gt;快取雪崩 Cache Avalanche&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某個時刻大量 cache 失效，使資料庫需要承擔很大的流量。&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;幫 cache 加上額外的隨機過期時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取擊穿-hotspot-invalid&#34;&gt;快取擊穿 Hotspot Invalid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某個 hotspot 的 cache 失效，使大量請求跑到資料庫&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;讓 hotspot 永不過期&lt;/li&gt;
&lt;li&gt;查詢資料庫的部分加上 lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取穿透-cache-penetration&#34;&gt;快取穿透 Cache Penetration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;client request 不存在的資料，因為同時不存在於 cache 和資料庫中，所以直接跑到資料庫&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;在 application 先過濾掉非法請求&lt;/li&gt;
&lt;li&gt;Bloom Filter 布隆過濾器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;persistence&#34;&gt;Persistence&lt;/h2&gt;
&lt;h3 id=&#34;rdb&#34;&gt;RDB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;固定時間對所有資料做快照，memory dump 出來&lt;/li&gt;
&lt;li&gt;recovery 比 AOF 快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt;、&lt;code&gt;bgsave&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof&#34;&gt;AOF&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;紀錄操作流程&lt;/li&gt;
&lt;li&gt;檔案比較肥&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rewrite&#34;&gt;Rewrite&lt;/h4&gt;
&lt;p&gt;當 AOF 太大，Redis 會生一個新文件取代舊的，用最少操作生出目前的資料&lt;/p&gt;
&lt;h3 id=&#34;混合&#34;&gt;混合&lt;/h3&gt;
&lt;p&gt;在 AOF 重寫的時候也利用 RDB
前面是 RDB，後面是 AOF&lt;/p&gt;
&lt;h2 id=&#34;availability&#34;&gt;Availability&lt;/h2&gt;
&lt;h3 id=&#34;主從同步&#34;&gt;主從同步&lt;/h3&gt;
&lt;p&gt;一主多從，把讀取壓力分擔到 slave 上&lt;/p&gt;
&lt;h3 id=&#34;哨兵模式-sentinel&#34;&gt;哨兵模式 Sentinel&lt;/h3&gt;
&lt;p&gt;會有哨兵不斷地 Ping 主從伺服器，確認是否有異常&lt;/p&gt;
&lt;p&gt;如果哨兵是集群，有哨兵檢測到異常，會判斷某伺服器主觀下線，當有一定數量的哨兵投票認為伺服器不可能用，就會變成客觀下線，進行 failover&lt;/p&gt;
&lt;h3 id=&#34;cluster&#34;&gt;Cluster&lt;/h3&gt;
&lt;p&gt;分擔寫入壓力&lt;/p&gt;
&lt;p&gt;Redis 有 16384 個 slot，透過 hash 分配 key 到不同的 slot&lt;/p&gt;
&lt;p&gt;預設會另外用 port 16379 來讓節點間溝通&lt;/p&gt;
&lt;p&gt;可以混和主從同步達到高可用&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
