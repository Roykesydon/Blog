<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Roykesydon</title>
        <link>https://roykesydon.github.io/Blog/</link>
        <description>Recent content on Roykesydon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 22 Mar 2023 01:08:46 +0800</lastBuildDate><atom:link href="https://roykesydon.github.io/Blog/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>RoBERTa 論文閱讀</title>
        <link>https://roykesydon.github.io/Blog/p/roberta-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</link>
        <pubDate>Wed, 22 Mar 2023 01:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/roberta-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</guid>
        <description>&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/1907.11692&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RoBERTa: A Robustly Optimized BERT Pretraining Approach&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;██████╗  ██████╗ ██████╗ ███████╗██████╗ ████████╗ █████╗ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;██╔══██╗██╔═══██╗██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔══██╗
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;██████╔╝██║   ██║██████╔╝█████╗  ██████╔╝   ██║   ███████║
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;██╔══██╗██║   ██║██╔══██╗██╔══╝  ██╔══██╗   ██║   ██╔══██║
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;██║  ██║╚██████╔╝██████╔╝███████╗██║  ██║   ██║   ██║  ██║
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;發現 BERT 訓練不足，並且作者的模型在 4/9 的 GLUE 任務, RACE 和 SQuAD 取得 SOTA。&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;自監督的訓練方法帶來了顯著的性能提升，但要確定這一堆方法中的哪些方面貢獻最大，具備挑戰性。&lt;/p&gt;
&lt;p&gt;訓練的計算量是昂貴的，使 fine-tune 受限，而且通常都是用不同大小的 private training data，使評估模型更加困難。&lt;/p&gt;
&lt;p&gt;作者提出了對 BERT 預訓練的 replication study，包括對超參數的調整，以及對訓練集大小的仔細評估。&lt;/p&gt;
&lt;p&gt;作者發現 BERT 訓練不足，並提出了一種改進方法，稱為 RoBERTa，可以達到或超過所有 post-BERT 的方法。&lt;/p&gt;
&lt;p&gt;修改如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;訓練模型的時間更長，batch 更大，用更多 data&lt;/li&gt;
&lt;li&gt;移除 next sentence prediction objective&lt;/li&gt;
&lt;li&gt;訓練更長的序列&lt;/li&gt;
&lt;li&gt;動態地改變用於訓練資料的 masking pattern&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;貢獻:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提出一組重要的 BERT 設計選擇和訓練策略&lt;/li&gt;
&lt;li&gt;使用了新的 dataset，叫做 CCNEWS，並證明用更多的資料來預訓練，可以提高下游任務的表現&lt;/li&gt;
&lt;li&gt;訓練表明，在正確的設計選擇下，pretrained masked language model 和其他最近的方法比，具有競爭力&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;對 BERT 做回顧&lt;/p&gt;
&lt;h3 id=&#34;architecture&#34;&gt;Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;L layers&lt;/li&gt;
&lt;li&gt;A self-attention heads&lt;/li&gt;
&lt;li&gt;H hidden dimension&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;training-objectives&#34;&gt;Training Objectives&lt;/h3&gt;
&lt;p&gt;預訓練的時候，BERT 有兩個目標: masked language modeling 和 next sentence prediction&lt;/p&gt;
&lt;h4 id=&#34;masked-language-model-mlm&#34;&gt;Masked Language Model (MLM)&lt;/h4&gt;
&lt;p&gt;BERT 隨機選擇 15% 的 token 進行可能的替換&lt;/p&gt;
&lt;p&gt;80% 換成 [MASK]，10% 保持不變，10% 被選為一個隨便的 vocabulary token&lt;/p&gt;
&lt;h4 id=&#34;next-sentence-prediction-nsp&#34;&gt;Next Sentence Prediction (NSP)&lt;/h4&gt;
&lt;p&gt;分類第二句是不是下一句，是二元分類。&lt;/p&gt;
&lt;p&gt;正例由提取連續的句子產生，負例由不同的片段配對產生。&lt;/p&gt;
&lt;p&gt;正例和負例以相等機率產生。&lt;/p&gt;
&lt;h4 id=&#34;optimization&#34;&gt;Optimization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Adam&lt;/li&gt;
&lt;li&gt;$\beta_1$ = 0.9, $\beta_2$ = 0.999, $\epsilon$ = 1e-6&lt;/li&gt;
&lt;li&gt;$L_2$ weight decay of 0.01&lt;/li&gt;
&lt;li&gt;Learning rate 前 10,000 step warm up 到 1e-4，然後 linear decay&lt;/li&gt;
&lt;li&gt;全部的 layer 和 attention weight 都 dropout 0.1&lt;/li&gt;
&lt;li&gt;GELU 激活函數&lt;/li&gt;
&lt;li&gt;1,000,000 次 update，batch size 256，序列長度 512&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;data&#34;&gt;Data&lt;/h4&gt;
&lt;p&gt;BERT 在 BookCorpus 和 English Wikipedia 混和的資料集上訓練，共有 16GB 的未壓縮文本&lt;/p&gt;
&lt;h2 id=&#34;experimental-setup&#34;&gt;Experimental Setup&lt;/h2&gt;
&lt;p&gt;描述對於 BERT 的 replication study 的實驗設置&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;作者用 FAIRSEQ 重新實現了 BERT。&lt;/p&gt;
&lt;p&gt;主要遵循 [Background-Optimization] 中的 BERT 原始超參數，但 peak learning rate 和 warmup step 除外，他們針對每個設置單獨調整。&lt;/p&gt;
&lt;p&gt;作者發現訓練對 Adam epsilon 非常敏感。&lt;/p&gt;
&lt;p&gt;作者發現設置 $\beta_2$ = 0.98，在大 batch size 的情況下，可以提高訓練時的穩定性。&lt;/p&gt;
&lt;p&gt;用最多 512 個 token 預訓練。&lt;/p&gt;
&lt;p&gt;作者不會隨機注入短序列，也不會為前 90% 的更新縮短輸入的長度。&lt;/p&gt;
&lt;p&gt;作者只訓練 full-length 的 sequences。&lt;/p&gt;
&lt;h3 id=&#34;data-1&#34;&gt;Data&lt;/h3&gt;
&lt;p&gt;BERT-style 的預訓練仰賴大量文本。&lt;/p&gt;
&lt;p&gt;已有研究證明增加數據量可以提高 end-task 的性能。&lt;/p&gt;
&lt;p&gt;已有一些研究，用比原始 BERT 更多樣更大的數據集，但不是所有的數據集都有公開。&lt;/p&gt;
&lt;p&gt;本研究用了五個不同大小和領域的英文文本，共有超過 160 GB 的未壓縮文本。&lt;/p&gt;
&lt;p&gt;使用以下數據集:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BookCorpus + English Wikipedia
&lt;ul&gt;
&lt;li&gt;BERT 原本使用的。&lt;/li&gt;
&lt;li&gt;16 GB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CC-News
&lt;ul&gt;
&lt;li&gt;作者從 CommonCrawl News dataset 的英文部分中蒐集，包含了 2016 年 9 月到 2019 年 2 月的 6300 萬篇英文新聞。&lt;/li&gt;
&lt;li&gt;過濾後有 76 GB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenWebText
&lt;ul&gt;
&lt;li&gt;WebText 的開源重建版，從 Reddit 上至少有 3 個 upvotes 的 shared URLs 提取出的 Web 內容。&lt;/li&gt;
&lt;li&gt;38 GB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stories
&lt;ul&gt;
&lt;li&gt;包含 CommonCrawl data 的一個子集合，經過過濾，以匹配 story-like style of Winograd schemas&lt;/li&gt;
&lt;li&gt;31 GB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;evaluation&#34;&gt;Evaluation&lt;/h3&gt;
&lt;p&gt;使用以下三個 benchmarks 評估預訓練模型&lt;/p&gt;
&lt;h4 id=&#34;glue&#34;&gt;GLUE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The General Language Understanding Evaluation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用於評估自然語言理解的 9 個數據集的集合，任務被定義為 single-sentence 分類或 sentence-pair 分類任務。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;finetune 的流程遵循原始 BERT paper&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;squad&#34;&gt;SQuAD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Stanford Question Answering Dataset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供一段 context 以及一個問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有兩個版本 V1.1 和 V2.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;V1.1
&lt;ul&gt;
&lt;li&gt;context 總是包含一個答案&lt;/li&gt;
&lt;li&gt;評估 V1.1 的時候，作者採用和 BERT 相同的 span prediction method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;V2.0
&lt;ul&gt;
&lt;li&gt;一些問題在提供的 context 中沒有回答，使任務更有挑戰性&lt;/li&gt;
&lt;li&gt;評估 V2.0 的時候，作者會用一個額外的二元分類器預測問題是否可以回答，在評估的時候，只預測被分類為可回答的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;race&#34;&gt;RACE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The ReAding Comprehension from Examinations&lt;/li&gt;
&lt;li&gt;大型閱讀理解數據集，有超過 28,000 篇文章 以及將近 100,000 個問題&lt;/li&gt;
&lt;li&gt;從中國的英文考試蒐集的，這些考試是為國中生和高中生設計的&lt;/li&gt;
&lt;li&gt;每篇文章都與多個問題相關聯&lt;/li&gt;
&lt;li&gt;對每個問題，要從四個選項中選出一個對的&lt;/li&gt;
&lt;li&gt;context 比起其他閱讀理解的數據集要長，而且要推理的問題比例很大&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;training-procedure-analysis&#34;&gt;Training Procedure Analysis&lt;/h2&gt;
&lt;p&gt;探討哪些選擇對成功預訓練 BERT 很重要。&lt;/p&gt;
&lt;p&gt;作者把架構固定，也就是訓練和$BERT_{BASE}$ (L=12, H=768, A=12, 110M params)一樣架構的 BERT models&lt;/p&gt;
&lt;h3 id=&#34;static-vs-dynamic-masking&#34;&gt;Static vs. Dynamic Masking&lt;/h3&gt;
&lt;p&gt;BERT 在 preprocessing 的時候處理 masking，產生單個 static mask。
作者為了避免在每個 epoch 都對每個 instance 用相同的 mask，將數據複製了 10 次，在 40 個 epochs 裡，以 10 種不同的方式 mask。所以一次訓練過程中，相同的 mask 會出現四次。&lt;/p&gt;
&lt;p&gt;作者會以上述策略和 Dynamic masking 進行比較，Dynamic masking 是在每次餵 model 前，才生成 mask。&lt;/p&gt;
&lt;p&gt;作者發現 Dynamic Masking 相比 static，要不是差不多，就是略好，基於結果和效率的優勢考量，其他實驗中都用 dynamic masking。&lt;/p&gt;
&lt;h3 id=&#34;model-input-format-and-next-sentence-prediction&#34;&gt;Model Input Format and Next Sentence Prediction&lt;/h3&gt;
&lt;p&gt;原始的 BERT 預訓練中，兩個句子要不是同一個文件的連續句子(p = 0.5)，不然就是不同的 document 做採樣&lt;/p&gt;
&lt;p&gt;以往有研究指出移除 NSP 會損害性能，但也有研究質疑必要性，所以本文比較了幾種替代訓練格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEGMENT-PAIR+NSP
&lt;ul&gt;
&lt;li&gt;最原始的方法，每個 segment 可以有多個自然句子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SENTENCE-PAIR+NSP
&lt;ul&gt;
&lt;li&gt;只包含一對句子，由於輸入明顯少於 512 token，所以會增加 batch size 讓 token 總數和前者差不多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FULL-SENTENCES
&lt;ul&gt;
&lt;li&gt;包含從一個或多個文件中連續採樣的完整句子，可能會跨越文件邊界，在文件邊界間會加個額外的分隔符&lt;/li&gt;
&lt;li&gt;移除了 NSP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOC-SENTENCES
&lt;ul&gt;
&lt;li&gt;和 FULL-SENTENCES 差不多，但不能跨越 document，在 document 尾巴的部分會容易少於 512，所以會動態增加 batch size，讓 token 總數和 FULL-SENTENCES 差不多&lt;/li&gt;
&lt;li&gt;移除了 NSP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/RoBERTa/table2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;發現 DOC-SENTENCES 是最棒的，但由於 DOC-SENTENCES 會讓 batch sizes 大小可變，所以其他實驗會用 FULL-SENTENCES，比較好和其他相關工作比較。&lt;/p&gt;
&lt;h3 id=&#34;training-with-large-batches&#34;&gt;Training with large batches&lt;/h3&gt;
&lt;p&gt;根據過去神經網路機器翻譯的工作，當 learning rate 適當增加的時候，用非常大的的 mini-bathces 可以提高 optimization 的速度和 end-task 性能。&lt;/p&gt;
&lt;p&gt;最近的研究也顯示 BERT 適用於 large batch training。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/RoBERTa/table3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;text-encoding&#34;&gt;Text Encoding&lt;/h3&gt;
&lt;p&gt;Byte-Pair Encoding (BPE) 是一種介於字符級別和詞級別表示之間的混合表示方法，它允許處理自然語言語料庫中常見的大詞彙量。&lt;/p&gt;
&lt;p&gt;BPE 不依賴於完整的單詞，而是依靠 subwords units，通過對訓練語料進行統計分析來提取這些 subwords units。&lt;/p&gt;
&lt;p&gt;BPE 詞彙表的大小通常在 10K-100K 的 subword units。&lt;/p&gt;
&lt;p&gt;在 &amp;ldquo;Language Models are Unsupervised Multitask Learners&amp;rdquo; 文中，提到了一種巧妙的 BPE 實現，不是用 unicode characters，而是用 bytes 作為 base subword units。可以生出 50K 大小的詞彙表，而且不用引入任何的 &amp;ldquo;unknown&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;原始的 BERT 用 character-level BPE vocabulary，大小為 30K。&lt;/p&gt;
&lt;p&gt;本文考慮用 50K byte-level BPE vocabulary，而不對輸入做額外的 preprocessing 或 tokenization，&amp;ldquo;Language Models are Unsupervised Multitask Learners&amp;rdquo; 的研究顯示這些 Encoding 的方法在最終效能上並無太大差別，只在某些任務上 end-task performance 表現稍差。&lt;/p&gt;
&lt;p&gt;但作者相信 universal encoding scheme 的優勢超過了輕微的性能下降，其他實驗也會用這種邊碼方式。&lt;/p&gt;
&lt;h2 id=&#34;roberta&#34;&gt;RoBERTa&lt;/h2&gt;
&lt;p&gt;整理上面說的改進。&lt;/p&gt;
&lt;p&gt;RoBERTa 用以下配置:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dynamic masking&lt;/li&gt;
&lt;li&gt;FULL-SENTENCES without NSP loss&lt;/li&gt;
&lt;li&gt;large mini-batches&lt;/li&gt;
&lt;li&gt;larger byte-level BPE&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，還調查了兩個之前的工作沒強調的重要因素:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用於預訓練的 data&lt;/li&gt;
&lt;li&gt;訓練過 data 的次數&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;為了把這些因素的重要性和其他模型選擇分隔開，先按照 $BERT_{LARGE}$ (L = 24, H = 1024, A = 16, 355M parameters) 訓練 RoBERTa。&lt;/p&gt;
&lt;p&gt;作者在 BOOKCORPUS plus WIKIPEDIA dataset 進行了 100K step 的預訓練。&lt;/p&gt;
&lt;p&gt;在控制 training data 的情況下， RoBERTa 比 $BERT_{LARGE}$ 的結果有大幅度的改進，重申了前面設計選擇的重要性。&lt;/p&gt;
&lt;p&gt;接下來，結合之前說的額外 dataset，並用相同的步數(100K) 訓練 RoBERTa，觀察到下游任務的性能進一步提高，驗證了數據大小和多樣性的重要性。&lt;/p&gt;
&lt;p&gt;最後，對 RoBERTa 做更長時間的預訓練，將步數提高到 300K 和 500K，再次觀察到下游任務性能顯著提升。&lt;/p&gt;
&lt;p&gt;作者也注意到，即使是他們訓練時間最長的模型，也不會 overfit 他們的數據。&lt;/p&gt;
&lt;p&gt;本文的其他部分在三個 benchmark 評估好壞: GLUE、SQuaD 和 RACE&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/RoBERTa/table4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;glue-results&#34;&gt;GLUE Results&lt;/h3&gt;
&lt;p&gt;雖然很多 GLUE 排行榜的提交都是 depend on multi-task finetuning，但作者的 submission 是 depends only on single-task finetuning。&lt;/p&gt;
&lt;p&gt;此外，對於 RTE、STS 和 MRPC，從 MNLI 的模型微調會比 baseline 的 RoBERTa 有幫助許多。&lt;/p&gt;
&lt;p&gt;在第一個設置 (single-task, dev) 中，RoBERTa 在所有 9 個 GLUE 任務 dev set 上都取得了最先進的結果。&lt;/p&gt;
&lt;p&gt;在第二個設置 (ensembles, test) 中，作者將 RoBERTa 提交到 GLUE 排行榜，並在 9 個任務中的 4 個上取得了 SOTA 和迄今為止的最高平均分。&lt;/p&gt;
&lt;p&gt;這令人興奮的地方在於，與多數 top submissions 不同，RoBERTa 不是 depend on multi-tasking finetuning&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/RoBERTa/table5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;在預訓練 BERT 模型時，作者仔細評估了許多設計決策。&lt;/p&gt;
&lt;p&gt;作者發現，通過對模型進行更長時間的訓練、使用更大的批次處理更多的數據、去除 NSP、訓練更長的序列、dynamic masking，可以顯著提高性能。&lt;/p&gt;
&lt;p&gt;作者改進的預訓練程序，我們稱之為 RoBERTa，在 GLUE、RACE 和 SQuAD 上實現了 SOTA，而無需為 GLUE 進行多任務微調或為 SQuAD 提供額外的數據。&lt;/p&gt;
&lt;p&gt;這些結果說明了這些以前被忽視的設計決策的重要性，並表明 BERT 的預訓練目標與最近提出的替代方案相比仍然具有競爭力。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ARM 組合語言介紹</title>
        <link>https://roykesydon.github.io/Blog/p/arm-%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E4%BB%8B%E7%B4%B9/</link>
        <pubDate>Tue, 21 Mar 2023 01:32:54 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/arm-%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E4%BB%8B%E7%B4%B9/</guid>
        <description>&lt;h2 id=&#34;開發環境&#34;&gt;開發環境&lt;/h2&gt;
&lt;h3 id=&#34;ide&#34;&gt;IDE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SW4STM32
&lt;ul&gt;
&lt;li&gt;支援 STM32&lt;/li&gt;
&lt;li&gt;GCC C/C++ compiler&lt;/li&gt;
&lt;li&gt;GDB-based debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;板子&#34;&gt;板子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;STM32 Bucleo Board
&lt;ul&gt;
&lt;li&gt;Cortex-M4&lt;/li&gt;
&lt;li&gt;ST-LINK
&lt;ul&gt;
&lt;li&gt;debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Memories
&lt;ul&gt;
&lt;li&gt;1MB Flash&lt;/li&gt;
&lt;li&gt;128KB SRAM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;debug-interface&#34;&gt;Debug Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JTAG
&lt;ul&gt;
&lt;li&gt;Joint Test Action Group&lt;/li&gt;
&lt;li&gt;standard ASICs hardware debug interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SWD
&lt;ul&gt;
&lt;li&gt;Serial Wire Debug&lt;/li&gt;
&lt;li&gt;只從 JTAG 用 5 wires&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bootup-code&#34;&gt;Bootup Code&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Reset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boot Loader&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0x00000000 的程式&lt;/li&gt;
&lt;li&gt;把 CPU 重置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reset handler&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ststem initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C startup code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application(main)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;memory-map&#34;&gt;Memory map&lt;/h2&gt;
&lt;p&gt;見官網 memory map&lt;/p&gt;
&lt;p&gt;只用到 SRAM 的 128KB(SRAM)，還有 Code 的 1MB(Flash)&lt;/p&gt;
&lt;h2 id=&#34;sections&#34;&gt;Sections&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;.data
&lt;ul&gt;
&lt;li&gt;儲存資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.text
&lt;ul&gt;
&lt;li&gt;儲存程式碼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同 section 會放在一塊是為了設定 read-only 方便，比如 .text 的要靠硬體實現 read-only&lt;/p&gt;
&lt;h2 id=&#34;重要的額外文件&#34;&gt;重要的額外文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linker Script
&lt;ul&gt;
&lt;li&gt;定義了不同 section 該存放的地方，以及 memory 相關定義&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MEMORY
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    RAM (xrw)		: ORIGIN = 0x20000000, LENGTH = 96K
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ROM (rx)		: ORIGIN = 0x8000000, LENGTH = 1024K
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SECTIONS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/* The program code and other data into ROM memory */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.text :
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    . = ALIGN(8);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *(.text)           /* .text sections (code) */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *(.text*)          /* .text* sections (code) */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *(.glue_7)         /* glue arm to thumb code */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *(.glue_7t)        /* glue thumb to arm code */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *(.eh_frame)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    KEEP (*(.init))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    KEEP (*(.fini))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    . = ALIGN(8);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    _etext = .;        /* define a global symbols at end of code */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} &amp;gt;ROM
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.data : 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    . = ALIGN(8);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    _sdata = .;        /* create a global symbol at data start */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *(.data)           /* .data sections */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *(.data*)          /* .data* sections */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    . = ALIGN(8);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    _edata = .;        /* define a global symbol at data end */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} &amp;gt;RAM AT&amp;gt; ROM
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Make File
&lt;ul&gt;
&lt;li&gt;描述如何編譯和連接的規則&lt;/li&gt;
&lt;li&gt;把 startup 的 .s檔加進去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;startup_stm32.s
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;編譯好後擺在 binary 頭的地方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vector table&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/******************************************************************************
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* The STM32L476RGTx vector table.  Note that the proper constructs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* must be placed on this to ensure that it ends up at physical address
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* 0x0000.0000.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;******************************************************************************/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.section .isr_vector,&amp;#34;a&amp;#34;,%progbits
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.type g_pfnVectors, %object
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.size g_pfnVectors, .-g_pfnVectors
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g_pfnVectors:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word _estack
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word Reset_Handler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word NMI_Handler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word HardFault_Handler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	MemManage_Handler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	BusFault_Handler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	UsageFault_Handler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.word	SVC_Handler
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Reset_Handler
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Reset_Handler:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ldr   r0, =_estack
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    mov   sp, r0          /* set stack pointer */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    /* Copy the data segment initializers from flash to SRAM */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ldr r0, =_sdata
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ldr r1, =_edata
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ldr r2, =_sidata
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    movs r3, #0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    b LoopCopyDataInit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LoopCopyDataInit:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    adds r4, r0, r3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    cmp r4, r1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    bcc CopyDataInit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    /* Zero fill the bss segment. */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ldr r2, =_sbss
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ldr r4, =_ebss
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    movs r3, #0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    b LoopFillZerobss
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LoopFillZerobss:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    cmp r2, r4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    bcc FillZerobss
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    /* Call the clock system intitialization function.*/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    bl  SystemInit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    /* Call static constructors */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    bl __libc_init_array
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    /* Call the application&amp;#39;s entry point.*/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    bl main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arm-register&#34;&gt;ARM Register&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARM 的可存取暫存器為 R0-R15&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r13: Stack Pointer&lt;/li&gt;
&lt;li&gt;r14: Link Register&lt;/li&gt;
&lt;li&gt;r15: Program Counter&lt;/li&gt;
&lt;li&gt;r0~r7 是 low register r8~r15 是 high register&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;狀態暫存器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPSR (Current Processor Status Register)
&lt;ul&gt;
&lt;li&gt;用來儲存各種狀態，包含 condition flag，比如 negative, zero, carry, overflow
&lt;ul&gt;
&lt;li&gt;carry: 無符號加法操作是否溢出&lt;/li&gt;
&lt;li&gt;overflow: 有符號加法操作是否溢出&lt;/li&gt;
&lt;li&gt;當兩個都為 1 或都為 0 代表運算沒問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有多種模式，有些模式有自己獨立的 r 暫存器，並有 SPSR，用來在中斷發生時，把 CPSR 的資訊 copy 過去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Special-purpose registers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APSR, IPSR, EPSR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assembly-syntax&#34;&gt;Assembly syntax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UAL: Unified Assembler Language&lt;/li&gt;
&lt;li&gt;自己去翻 instruction set&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instructions-class&#34;&gt;Instructions class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Branch instructions
&lt;ul&gt;
&lt;li&gt;B, BL, BX,&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data-processing instructions
&lt;ul&gt;
&lt;li&gt;MOV, ADD, SUB, MUL,&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Load and store instructions
&lt;ul&gt;
&lt;li&gt;LDR, STR,&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Status register access instructions
&lt;ul&gt;
&lt;li&gt;MSR, MRS,&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Miscellaneous instructions
&lt;ul&gt;
&lt;li&gt;Memory Barrier instructions&lt;/li&gt;
&lt;li&gt;Exception-Related instructions&lt;/li&gt;
&lt;li&gt;Pseudo instructions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples&#34;&gt;examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MOVS R0, #0x12&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R0=0x12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MOVS R1, #`A` &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R1=A(ASCII)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NVIC_IRQ_SETEN  EQU  0xE000E100&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宣告常數 NVIC_IRQ_SETEN，賦值 0xE000E100&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LDR R0,=NVIC_IRQ_SETEN&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;放 0xE000E100 進 R0&lt;/li&gt;
&lt;li&gt;這不能改成 &lt;code&gt;MOVS R0, #0xE000E100 &lt;/code&gt;，因為每個 instruction 只有 32 個 bits，這勢必塞不下，必須從記憶體 load 進來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NVIC_IRQ0_ENABLE  EQU  0x1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宣告常數 NVIC_IRQ0_ENABLE，賦值 0x1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MOVS R1, #NVIC_IRQ0_ENABLE&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R1=0x1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;STR R1, [R0]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把 0x1 存到 0xE000E100，這裡可以 enable external interrupt IRQ#0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LDR rn [pc, #offset to literal pool]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load register n with one word from the address [pc + offset]&lt;/li&gt;
&lt;li&gt;最後的形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operand2&#34;&gt;Operand2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共有 12 bits
&lt;ul&gt;
&lt;li&gt;設計成 4 bits for rotate, 8 bits for Immediate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arm-instrcution-formats&#34;&gt;ARM instrcution formats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ADD vs ADDS
&lt;ul&gt;
&lt;li&gt;有 S 代表會去更新 status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cond
&lt;ul&gt;
&lt;li&gt;根據之前的執行情況，判斷指令要不要執行&lt;/li&gt;
&lt;li&gt;suffix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reverse-ordering-operations&#34;&gt;Reverse Ordering Operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;REV (Byte-Reverse Word)
&lt;ul&gt;
&lt;li&gt;把 4 個 Byte 全數反轉，用在一個是 Little-Endian 一個是 Big-Endian 的情況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;load-and-store-instructions&#34;&gt;Load and Store Instructions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;examples
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LDR r0, [r1]&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;r0 = [r1]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LDM r0, {r1, r2}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;r1 = [r0]&lt;/li&gt;
&lt;li&gt;r2 = [r0+4]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STM r0, {r1, r2}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;[r0] = r1&lt;/li&gt;
&lt;li&gt;[r0+4] = r2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;status-register-access-instructions&#34;&gt;Status Register Access Instructions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一般來說不太會用到，因為用 suffix 就可以看條件&lt;/li&gt;
&lt;li&gt;MRS: Register = Status Register
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MRS r0, IPSR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSR: Status Register = Register
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MSR APSR, r0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;if-then-else&#34;&gt;If-Then-Else&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 CMP 和 conditional branches&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  CMP R0, #10   ;compare r0 to 10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  BLE incr_counter ; if less or equal, then branch to incr_counter
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;branch-instructinos&#34;&gt;Branch Instructinos&lt;/h3&gt;
&lt;p&gt;能跳的距離受限於 operand 長度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B-Branch
&lt;ul&gt;
&lt;li&gt;能跳 PC 的 +/- 2046 bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BL-Branch and Link
&lt;ul&gt;
&lt;li&gt;能跳 PC 的 +/- 254 bytes&lt;/li&gt;
&lt;li&gt;Branch to subroutine 的時候，會把下一行指令放到 Link register&lt;/li&gt;
&lt;li&gt;沒有 push 到 stack，所以要特別小心，register 是共用的，
可能要視情況自己放到 stack
&lt;ul&gt;
&lt;li&gt;比如要進兩層 function，可以用 &lt;code&gt;push {r4-r6, LR}&lt;/code&gt; 和 &lt;code&gt;POP {R4-R6, PC}&lt;/code&gt; 這種做法來保留參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BX-Branch and exchange
&lt;ul&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stack-memory-access&#34;&gt;Stack memory access&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PUSH&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SP = SP - N*4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SP = SP + N*4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ascending/Descending&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack 往哪個方向長&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empty/Full&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack 指向下一個空的位置，還是最後一個 item&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;預設且常見的是 fully descending&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STM 和 LDM 可以透過 suffix 來存到 stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STMFD r13!, {r4-r7}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把 r4 到 r7 push 到 stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;memory-barrier-instructions&#34;&gt;Memory Barrier Instructions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DMB, SDB, ISB&lt;/li&gt;
&lt;li&gt;在下個指令前 sync memory data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;function-call-and-parameter-passing&#34;&gt;Function Call and Parameter Passing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;caller 和 callee 誰負責 backup 和 restore
&lt;ul&gt;
&lt;li&gt;caller 負責
&lt;ul&gt;
&lt;li&gt;不管 callee 怎樣亂搞都行&lt;/li&gt;
&lt;li&gt;但不知道 callee 要用哪些參數，全 backup 可能多此一舉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼傳遞參數給 callee
&lt;ul&gt;
&lt;li&gt;常放在 stack，但這樣要透過 memory，相較 register 慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎麼 return value 給 caller
&lt;ul&gt;
&lt;li&gt;和上個問題差不多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arm-procedure-call-standard&#34;&gt;ARM Procedure Call Standard&lt;/h3&gt;
&lt;p&gt;又稱 APCS，講不同的 register 的一種使用規範&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r0-r3 用來當參數和回傳&lt;/li&gt;
&lt;li&gt;r4-r11 用來 local variable，callee 使用前可以先 backup&lt;/li&gt;
&lt;li&gt;r12-r15 特殊用途，沒事別亂動&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>PatentSBERTa 論文閱讀</title>
        <link>https://roykesydon.github.io/Blog/p/patentsberta-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</link>
        <pubDate>Wed, 15 Mar 2023 15:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/patentsberta-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</guid>
        <description>&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2103.11933&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PatentSBERTa: A Deep NLP based Hybrid Model for Patent Distance and Classification using Augmented SBERT&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;本研究提供了一個計算  patent-to-patent (p2p) technological similarity 的有效方法。&lt;/p&gt;
&lt;p&gt;並提出一個 hybrid framework，用於把 p2p 相似性的結果應用於 semantic search 和 automated patent classification。&lt;/p&gt;
&lt;p&gt;把 Sentence-BERT (SBERT) 用在 claims 上來作 embeddings。&lt;/p&gt;
&lt;p&gt;為了進一步提升 embedding 的品質，使用基於 SBERT 和 RoBERT 的 transformer model，然後再用 augmented approach 在  in-domain supervised patent claims data(相對於 out-domain) 來 fine-tune SBERT。&lt;/p&gt;
&lt;p&gt;用 KNN(Nearest Neighbors) 來根據 p2p similarity 分類模型。&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;傳統上的 p2p 相似度是基於關鍵字、技術類別等 metadata 決定的，但近期 semantic-based 的方法也越來越受歡迎。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前遇到的問題
&lt;ol&gt;
&lt;li&gt;BERT 用來計算 p2p 相似性的成本很高&lt;/li&gt;
&lt;li&gt;基於 generic text 的 pre-trained model 在遇到特定領域的專業術語時可能會遇到侷限。&lt;/li&gt;
&lt;li&gt;在專利做 multi-label classification (MLC) 是個挑戰&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;貢獻
&lt;ol&gt;
&lt;li&gt;提供一個快速高效的框架，利用 Transformer 架構計算 p2p 相似度&lt;/li&gt;
&lt;li&gt;透過 augmented SBERT，將 transformer model fine-tune 到 domain-specific language&lt;/li&gt;
&lt;li&gt;提出一個基於 Transformer 和 傳統 ML 模型的混和架構，可以打敗 multi-label 和 multi-class 的專利分類 SOTA 模型&lt;/li&gt;
&lt;li&gt;用簡單的 KNN 進行專利分類，提供了一種簡單的方法來檢查、理解和解釋模型的預測結果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;h3 id=&#34;dataset-description&#34;&gt;Dataset Description&lt;/h3&gt;
&lt;p&gt;本研究使用 PatentsView dataset，PatentsView 平台建立在一個定期更新的 database 上。&lt;/p&gt;
&lt;p&gt;dataset 已用於之前類似的研究，比如 DeepPatent、PatentBERT。&lt;/p&gt;
&lt;p&gt;本研究使用了 2013-2017 的所有專利，這些專利至少要在 BigQuery 上有一條 claim。&lt;/p&gt;
&lt;p&gt;本研究的 record 有 1,492,294 項專利，並用 8% 作為測試集。&lt;/p&gt;
&lt;p&gt;此外，本研究刪除了有重複專利 ID 和 claim text 的 record。&lt;/p&gt;
&lt;h3 id=&#34;textual-data-patent-claims&#34;&gt;Textual Data: Patent Claims&lt;/h3&gt;
&lt;p&gt;本研究使用 claim 作為輸入。&lt;/p&gt;
&lt;p&gt;claim 被認為是準備專利文件的初始框架，其他文件都是根據 claim 準備的，
因此，claim 比其他文件包含更全面和準確的訊息。&lt;/p&gt;
&lt;p&gt;claim 具有層次結構，first claim 被視為該架構的主幹。&lt;/p&gt;
&lt;p&gt;本研究僅使用 first claim，但在以後的研究中，希望根據 tree structure 組合所有 claim，並計算 semantic similarity，並做多標籤分類。&lt;/p&gt;
&lt;p&gt;在研究樣本中， claim 平均有 17 個。&lt;/p&gt;
&lt;p&gt;claim 的平均長度是 162，本研究中，BERT 的 max_seq_length 是 510。&lt;/p&gt;
&lt;h3 id=&#34;patent-classification-cpc-classes&#34;&gt;Patent Classification: CPC Classes&lt;/h3&gt;
&lt;p&gt;CPC系統和IPC（國際專利分類）系統是最常用的兩種分類系統，CPC 是 IPC 系統的更具體和詳細的版本。&lt;/p&gt;
&lt;p&gt;CPC 具有用於分類的層次結構，包括 Section、Class、Subclass 和 Group，
在子類級別，CPC 有 667 個標籤。&lt;/p&gt;
&lt;p&gt;在數據集中我們有 663 個標籤，其中 159 個在數據集中的樣本少於 350 個，這種標籤分佈導致了 KNN 不好處理，一般來說，隨著 instance 數量的增加，我們可以提高模型的準確性。&lt;/p&gt;
&lt;h2 id=&#34;method-and-experimental-setup&#34;&gt;Method and experimental setup&lt;/h2&gt;
&lt;p&gt;Pretrained Language Models (LMs) 在 NLP 中變得十分流行。&lt;/p&gt;
&lt;p&gt;在 pairwise sentence semantic similarity，SBERT 和 BERT 是兩種具有顯著不同效果的方法。&lt;/p&gt;
&lt;p&gt;BERT 通常可以取得更好的性能，但在實際應用上來說太慢了。&lt;/p&gt;
&lt;p&gt;SBERT 在實際應用上表現還行，但需要 in-domain training data 並且 finetune。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/PatentSBERTa/Bi_vs_Cross-Encoder.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/PatentSBERTa/approach.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;上圖是 Augmented SBERT In-domain approach。&lt;/p&gt;
&lt;p&gt;in-domain sentence pairs 透過 cross-encoder 來標記，假設有 n 個 in-domain sentences，會有 $C_2^n$ 組可能的組合。&lt;/p&gt;
&lt;p&gt;使用所有可能的組合並不會提高性能，所以要有正確的採樣策略，才可提升性能的同時也減少計算開銷。&lt;/p&gt;
&lt;p&gt;上圖那種結合 cross-encoder 和 bi-encoder 的作法被稱為 Augmented SBERT (AugSBERT)，
涉及以下三個步驟:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用資料集 Fine-tune RoBERTa 以生出 cross-encoder&lt;/li&gt;
&lt;li&gt;用 cross-encoder 來把未標記的資料標記，同時基於某種特定的採樣策略，從 652,653 種可能的組合中挑選 3432 組&lt;/li&gt;
&lt;li&gt;把資料集 + 額外的 3432 組資料一起拿來訓練 SBERT&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;h3 id=&#34;p2p-similarity-and-semantic-search&#34;&gt;P2P similarity and semantic search&lt;/h3&gt;
&lt;p&gt;Patent Semantic Search (PSS) 是專利分析的基礎部分。&lt;/p&gt;
&lt;p&gt;Transformer 模型等語義相似性的解法是一種新解法，可以用來解決基於關鍵字的搜尋方法中， query terms 和專利內容不匹配的問題。&lt;/p&gt;
&lt;p&gt;為了評估模型的準確性，未來的研究中，作者希望通過 Mean Reciprocal Rank (MRR) 來評估分類結果。&lt;/p&gt;
&lt;h3 id=&#34;cpc-prediction&#34;&gt;CPC Prediction&lt;/h3&gt;
&lt;p&gt;Top-N 準確度等於 GT 與預測有最高概率的任何 N 個預測匹配的頻率，
所以 Top-5 就是最高的五個分類中一個就有中。&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;本文使用  augmented SBERT  獲得 SOTA 的專利文本 embedding。&lt;/p&gt;
&lt;p&gt;介紹了一種 augmented 的方法，把 SBERT 微調到適合 patent claims 的 domain。&lt;/p&gt;
&lt;p&gt;SBERT 的一個主要優點是可以有效率地獲得 embedding distance，使我們能夠為大的專利資料集建構 p2p similarity。&lt;/p&gt;
&lt;p&gt;雖然基於文本的 p2p similarity 的有用性已經在各種應用方面得到證明，但本文進一步證明作者的 transformer-based p2p similarity 可以被用在 SOTA 的專利分類。&lt;/p&gt;
&lt;p&gt;而且使用簡單的 KNN 方法，檢查他們可以使模型決策具備 understandable 和 explainable。&lt;/p&gt;
&lt;h2 id=&#34;limitations--future-research&#34;&gt;Limitations &amp;amp; Future Research&lt;/h2&gt;
&lt;p&gt;未來希望用 Annoy(Approximate Nearest Neighbor Oh Yeah!) 來測試更大樣本的模型並比較結果。&lt;/p&gt;
&lt;p&gt;Annoy(Approximate Nearest Neighbor Oh Yeah!) 是想尋找近似相似而不是精確相似的句子。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Actor-Critic</title>
        <link>https://roykesydon.github.io/Blog/p/actor-critic/</link>
        <pubDate>Tue, 14 Mar 2023 16:21:23 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/actor-critic/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;結合 policy-based 和 value-based&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A3C
&lt;ul&gt;
&lt;li&gt;Actor-Critic 最知名的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage Actor-Critic 是 A2C&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;advantage-actor-critic&#34;&gt;Advantage Actor-Critic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Review: Policy gradient&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\triangledown \overline{R_{\theta}}\approx \frac{1}{N}\displaystyle\sum_{n=1}^{N}\displaystyle\sum_{t=1}^{T_n}(\displaystyle\sum_{t^{&amp;rsquo;}=t}^{T_n}\gamma^{t^{&amp;rsquo;}-t}r_{t^{&amp;rsquo;}}^n-b)\triangledown log p_{\theta}(a_t^n|s_t^n)$
&lt;ul&gt;
&lt;li&gt;$G_t^n=\displaystyle\sum_{t^{&amp;rsquo;}=t}^{T_n}\gamma^{t^{&amp;rsquo;}-t}r_{t^{&amp;rsquo;}}^n-b$
&lt;ul&gt;
&lt;li&gt;G very unstable，因為給同樣的 state 作同樣的 action 不一定會得到同樣的結果，G 是個 random variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;想要改獲得期望值，取代掉 sample 的值(G 的部分)，可以用 Q-Learning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E[G_t^n]=Q^{\pi_\theta}(s_t^n,a_t^n)$
&lt;ul&gt;
&lt;li&gt;Q function 這樣定義&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以我們可以把 G 的部分改用 Q 替換掉，就可以把 Actor 和 Critic 結合起來&lt;/li&gt;
&lt;li&gt;baseline 的部分也可以用 value function 替換掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但用 $Q^{\pi}(s_t^n,a_t^n)-V^{\pi}(s_t^n)$ 要一次 estimate 兩個 network&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以把 Q 以 V 來表示，那只需要估測 V
&lt;ul&gt;
&lt;li&gt;$Q^{\pi}(s_t^n,a_t^n)=E[r_t^n+V^{\pi}(s_{t+1}^n)]$&lt;/li&gt;
&lt;li&gt;雖然有隨機性(獲得的 reward 和跳到什麼 state 不一定)，但先不管期望值 $Q^{\pi}(s_t^n,a_t^n)=r_t^n+V^{\pi}(s_{t+1}^n)$&lt;/li&gt;
&lt;li&gt;現在雖然多個一個 r，有一些 variance，但也比 G 好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\triangledown \overline{R_{\theta}}\approx \frac{1}{N}\displaystyle\sum_{n=1}^{N}\displaystyle\sum_{t=1}^{T_n}(r_t^n+V^{\pi}(s_{t+1}^n)-V^{\pi}(s_t^n))\triangledown log p_{\theta}(a_t^n|s_t^n)$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/actor-critic/A2C.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;tips&#34;&gt;Tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;actor $\pi(s)$ 和 critic $V^{\pi}(s)$ 的權重可以共享&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前面幾個 layer 可以 share&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;對 $\pi$ 的 output 下 constrain，讓他的 entropy 不要太小，達到 exploration 的效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;asynchronous-advantage-actor-critic&#34;&gt;Asynchronous Advantage Actor-Critic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一開始有個 global network，開一堆 worker，每次工作前，把 global network 的參數 copy 過去&lt;/li&gt;
&lt;li&gt;個別去和環境作互動，更新的梯度施加在 global network 上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pathwise-derivative-policy-gradient&#34;&gt;Pathwise Derivative Policy Gradient&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以當作是 Q-Learning 解 continuous action 的一種方法&lt;/li&gt;
&lt;li&gt;訓練一個 actor，目標是生出的 a 餵給 Q 後，可以讓 Q function 的輸出越大越好
&lt;ul&gt;
&lt;li&gt;只會調 actor 的參數，會 fix Q 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就是個 GAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/actor-critic/pathwise.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在每個 episode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對於每個 time step t
&lt;ul&gt;
&lt;li&gt;⚠️給 state $s_t$，根據 $\pi$ 執行 action $a_t$ (epsilon greedy)⚠️&lt;/li&gt;
&lt;li&gt;獲得 reward $r_t$，到達 $s_{t+1}$&lt;/li&gt;
&lt;li&gt;把 {$s_t,a_t,r_t,s_{t+1}$} 存到 buffer&lt;/li&gt;
&lt;li&gt;從 buffer sample {$s_t,a_t,r_t,s_{t+1}$}(通常是一個 batch)&lt;/li&gt;
&lt;li&gt;⚠️Target $y=r_i+\hat{Q}(s_{i+1},\hat{\pi}(s_{i+1}))$⚠️&lt;/li&gt;
&lt;li&gt;Update Q 的參數，好讓 $Q(s_i,a_i)$ 更接近 y(regression)&lt;/li&gt;
&lt;li&gt;⚠️Update $\pi$ 的參數，讓 $Q(s_i,\pi(s_i))$ 最大化⚠️&lt;/li&gt;
&lt;li&gt;每 C 步 reset $\hat{Q}=Q$&lt;/li&gt;
&lt;li&gt;⚠️每 C 步 reset $\hat{\pi}=\pi$⚠️&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⚠️ 是和 Q-Learning 不一樣的地方&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Database Normalization</title>
        <link>https://roykesydon.github.io/Blog/p/database-normalization/</link>
        <pubDate>Tue, 14 Mar 2023 10:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-normalization/</guid>
        <description>&lt;h2 id=&#34;normalization-目的&#34;&gt;Normalization 目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;避免 redundent information&lt;/li&gt;
&lt;li&gt;更容易 understand、enhance、extend&lt;/li&gt;
&lt;li&gt;避免 anomalies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;隨著 1NF ~ 5NF，有更多的 safety guarantee&lt;/p&gt;
&lt;h2 id=&#34;1nf&#34;&gt;1NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;違反條件
&lt;ul&gt;
&lt;li&gt;用 row order 傳達資訊&lt;/li&gt;
&lt;li&gt;mixing data types in single column
&lt;ul&gt;
&lt;li&gt;但 relational database 不會讓你這樣做&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存在沒有 primary key 的 table&lt;/li&gt;
&lt;li&gt;repeating groups
&lt;ul&gt;
&lt;li&gt;同一個 column 有多個數值，或是在同一個 row 存多個同類型的數值。&lt;/li&gt;
&lt;li&gt;ex :
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;player&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 item_1, 4 item_2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;star&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 item_4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;player&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item_type1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;quantity1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;item_type2&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;quantity2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;roy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;star&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;item_4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2nf&#34;&gt;2NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有的 non-key attribute 都要 depend on 整個 PK
&lt;ul&gt;
&lt;li&gt;非正式定義，有點細微差異&lt;/li&gt;
&lt;li&gt;functional dependency
&lt;ul&gt;
&lt;li&gt;ex: {player_id, item_type} -&amp;gt; {item_Quantity}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3nf&#34;&gt;3NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;transitive dependency
&lt;ul&gt;
&lt;li&gt;{A} -&amp;gt; {B} -&amp;gt; {C}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有 non-key attribute 都要 depend on the whole key，不能 depend on 其他 non-key attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;boyce-codd-normal-form&#34;&gt;Boyce-Codd Normal Form&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有 attribute 都要 depend on the whole key，不能 depend on 其他 non-key attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4nf&#34;&gt;4NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;multivalued dependency
&lt;ul&gt;
&lt;li&gt;不像 functional dependency，箭頭後方的那項可以有多個 value&lt;/li&gt;
&lt;li&gt;{Model} $\twoheadrightarrow$ {Color}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一個 table 中的所有 multivalued dependency 必須依賴於 key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5nf&#34;&gt;5NF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;沒有 Join Dependency
&lt;ul&gt;
&lt;li&gt;table 不能表示成其他 table join 起來的結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Sentence-BERT 論文閱讀</title>
        <link>https://roykesydon.github.io/Blog/p/sentence-bert-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</link>
        <pubDate>Sun, 12 Mar 2023 10:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/sentence-bert-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</guid>
        <description>&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/1908.10084&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;BERT 和 RoBERTa 在 semantic textual similarity (STS) 上太花時間，因為他需要將兩個句子都輸入網路，並且兩兩比對。&lt;/p&gt;
&lt;p&gt;Sentence-BERT(SBERT) 對預訓練的 BERT 作了一些修改，透過 siamese 和 triplet network 的結構來生出有意義的 embeddings，使其最後可以透過 cosine-similarity 比較相似度。&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;SBERT 使 BERT 可以用於某些迄今為止不適用於 BERT 的任務，比如 large-scale semantic similarity comparison、clustering 還有 information retrieval via semantic search。&lt;/p&gt;
&lt;p&gt;以往的相關研究是把單個句子輸入 BERT，最後 average BERT output layer，或是使用第一個 output，但這樣會產生糟糕的 sentence embeddings。&lt;/p&gt;
&lt;p&gt;SentEval 是一個 evaluation toolkit for sentence embeddings&lt;/p&gt;
&lt;h2 id=&#34;related-work&#34;&gt;Related Work&lt;/h2&gt;
&lt;p&gt;BERT 透過輸入兩個句子，以 [SEP] 隔開，可以在 STS 取得 SOTA。&lt;/p&gt;
&lt;p&gt;但這樣無法計算獨立的 sentence embedding，所以過往的研究人員把單個句子輸入 BERT，最後 average BERT output layer，或是使用第一個 output。&lt;/p&gt;
&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;
&lt;p&gt;SBERT 在 BERT / RoBERTa 的輸出中添加了 pooling，作者嘗試了三種策略，CLS-token 的輸出、所以輸出向量的平均、max-over-time of the output vectors，默認是 MEAN。&lt;/p&gt;
&lt;p&gt;實驗以下結構和目標函數:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Classification Objective Function&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/SBERT/COF-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/SBERT/COF-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regression Objective Function&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用 mean squared-error loss&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/SBERT/ROF.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Triplet Objective Function&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/SBERT/TOF.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;training-details&#34;&gt;Training Details&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dataset
&lt;ul&gt;
&lt;li&gt;SNLI 結合 Multi-Genre NLI
&lt;ul&gt;
&lt;li&gt;SNLI: 570,000 個 句子 pair，有三類，contradiction, eintailment, and neutral&lt;/li&gt;
&lt;li&gt;MultiNLI: 430,000 個句子 pair&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3-way softmax Classification Objective Function&lt;/li&gt;
&lt;li&gt;1-epoch&lt;/li&gt;
&lt;li&gt;batch-size: 16&lt;/li&gt;
&lt;li&gt;Adam&lt;/li&gt;
&lt;li&gt;lr: 2e-5&lt;/li&gt;
&lt;li&gt;warm-up: 超過 10% of the training data&lt;/li&gt;
&lt;li&gt;默認 pooling 策略: MEAN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;evaluation&#34;&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;學習一個複雜的回歸函數分析 STS 常是 SOTA，但是由於他是 pair-wise，遇到 combinatorial explosion，不好拓展。&lt;/p&gt;
&lt;p&gt;本文用 cosine-similarity 比較兩個 embeddings 的相似度，也用 negative Manhatten 和 negative Euclidean distances，但得到差不多的結果。&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;用 BERT 生出的 embeddings 不適合常見的相似度測量方法，比如 cosine-similarity。&lt;/p&gt;
&lt;p&gt;本文提出 SBERT 改進，在 siamese / triplet 網路架構中微調 BERT。&lt;/p&gt;
&lt;p&gt;用 RoBERTa 替換掉 BERT 並沒有什麼顯著改進。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>軟體設計原則</title>
        <link>https://roykesydon.github.io/Blog/p/%E8%BB%9F%E9%AB%94%E8%A8%AD%E8%A8%88%E5%8E%9F%E5%89%87/</link>
        <pubDate>Wed, 08 Mar 2023 14:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E8%BB%9F%E9%AB%94%E8%A8%AD%E8%A8%88%E5%8E%9F%E5%89%87/</guid>
        <description>&lt;h2 id=&#34;uml-類別圖&#34;&gt;UML 類別圖&lt;/h2&gt;
&lt;h3 id=&#34;relationship&#34;&gt;Relationship&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dependency
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;uses-a&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Association
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;knows-a&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composition
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;has-a&amp;rdquo;&lt;/li&gt;
&lt;li&gt;child 的存在依賴於 parent，若刪除 parent，child 也會隨之刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aggregation
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;has-a&amp;rdquo;&lt;/li&gt;
&lt;li&gt;child 的存在獨立於 parent，若刪除 parent，child 不會隨之刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Inheritance
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;is-a&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;can-do&amp;rdquo;&lt;/li&gt;
&lt;li&gt;實現 interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;other-features&#34;&gt;other features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Navigation
&lt;ul&gt;
&lt;li&gt;當兩個 class 都可以看到對方，就用沒箭頭的關聯線，否則有箭頭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Role Name
&lt;ul&gt;
&lt;li&gt;類別中的 Attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiplicity
&lt;ul&gt;
&lt;li&gt;關聯端點上可以寫數量，代表物件個數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Self-Association
&lt;ul&gt;
&lt;li&gt;同個類別的物件彼此有關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;軟體設計原則&#34;&gt;軟體設計原則&lt;/h2&gt;
&lt;h3 id=&#34;encapsulate-what-varies&#34;&gt;Encapsulate What Varies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把經常改變的程式碼封裝起來，使日後修改時不會影響其他區塊的程式碼&lt;/li&gt;
&lt;li&gt;實際使用的情境，可以把常改變的東西放在 interface 後，使日後改變實作時不影響呼叫該 interface 的程式碼&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;favor-composition-over-inheritance&#34;&gt;Favor Composition over Inheritance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Composition(組合)在很多情境可以取代掉 Inheritance(繼承)，可藉由 Polymorphism(多型)來達成&lt;/li&gt;
&lt;li&gt;只有當 is-a 的情境出現，才用繼承比較好&lt;/li&gt;
&lt;li&gt;Composition 使用起來更有彈性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solid-設計原則&#34;&gt;SOLID 設計原則&lt;/h2&gt;
&lt;h3 id=&#34;single-responsibility-principle-srp&#34;&gt;Single Responsibility Principle, SRP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;單一職責原則&lt;/li&gt;
&lt;li&gt;A class should have only one reason to change.&lt;/li&gt;
&lt;li&gt;可以把一個複雜的 module 拆成多個&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;open-close-principle-ocp&#34;&gt;Open-Close Principle, OCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;開放封閉原則&lt;/li&gt;
&lt;li&gt;You should be able to extend the behavior of a system without having to modify that system.&lt;/li&gt;
&lt;li&gt;要可以擴充，同時不修改到原系統&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;liskovsubstitution-principle-lsp&#34;&gt;LiskovSubstitution Principle, LSP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;里氏替換原則&lt;/li&gt;
&lt;li&gt;父類別有的功能，子類別必須遵從，父類別的部分要可以直接替換成子類別&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interface-segregation-principle-isp&#34;&gt;Interface Segregation Principle, ISP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;介面隔離原則&lt;/li&gt;
&lt;li&gt;No client should be forced to depend on methods it does not use&lt;/li&gt;
&lt;li&gt;以 interface 來說，不該讓 module 實現它不需要的功能，可以把 interface 拆小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-inversion-principle-dip&#34;&gt;Dependency Inversion Principle, DIP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;反向依賴原則&lt;/li&gt;
&lt;li&gt;高階模組不應該依賴低階模組，兩者都應依賴抽象層&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Crack simple ELF</title>
        <link>https://roykesydon.github.io/Blog/p/crack-simple-elf/</link>
        <pubDate>Tue, 07 Mar 2023 14:26:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/crack-simple-elf/</guid>
        <description>&lt;h1 id=&#34;assembly-language&#34;&gt;Assembly language&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Control flow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jumps, branches, calls
&lt;ul&gt;
&lt;li&gt;jmp, jne, je, bne, be, call&lt;/li&gt;
&lt;li&gt;branch 就是根據 status flag 而 jump
&lt;ul&gt;
&lt;li&gt;je 0x33 代表「如果 zero flag 是 1 就跳到 0x33」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call 是 unconditional GOTO，但會把下一個 address 放到 stack
&lt;ul&gt;
&lt;li&gt;那 RET instruction 可以晚點把它取出，並回到那邊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;status flag&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 register 上的多數 operation，比如加減法，會對 status flags 產生影響&lt;/li&gt;
&lt;li&gt;只有很少的 status flags，而且他們通常存在在一個 special register 上&lt;/li&gt;
&lt;li&gt;範例
&lt;ul&gt;
&lt;li&gt;zero flag
&lt;ul&gt;
&lt;li&gt;上個運算的結果是不是 0，在一些條件判斷很常用該 flag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;register&#34;&gt;Register&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;從組合語言的角度來看，是一些有固定 size 的全域變數&lt;/li&gt;
&lt;li&gt;special register
&lt;ul&gt;
&lt;li&gt;Program Counter
&lt;ul&gt;
&lt;li&gt;記錄下個要執行的 instruction&lt;/li&gt;
&lt;li&gt;別名
&lt;ul&gt;
&lt;li&gt;PC&lt;/li&gt;
&lt;li&gt;Intel x86 叫 Instruction Pointer
&lt;ul&gt;
&lt;li&gt;根據 16/32/64 bits，稱為 IP/EIP/RIP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stack pointer
&lt;ul&gt;
&lt;li&gt;SP, ESP, RSP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Base Pointer
&lt;ul&gt;
&lt;li&gt;BP, EBP, RBP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;繞過字串比對&#34;&gt;繞過字串比對&lt;/h1&gt;
&lt;p&gt;該程式吃一個參數，比對是不是密碼&lt;/p&gt;
&lt;p&gt;我們要透過 gdb 從執行檔觸發 printf(&amp;ldquo;Access Granted!\n&amp;rdquo;);&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程式碼:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Checking License: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;strcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;AAAA-Z10N-42-OK&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Access Granted!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;WRONG!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Usage: &amp;lt;key&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;來源: &lt;a class=&#34;link&#34; href=&#34;https://github.com/LiveOverflow/liveoverflow_youtube/blob/master/0x05_simple_crackme_intro_assembler/license_1.c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/LiveOverflow/liveoverflow_youtube/blob/master/0x05_simple_crackme_intro_assembler/license_1.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc ./test.c -o ./test -Wall&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;-Wall 可以顯示所有警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;輸入 &lt;code&gt;gdb ./test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以透過 &lt;code&gt;disassemble main&lt;/code&gt; 來顯示 main function 的 assembler instruction&lt;/p&gt;
&lt;p&gt;可以用 &lt;code&gt;set disassembly-flavor intel&lt;/code&gt; 來換個風格&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Dump of assembler code for function main:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x0000000000001189 &amp;lt;+0&amp;gt;:     endbr64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x000000000000118d &amp;lt;+4&amp;gt;:     push   rbp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x000000000000118e &amp;lt;+5&amp;gt;:     mov    rbp,rsp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x0000000000001191 &amp;lt;+8&amp;gt;:     sub    rsp,0x10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x0000000000001195 &amp;lt;+12&amp;gt;:    mov    DWORD PTR [rbp-0x4],edi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x0000000000001198 &amp;lt;+15&amp;gt;:    mov    QWORD PTR [rbp-0x10],rsi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x000000000000119c &amp;lt;+19&amp;gt;:    cmp    DWORD PTR [rbp-0x4],0x2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011a0 &amp;lt;+23&amp;gt;:    jne    0x11fb &amp;lt;main+114&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011a2 &amp;lt;+25&amp;gt;:    mov    rax,QWORD PTR [rbp-0x10]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011a6 &amp;lt;+29&amp;gt;:    add    rax,0x8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011aa &amp;lt;+33&amp;gt;:    mov    rax,QWORD PTR [rax]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011ad &amp;lt;+36&amp;gt;:    mov    rsi,rax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011b0 &amp;lt;+39&amp;gt;:    lea    rdi,[rip+0xe4d]        # 0x2004
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011b7 &amp;lt;+46&amp;gt;:    mov    eax,0x0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011bc &amp;lt;+51&amp;gt;:    call   0x1080 &amp;lt;printf@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011c1 &amp;lt;+56&amp;gt;:    mov    rax,QWORD PTR [rbp-0x10]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011c5 &amp;lt;+60&amp;gt;:    add    rax,0x8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011c9 &amp;lt;+64&amp;gt;:    mov    rax,QWORD PTR [rax]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011cc &amp;lt;+67&amp;gt;:    lea    rsi,[rip+0xe47]        # 0x201a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011d3 &amp;lt;+74&amp;gt;:    mov    rdi,rax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011d6 &amp;lt;+77&amp;gt;:    call   0x1090 &amp;lt;strcmp@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011db &amp;lt;+82&amp;gt;:    test   eax,eax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011dd &amp;lt;+84&amp;gt;:    jne    0x11ed &amp;lt;main+100&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011df &amp;lt;+86&amp;gt;:    lea    rdi,[rip+0xe44]        # 0x202a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011e6 &amp;lt;+93&amp;gt;:    call   0x1070 &amp;lt;puts@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011eb &amp;lt;+98&amp;gt;:    jmp    0x1207 &amp;lt;main+126&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011ed &amp;lt;+100&amp;gt;:   lea    rdi,[rip+0xe46]        # 0x203a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011f4 &amp;lt;+107&amp;gt;:   call   0x1070 &amp;lt;puts@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011f9 &amp;lt;+112&amp;gt;:   jmp    0x1207 &amp;lt;main+126&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011fb &amp;lt;+114&amp;gt;:   lea    rdi,[rip+0xe3f]        # 0x2041
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x0000000000001202 &amp;lt;+121&amp;gt;:   call   0x1070 &amp;lt;puts@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x0000000000001207 &amp;lt;+126&amp;gt;:   mov    eax,0x0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x000000000000120c &amp;lt;+131&amp;gt;:   leave
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x000000000000120d &amp;lt;+132&amp;gt;:   ret
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;End of assembler dump.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以先畫 control flow graph，分析每塊的運作情形，或找軟體生，比如在 MacOS 可以用 Hopper&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;break *main&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 main 的第一行設置 breakpoint&lt;/li&gt;
&lt;li&gt;也可以直接把 main 換成某個 address，比如&lt;code&gt;break *0x00000000000011fb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;run  &amp;lt;參數，比如這邊就是 key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跑程式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;info registers&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;執行的過程中，可以隨時查看 register 情形，&lt;/li&gt;
&lt;li&gt;e registers are the low 32 bits of the r registers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程式執行到下一步&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可用 &lt;code&gt;si&lt;/code&gt;、&lt;code&gt;ni&lt;/code&gt;、&lt;code&gt;continue&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;si 和 ni 會跑到下一行程式，差別是 si 會進去 function calls
&lt;ul&gt;
&lt;li&gt;接著可以一直按 enter，不用一直重打&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x/s &amp;lt;address&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;印出 ASCII 字串，可以用在 .rodata section&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後會發現關鍵在&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011d6 &amp;lt;+77&amp;gt;:    call   0x1090 &amp;lt;strcmp@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011db &amp;lt;+82&amp;gt;:    test   eax,eax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   0x00000000000011dd &amp;lt;+84&amp;gt;:    jne    0x11ed &amp;lt;main+100&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我們執行 &amp;lt;+82&amp;gt; 前，把 eax 改為 0 即可，test 用來確認一個值是否為 0，目的是為了後面的 jne，我們的目標是讓 zero flag 設成 1，而 eax 是 rax 的 first 32 bits。&lt;/p&gt;
&lt;p&gt;本來是 &lt;code&gt;rax 0x23 35&lt;/code&gt;，下完&lt;code&gt;set $eax=0&lt;/code&gt;，變成&lt;code&gt;rax 0x0 0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此時我們接著 &lt;code&gt;ni&lt;/code&gt; 下去，得到 &amp;ldquo;Access Granted!&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;tools&#34;&gt;Tools&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hexdump&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以把二進制文件印出來
&lt;ul&gt;
&lt;li&gt;-C 可以額外顯示 ASCII&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把高於某種長度的 printable character sequence 印出來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;objdump&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d 可以用來 disassemble&lt;/li&gt;
&lt;li&gt;-x 可以查看 header
&lt;ul&gt;
&lt;li&gt;section
&lt;ul&gt;
&lt;li&gt;.text
&lt;ul&gt;
&lt;li&gt;存放程式碼的地方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;15 .text 000001e5 00000000000010a0 00000000000010a0 000010a0 2**4&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;長度 0x1e5 bytes&lt;/li&gt;
&lt;li&gt;address 在 0x10a0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.rodata
&lt;ul&gt;
&lt;li&gt;read only data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strace&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trace system calls and signal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;radare2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UNIX-like reverse engineering framework and command-line toolset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r2 ./test&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;aaa&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;afl&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列出所有 function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash;help&lt;/li&gt;
&lt;li&gt;a?
&lt;ul&gt;
&lt;li&gt;a 的詳細說明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s main&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seek address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pdf&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;印出當前函式的 disassembly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;VV&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual mode(graph)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;切換顯示方法(包含顯示 address)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ndash;help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;V!&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以看到大量資訊的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r2 -d ./test&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;像 gdb 一樣 debug&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db &amp;lt;address&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;設置 breakpoint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:dc&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;按 &amp;ldquo;:&amp;rdquo; 跑 command mode，這樣就可以在 VV 看&lt;/li&gt;
&lt;li&gt;dc 會 run 程式碼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;和 si 一樣，可以用 &lt;code&gt;S&lt;/code&gt;，那就是 ni&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dr&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;register info&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dr rip=0x00123123123&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以這樣設置位址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ood [args]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reopen in debug mode (with args)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;afvn &amp;lt;var1&amp;gt; &amp;lt;var2&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rename variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;uncrackable&#34;&gt;Uncrackable?&lt;/h1&gt;
&lt;p&gt;密碼直接放在 binary，連 vim 都可以輕鬆看到，接下來會挑戰更難一點的情形，先從不把 key 放在裡面開始，雖然上次直接改 register 的做法根本不用管 key 是什麼&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不顯示 string 密碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這次的做法改成，不再是 check string 一不一樣，而是先算 license key 的所有 char 轉成 int 後的總合，並且刪除掉 license key，之後對輸入的密碼算總和看一不一樣&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x00001212      72c2           jb 0x11d6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x00001214      817de8940300.  cmp dword [var_18h], 0x394
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0x0000121b      750e           jne 0x122b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;程式碼的這塊是看總合的，這時我們在 jne 設 breakpoint 後，可以直接把 rip 改到改成下一行的 address，直接繞過
&lt;ul&gt;
&lt;li&gt;關鍵在於只要可以找到是哪一行 cmp，就可以繞過它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parser differential&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讓 linux 可執行，但讓 debugger 不能跑&lt;/li&gt;
&lt;li&gt;每個 Parser 的演算法略有不同&lt;/li&gt;
&lt;li&gt;fuzzing
&lt;ul&gt;
&lt;li&gt;隨機改一個 bytes，有可能執行結果和原本一樣，但是 parser 有問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>PatentBERT 論文閱讀</title>
        <link>https://roykesydon.github.io/Blog/p/patentbert-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</link>
        <pubDate>Thu, 02 Mar 2023 16:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/patentbert-%E8%AB%96%E6%96%87%E9%96%B1%E8%AE%80/</guid>
        <description>&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/1906.02124&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PatentBERT: Patent Classification with Fine-Tuning a pre-trained BERT Model&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;把 fine-tune BERT 應用在專利分類上，當應用於超過 200 萬件專利的資料集時，該方法超越了結合 word-embedding 的 CNN 的 SOTA 作法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;貢獻:
&lt;ol&gt;
&lt;li&gt;一個用預訓練的 BERT 去 fine-tune 的 SOTA 方法&lt;/li&gt;
&lt;li&gt;一個叫做 USPTO-3M 的大型資料集，屬於 CPC subclass level，並提供 SQL 語句讓後續的研究者使用&lt;/li&gt;
&lt;li&gt;與傳統觀念相反，只需要 claim 就足以完成分類任務&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;專利分類是一個 multi-label 的分類任務。&lt;/p&gt;
&lt;p&gt;由於標籤的數量可能很大，所以是個具有挑戰性的任務。&lt;/p&gt;
&lt;p&gt;作者準備了一個基於 CPC 的新資料集，有超過三百萬項美國專利。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPC
&lt;ul&gt;
&lt;li&gt;Cooperative Patent Classification&lt;/li&gt;
&lt;li&gt;是 IPC 更具體和詳細的版本&lt;/li&gt;
&lt;li&gt;可預見將取代 IPC 成為新的標準
&lt;ul&gt;
&lt;li&gt;只是由於 CLEP-IP 競賽，大部分論文都基於 IPC
&lt;ul&gt;
&lt;li&gt;資料集包含 1978 到 2009 提交的專利&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IPC
&lt;ul&gt;
&lt;li&gt;International Patent Classification&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，作者的 dataset 基於 patent claims&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;patent claims
&lt;ul&gt;
&lt;li&gt;重要性在過往被低估&lt;/li&gt;
&lt;li&gt;在起草專利申請時，專利業者會先起草 patent claims&lt;/li&gt;
&lt;li&gt;專利文件的其餘部分由 claim 做延伸&lt;/li&gt;
&lt;li&gt;在專利法中，claims 定義了專利發明的界線，確定了專利權範圍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為使模型更簡單，只關注 patent claims，並且僅用第一項 claim。&lt;/p&gt;
&lt;h1 id=&#34;相關工作&#34;&gt;相關工作&lt;/h1&gt;
&lt;p&gt;過往有些研究只顯示了 precision，但沒有 F1 value 或 recall，難以公平比較。&lt;/p&gt;
&lt;p&gt;以 DeepPatent&lt;/p&gt;
&lt;h1 id=&#34;data&#34;&gt;Data&lt;/h1&gt;
&lt;p&gt;過往資料基於 CLEF-IP 或 patent offices。&lt;/p&gt;
&lt;p&gt;作者發現在 BigQuery 用 Google Patents Public Datasets 更容易。&lt;/p&gt;
&lt;p&gt;而且可用 SQL statements，作者認為比共享傳統資料集更好，原因如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Seperation of concerns
&lt;ul&gt;
&lt;li&gt;如果資料包含前處理或後處理，其他研究人員需要不同操作時會很頭痛。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clarity and flexibility
&lt;ul&gt;
&lt;li&gt;SQL statement 精確且容易根據不同條件進行修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在和 DeepPatent 比較的時候，可以的話，會用 USPTO2M 進行測試，如果不行，才會合併來自 USPTO-3M 的資料，比如 USPTO-2M 沒有 claims 的情況。&lt;/p&gt;
&lt;p&gt;為了比較 claim 如何影響性能，將合併兩個資料集。&lt;/p&gt;
&lt;h1 id=&#34;method--experimental-setup&#34;&gt;Method &amp;amp; Experimental Setup&lt;/h1&gt;
&lt;p&gt;用 BERT-Base 就可以打敗 DeepPatent。&lt;/p&gt;
&lt;p&gt;遵循 BERT Project 中給的 fine-tune 範例。&lt;/p&gt;
&lt;p&gt;為了 multilabel，用 sigmoid cross entropy with logits function 而不是用 softmax。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/PatentBERT/result.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;專利分類作為具有挑戰性的任務，幾十年來一直沒有令人滿意的表現。&lt;/p&gt;
&lt;p&gt;本文提出一個基於 fine-tune BERT 的方法，性能優於 DeepPatent。&lt;/p&gt;
&lt;p&gt;並且結果表明只用 patent claim 就可以完成分類任務。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>About</title>
        <link>https://roykesydon.github.io/Blog/about/</link>
        <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/about/</guid>
        <description>&lt;h1 id=&#34;roykesydon&#34;&gt;Roykesydon&lt;/h1&gt;
&lt;h2 id=&#34;education&#34;&gt;Education&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;2023-2025 (expected)&lt;/dt&gt;
&lt;dd&gt;&lt;strong&gt;MSc, Computer Science and Information Engineering&lt;/strong&gt;; National Cheng Kung University&lt;/dd&gt;
&lt;dt&gt;2019-2023&lt;/dt&gt;
&lt;dd&gt;&lt;strong&gt;BSc, Computer Science and Engineering&lt;/strong&gt;; National Taiwan Ocean University&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;experience&#34;&gt;Experience&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;2020-2023&lt;/dt&gt;
&lt;dd&gt;&lt;strong&gt;Adjunct research assistants&lt;/strong&gt;; Advanced Computation Laboratory&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;projects&#34;&gt;Projects&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;漁港即時漁船檢測&lt;/dt&gt;
&lt;dd&gt;在漁港多處架設攝影機，透過 RTSP 取得攝影機畫面，達成自動化統計港口漁船的目標。後端結合 YOLOv4、FastAPI 以及一些影像處理的手法，將收到的攝影機畫面進行辨識。前端透過 Vue 來提供偵測的畫面結果，以及過往 48 小時的港口數據&lt;/dd&gt;
&lt;dt&gt;船上漁工檢測&lt;/dt&gt;
&lt;dd&gt;目的是想透過船上攝影機畫面的 ts 檔，自動化判斷哪些時間有漁工出現在畫面上，方便其他研究人員取得片中釣魚作業的片段。鑒於漁工衣著的特殊性，以及難以取得訓練資料，使用 pre-trained LightweightOpenPose model 結合各種過濾手段及 OCR 完成任務&lt;/dd&gt;
&lt;dt&gt;購衣網站&lt;/dt&gt;
&lt;dd&gt;個人 Side Project，透過 JWT 判斷權限。Nginx 負責反向代理及 web server。用 MariaDB 做 Replication，做 Master-slave 架構，最後用 Docker 把上述的東西和前後端包裝在各個 Container。&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;competitive-programming-contest&#34;&gt;Competitive Programming Contest&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;2021 / 12&lt;/dt&gt;
&lt;dd&gt;大學程式能力檢定 (CPE) - &lt;strong&gt;解題: 7/7 題 (排名: 2/2459)&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;2021 / 12&lt;/dt&gt;
&lt;dd&gt;2021 東華杯程式設計競賽大專組  - &lt;strong&gt;第二名&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;2021 / 10&lt;/dt&gt;
&lt;dd&gt;2021 National Collegiate Programming Contest  - &lt;strong&gt;第四名&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;2020 / 12&lt;/dt&gt;
&lt;dd&gt;2020 彰師大中區程式競賽  - &lt;strong&gt;第三名&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;2020 / 11&lt;/dt&gt;
&lt;dd&gt;The 2020 ICPC Asia Taipei-Hsinchu Site Programming Contest  - &lt;strong&gt;銀牌 (排名: 13/101)&lt;/strong&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;skills&#34;&gt;Skills&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Language&lt;/dt&gt;
&lt;dd&gt;C、C++、Python、Javascript、Java、HTML、CSS、PHP、SCSS&lt;/dd&gt;
&lt;dt&gt;Framework&lt;/dt&gt;
&lt;dd&gt;Vue、Laravel、Pytorch、Flask、FastAPI&lt;/dd&gt;
&lt;dt&gt;Database&lt;/dt&gt;
&lt;dd&gt;MySQL、MongoDB&lt;/dd&gt;
&lt;dt&gt;Others&lt;/dt&gt;
&lt;dd&gt;Git、Docker、Node.js&lt;/dd&gt;
&lt;/dl&gt;
</description>
        </item>
        <item>
        <title>線性代數 - II</title>
        <link>https://roykesydon.github.io/Blog/p/%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8-ii/</link>
        <pubDate>Tue, 21 Feb 2023 15:42:47 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8-ii/</guid>
        <description>&lt;h1 id=&#34;linear-equation&#34;&gt;linear equation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;$a_1x_1+a_2x_2+&amp;hellip;+a_nx_n = b$
&lt;ul&gt;
&lt;li&gt;$a$ 是 coefficient&lt;/li&gt;
&lt;li&gt;$x$ 是 variables&lt;/li&gt;
&lt;li&gt;$b$ 是 constant term&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;systems-of-linear-equations&#34;&gt;Systems of linear equations&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;m equations, n variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$a_{11}x_1+a_{12}x_2+&amp;hellip;+a_{1n}x_n = b_1\\
a_{21}x_1+a_{22}x_2+&amp;hellip;+a_{2n}x_n = b_2\\
&amp;hellip;\\
a_{m1}x_1+a_{m2}x_2+&amp;hellip;+a_{mn}x_n = b_m$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;solution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$[s_1~s_2~&amp;hellip;~s_n]^T$ 是一組解，代換到 $x_1$~$x_n$ 後滿足所有 equation 的向量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有 Systems of linear equations 都有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no solution&lt;/li&gt;
&lt;li&gt;exactly one solution&lt;/li&gt;
&lt;li&gt;infinitely many solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;consistent/inconsistent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有一組以上的解就是 consistent&lt;/li&gt;
&lt;li&gt;無解就是 inconsistent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;equivalent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果兩組 Systems of linear equations 的 solution set 一樣，稱為 equivalent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;elementary row operations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不會影響 solution set&lt;/li&gt;
&lt;li&gt;types
&lt;ul&gt;
&lt;li&gt;Interchange
&lt;ul&gt;
&lt;li&gt;兩 row 互換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scaling
&lt;ul&gt;
&lt;li&gt;某 row 乘某個 nonzero scalar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Row addition
&lt;ul&gt;
&lt;li&gt;把某 row 乘某個 scalar 後加到某 row&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;property
&lt;ul&gt;
&lt;li&gt;所有 elementary row operations 都是 reversible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用來求解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coefficient matrix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$a_{11}x_1+a_{12}x_2+&amp;hellip;+a_{1n}x_n = b_1\\
a_{21}x_1+a_{22}x_2+&amp;hellip;+a_{2n}x_n = b_2\\
&amp;hellip;\\
a_{m1}x_1+a_{m2}x_2+&amp;hellip;+a_{mn}x_n = b_m$
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以拆為 $Ax=b$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$A=\begin{bmatrix}
a_{11}&amp;amp; a_{12}&amp;amp;&amp;hellip;&amp;amp; a_{1n} \\
a_{21}&amp;amp; a_{22}&amp;amp;&amp;hellip;&amp;amp; a_{2n} \\
&amp;hellip;&amp;amp; &amp;hellip;&amp;amp;&amp;hellip;&amp;amp; &amp;hellip; \\
a_{m1}&amp;amp; a_{m2}&amp;amp;&amp;hellip;&amp;amp; a_{mn}
\end{bmatrix}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 就是 coefficient matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$x=\begin{bmatrix}
x_1\\
x_2\\
&amp;hellip;\\
x_n
\end{bmatrix}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x$ 是 variable vector&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$[A|b]=\begin{bmatrix}
a_{11}&amp;amp; a_{12}&amp;amp;&amp;hellip;&amp;amp; a_{1n} &amp;amp; b_1 \\
a_{21}&amp;amp; a_{22}&amp;amp;&amp;hellip;&amp;amp; a_{2n} &amp;amp; b_2\\
&amp;hellip;&amp;amp; &amp;hellip;&amp;amp;&amp;hellip;&amp;amp; &amp;hellip; &amp;amp; &amp;hellip;\\
a_{m1}&amp;amp; a_{m2}&amp;amp;&amp;hellip;&amp;amp; a_{mn} &amp;amp; b_m
\end{bmatrix}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;叫做 augmented matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>線性代數 - I</title>
        <link>https://roykesydon.github.io/Blog/p/%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8-i/</link>
        <pubDate>Tue, 21 Feb 2023 14:42:47 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8-i/</guid>
        <description>&lt;h1 id=&#34;matrix&#34;&gt;matrix&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a rectangular array of scalars&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;size&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m by n&lt;/li&gt;
&lt;li&gt;叫做 square if m = n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;equal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兩個矩陣的 size 和每個 entry 都一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;submatrix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;從一個大矩陣刪掉 rows 或 columns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兩個大小相同的矩陣，每個對應位置的 entry 兩兩相加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scalar multiplication&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個矩陣的所有 entry 乘以某個 scalar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zero matrix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 entry 都是 0，該矩陣常以 $O_{n \times m}$ 來表示&lt;/li&gt;
&lt;li&gt;性質
&lt;ul&gt;
&lt;li&gt;$A = O + A$&lt;/li&gt;
&lt;li&gt;$0 \cdot A = O $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;subtraction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$A-B=A+(-B)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transpose&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$A^T$ 的 $(i,j)$-entry 是 $A$ 的 $(j,i)$-entry&lt;/li&gt;
&lt;li&gt;Properties
&lt;ul&gt;
&lt;li&gt;$(A+B)^T=A^T+B^T$&lt;/li&gt;
&lt;li&gt;$(sA)^T=sA^T$&lt;/li&gt;
&lt;li&gt;$(A^T)^T=A$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;vectors&#34;&gt;vectors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;row vector
&lt;ul&gt;
&lt;li&gt;只有 1 row 的 matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;column vector
&lt;ul&gt;
&lt;li&gt;只有 1 column 的 matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;components&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the entries of a vector&lt;/li&gt;
&lt;li&gt;用 the $i$ th component 代表 $v_i$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addition, scalar multiplication&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和 matrix 一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;矩陣表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個矩陣常被表示為
&lt;ul&gt;
&lt;li&gt;a stack of row vectors&lt;/li&gt;
&lt;li&gt;a cross list of column vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;linear-combination&#34;&gt;linear combination&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$c_1u_1+c_2u_2+&amp;hellip;+c_ku_k$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scalars&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$c_1,c_2,&amp;hellip;,c_k$&lt;/li&gt;
&lt;li&gt;又被稱作 linear combination 的 coefficients&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vectors&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$u_1,u_2,&amp;hellip;,u_k$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 $u,v$ 非平行二維向量，則二維空間中所有向量皆是 $u,v$ 的 linear combination，且是 unique 的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;standard-vectors&#34;&gt;standard vectors&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$e_1 = \begin{bmatrix}
1 \\
0 \\
&amp;hellip; \\
0
\end{bmatrix}
,e_2 = \begin{bmatrix}
0 \\
1 \\
&amp;hellip; \\
0
\end{bmatrix},&amp;hellip;,
e_n = \begin{bmatrix}
0 \\
0 \\
&amp;hellip; \\
1
\end{bmatrix}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R^n$ 的任何一個向量都可以被 standard vectors 表示成 uniquely linearly combined&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;矩陣向量乘法&#34;&gt;矩陣向量乘法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;$Av=v_1a_1+v_2a_2+&amp;hellip;+v_na_n$&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;identity-matrix&#34;&gt;Identity Matrix&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;對整數 n，$n \times n$ identity matrix
&lt;ul&gt;
&lt;li&gt;$I_n$&lt;/li&gt;
&lt;li&gt;每個 columns 是 standard vectors $e_1, e_2, &amp;hellip;, e_n$ in $R^n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stochastic-matrix&#34;&gt;Stochastic Matrix&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;對整數 n，$n \times n$ stochastic matrix&lt;/li&gt;
&lt;li&gt;所有 entry 都必須非負&lt;/li&gt;
&lt;li&gt;每個 column 的 entry 總和必須是 unity (相加為 1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Process Scheduling</title>
        <link>https://roykesydon.github.io/Blog/p/process-scheduling/</link>
        <pubDate>Mon, 20 Feb 2023 21:12:52 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/process-scheduling/</guid>
        <description>&lt;h1 id=&#34;process-scheduling&#34;&gt;Process Scheduling&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可能時機&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;running -&amp;gt; waiting&lt;/li&gt;
&lt;li&gt;running -&amp;gt; ready&lt;/li&gt;
&lt;li&gt;waiting -&amp;gt; ready&lt;/li&gt;
&lt;li&gt;running -&amp;gt; terminate&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process Scheduler&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preemptive scheduler (Time slice)
&lt;ul&gt;
&lt;li&gt;可以被搶占&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-Preemptive scheduler
&lt;ul&gt;
&lt;li&gt;又稱 cooperative scheduling&lt;/li&gt;
&lt;li&gt;只可能出現在時機 1 或 4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classification fo Processes(related to scheduling)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interactive Processes (50 - 150 ms)&lt;/li&gt;
&lt;li&gt;Batch Processes&lt;/li&gt;
&lt;li&gt;Real time Processes
&lt;ul&gt;
&lt;li&gt;Hard&lt;/li&gt;
&lt;li&gt;Soft&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classification of Processes(related to CPU usage)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU Bound&lt;/li&gt;
&lt;li&gt;I/O Bound&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;standard-scheduling-algorithm&#34;&gt;Standard Scheduling Algorithm&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;FCFS&lt;/li&gt;
&lt;li&gt;SJF&lt;/li&gt;
&lt;li&gt;SRTF&lt;/li&gt;
&lt;li&gt;Priority Based&lt;/li&gt;
&lt;li&gt;Highest Response Ratio Next&lt;/li&gt;
&lt;li&gt;Round Robin&lt;/li&gt;
&lt;li&gt;Virtual RR&lt;/li&gt;
&lt;li&gt;Multi-Level Queue Scheduler&lt;/li&gt;
&lt;li&gt;Multi-Level Feed Back Queue Scheduler&lt;/li&gt;
&lt;li&gt;Rotating Staircase Deadline Scheduler&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;unix-svr3-scheduler&#34;&gt;UNIX SVR3 Scheduler&lt;/h1&gt;
&lt;p&gt;有 32 個 runqueue，每個 runqueue 負責 4 個 priority values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;128 Priority values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0-49: Kernel&lt;/li&gt;
&lt;li&gt;50-127: User&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$Priority_j=Base_j+CPU_j(i)+nice_j$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base: 0-127&lt;/li&gt;
&lt;li&gt;$CPU_j(i) = DR * CPU_j(i-1)$
&lt;ul&gt;
&lt;li&gt;DR = $\frac{1}{2}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nice: -20 ~ +19
&lt;ul&gt;
&lt;li&gt;可以用 nice 和 renice 改 process nice value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;schedtool&#34;&gt;Schedtool&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Query &amp;amp; set per process scheduling parameters&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scheduling Policy
&lt;ul&gt;
&lt;li&gt;Real time
&lt;ol&gt;
&lt;li&gt;SCHED_RR&lt;/li&gt;
&lt;li&gt;SCHED_FIFO&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Conventional
&lt;ol&gt;
&lt;li&gt;SCHED_NORMAL (default)&lt;/li&gt;
&lt;li&gt;SCHED_BATCH (CPU intensive)&lt;/li&gt;
&lt;li&gt;SCHED_ISO (unused)&lt;/li&gt;
&lt;li&gt;SCHED_IDLEPRIO (low pri jobs)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nice Value (-20 to +19)&lt;/li&gt;
&lt;li&gt;Static Priority (1-99)&lt;/li&gt;
&lt;li&gt;CPU affinity
&lt;ul&gt;
&lt;li&gt;process 想運行在某個指定的 CPU 上，不被轉移到其他 CPU，才不會降低指定 CPU 的 cache 命中率
&lt;ul&gt;
&lt;li&gt;soft CPU affinity&lt;/li&gt;
&lt;li&gt;hard CPU affinity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cpus_allowed
&lt;ul&gt;
&lt;li&gt;一個用來指定 CPU 的 mask&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  schedtool &amp;lt;PID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Q-learning</title>
        <link>https://roykesydon.github.io/Blog/p/q-learning/</link>
        <pubDate>Mon, 20 Feb 2023 16:21:23 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/q-learning/</guid>
        <description>&lt;h2 id=&#34;rl-方法&#34;&gt;RL 方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Policy-based
&lt;ul&gt;
&lt;li&gt;learn 做事的 actor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value-based
&lt;ul&gt;
&lt;li&gt;不直接 learn policy，而是 Learn critic，負責批評&lt;/li&gt;
&lt;li&gt;Q-learning 屬於這種&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;critic&#34;&gt;Critic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不直接決定 action&lt;/li&gt;
&lt;li&gt;給予 actor $\pi$，評估 actor $\pi$ 有多好&lt;/li&gt;
&lt;li&gt;critic 的 output 依賴於 actor 的表現&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;state-value-function&#34;&gt;State Value Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;State value function $V^{\pi}(s)$
&lt;ul&gt;
&lt;li&gt;用 actor $\pi$，看到 s 後玩到結束，cumulated reward expectation 是多少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;評估方法&#34;&gt;評估方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Monte-Carlo(MC) based approach&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;critic 看 $\pi$ 玩遊戲&lt;/li&gt;
&lt;li&gt;訓練一個 network，看到不同的 state ，輸出 cumulated reward(直到遊戲結束，以下稱為 $G_a$)，解 regression 問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Temporal-difference(TD) approach&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MC 的方法至少要玩到遊戲結束才可以 update network，但有些遊戲超長
&lt;ul&gt;
&lt;li&gt;TD 只需要 {$s_t,a_t,r_t,s_{t+1}$}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$V^{\pi}(s_t)=V^{\pi}(s_{t+1})+r_t$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MS v.s. TD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MC
&lt;ul&gt;
&lt;li&gt;Larger variance
&lt;ul&gt;
&lt;li&gt;每次的輸出差異很大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TD
&lt;ul&gt;
&lt;li&gt;smaller variance
&lt;ul&gt;
&lt;li&gt;相較 $G_a$ 較小，因為這邊的 random variable 是 r，但 $G_a$ 是由很多 r 組合而成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;V 可能估得不準確
&lt;ul&gt;
&lt;li&gt;那 learn 出來的結果自然也不准&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;較常見&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;another-critic&#34;&gt;Another Critic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;State-action value function $Q^\pi(s,a)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;又叫 Q function&lt;/li&gt;
&lt;li&gt;當用 actor $\pi$ 時，在 state s 採取 a 這個 action 後的 cumulated reward expectation
&lt;ul&gt;
&lt;li&gt;有一個要注意的地方是，actor 看到 s 不一定會採取 a&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/q-learning/q-function.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/q-learning/how-to-use-q.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只要有 Q function，就可以找到&amp;quot;更好的&amp;quot; policy，再替換掉原本的 policy
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;更好的&amp;quot;定義
&lt;ul&gt;
&lt;li&gt;$V^{\pi^{&amp;rsquo;}} \ge V^{\pi}(s), \text{for all state s}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$\pi^{&amp;rsquo;}(s)=arg \underset{a}{max}Q^{\pi}(s,a)$
&lt;ul&gt;
&lt;li&gt;$\pi^{&amp;rsquo;}$ 沒有多餘的參數，就單純靠 Q function 推出來&lt;/li&gt;
&lt;li&gt;這邊如果 a 是 continuous 的會有問題，等等解決&lt;/li&gt;
&lt;li&gt;這樣就可以達到&amp;quot;更好的&amp;quot;policy，不過就不列證明了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-tip&#34;&gt;Basic Tip&lt;/h2&gt;
&lt;h3 id=&#34;target-network&#34;&gt;Target network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 training 的時候，把其中一個 Q 固定住，不然要學的 target 是不固定的，會不好 train&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/q-learning/target-network.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;exploration&#34;&gt;Exploration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;policy 完全 depend on Q function&lt;/li&gt;
&lt;li&gt;如果 action 總是固定，這不是好的 data collection 方法，要在 s 採取 a 過，才比較好估計 Q(s, a)，如果 Q function 是 table 就根本不可能估出來，network 也會有一樣的問題，只是沒那麼嚴重。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解法&#34;&gt;解法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Epsilon Greedy
&lt;ul&gt;
&lt;li&gt;$a=\begin{cases}
arg \underset{a}{max}Q(s,a), &amp;amp; \text{with probability } 1-\varepsilon \\
random, &amp;amp; otherwise
\end{cases}$&lt;/li&gt;
&lt;li&gt;通常 $\varepsilon$ 會隨時間遞減，因為你一開始 train 的時候不知道怎麼比較好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Boltzmann Exploration
&lt;ul&gt;
&lt;li&gt;$P(a|s)=\frac{exp(Q(s,a))}{\sum_a exp(Q(s,a))}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;replay-buffer&#34;&gt;Replay Buffer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把一堆的 {$s_t,a_t,r_t,s_{t+1}$} 存放在一個 buffer&lt;/li&gt;
&lt;li&gt;{$s_t,a_t,r_t,s_{t+1}$} 簡稱為 exp&lt;/li&gt;
&lt;li&gt;裡面的 exp 可能來自於不同的 policy&lt;/li&gt;
&lt;li&gt;在 buffer 裝滿的時候才把舊的資料丟掉&lt;/li&gt;
&lt;li&gt;每次從 buffer 隨機挑一個 batch 出來，update Q function&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;好處&#34;&gt;好處&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;跟環境作互動很花時間，這樣可以減少跟環境作互動的次數&lt;/li&gt;
&lt;li&gt;本來就希望 batch 裡的 data 越 diverse 越好，不會希望 batch 裡的 data 都是同性質的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;issue&#34;&gt;issue&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;我們要觀察 $\pi$ 的 value，混雜了一些不是 $\pi$ 的 exp 到底有沒有關係?
&lt;ul&gt;
&lt;li&gt;理論上沒問題，但李老師沒解釋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;typical-q-learning-演算法&#34;&gt;Typical Q-learning 演算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;初始化 Q-fucntion Q，target Q-function $\hat{Q}=Q$&lt;/li&gt;
&lt;li&gt;在每個 episode
&lt;ul&gt;
&lt;li&gt;對於每個 time step t
&lt;ul&gt;
&lt;li&gt;給 state $s_t$，根據 Q 執行 action $a_t$ (epsilon greedy)&lt;/li&gt;
&lt;li&gt;獲得 reward $r_t$，到達 $s_{t+1}$&lt;/li&gt;
&lt;li&gt;把 {$s_t,a_t,r_t,s_{t+1}$} 存到 buffer&lt;/li&gt;
&lt;li&gt;從 buffer sample {$s_t,a_t,r_t,s_{t+1}$}(通常是一個 batch)&lt;/li&gt;
&lt;li&gt;Target $y=r_i+\underset{a}{max}\hat{Q}(s_{i+1},a)$&lt;/li&gt;
&lt;li&gt;Update Q 的參數，好讓 $Q(s_i,a_i)$ 更接近 y(regression)&lt;/li&gt;
&lt;li&gt;每 C 步 reset $\hat{Q}=Q$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;adveanced-tip&#34;&gt;Adveanced Tip&lt;/h2&gt;
&lt;h3 id=&#34;double-dqn&#34;&gt;Double DQN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q Value 往往被高估
&lt;ul&gt;
&lt;li&gt;我們的目的是要讓 $Q(s_t, a_t)$ 和 $r_t+\underset{a}{max}Q(s_{t+1},a)$ 越接近越好(後者就是 target)&lt;/li&gt;
&lt;li&gt;target 常常不小心設太高，因為如果有 action 被高估了，就會選那個當 target&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Double DQN: 兩個函式 $Q$ 和 $Q^{&amp;rsquo;}$
&lt;ul&gt;
&lt;li&gt;把 target 換成  $r_t+Q^{&amp;rsquo;}(s_{t+1},arg \underset{a}{max}Q(s_{t+1},a))$&lt;/li&gt;
&lt;li&gt;選 action 交給 $Q$，實際算交給 $Q^{&amp;rsquo;}$
&lt;ul&gt;
&lt;li&gt;如果 $Q$ 選了高估的 action，$Q^{&amp;rsquo;}$ 有可能修正回來&lt;/li&gt;
&lt;li&gt;如果 $Q^{&amp;rsquo;}$ 高估，$Q$ 不一定會選到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$Q^{&amp;rsquo;}$ 是 target network(固定不動)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dueling-dqn&#34;&gt;Dueling DQN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;改變 network 架構&lt;/li&gt;
&lt;li&gt;分成兩條 path
&lt;ul&gt;
&lt;li&gt;第一條算 scalar&lt;/li&gt;
&lt;li&gt;第二條算 vector，每個 action 都有個 value&lt;/li&gt;
&lt;li&gt;把 scalar 加到每一個維度&lt;/li&gt;
&lt;li&gt;只更改到 V(s) 的時候，會全部的 action 都改到，可能會是一個比較有效率的方式，不用 sample 所有的 action
&lt;ul&gt;
&lt;li&gt;但有可能模型不管 V(s)，直接設 0，只改 A&lt;/li&gt;
&lt;li&gt;所以會對 A 下 constrain，讓 network 傾向於改 V
&lt;ul&gt;
&lt;li&gt;比如同個 state 下的所有 action 要生出 A(s,a) 總和為 0
&lt;ul&gt;
&lt;li&gt;在 A 的輸出加個 normalization 即可辦到，這個 normalization 就是把每個維度都減掉平均&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/q-learning/dueling-dqn.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;prioritized-replay&#34;&gt;Prioritized Replay&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原本是 uniform 的從 buffer sample data&lt;/li&gt;
&lt;li&gt;改讓 「有更大的 TD error」的 data 有更高的機率被 sample
&lt;ul&gt;
&lt;li&gt;TD error 就是 $Q(s_t, a_t)$ 和 target 的差距&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;實際在做的時候有額外的細節，不會只改 sampling 的 process，還要改 update 參數的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multi-step&#34;&gt;Multi-step&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Balance between MC 和 TD&lt;/li&gt;
&lt;li&gt;TD 只需要存 {$s_t,a_t,r_t,s_{t+1}$}&lt;/li&gt;
&lt;li&gt;改存 {$s_t,a_t,r_t,&amp;hellip;,s_{t+N},a_{t+N},r_{t+N}, s_{t+N+1}$}&lt;/li&gt;
&lt;li&gt;我們的目的是要讓 $Q(s_t, a_t)$ 和 $\displaystyle\sum_{t^{&amp;rsquo;}=t}^{t+N} r_{t^{&amp;rsquo;}}+\hat{Q}(s_{t+N+1},a_{t+N+1})$ 越接近越好(後者就是 target)
&lt;ul&gt;
&lt;li&gt;$a_{t+N+1}=arg\underset{a}{max}\hat{Q}(s_{t+N+1},a)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同時有 MC 和 TD 的好處和壞處
&lt;ul&gt;
&lt;li&gt;估測的影響比較輕微&lt;/li&gt;
&lt;li&gt;r 比較多項，variance 比較大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;noisy-net&#34;&gt;Noisy Net&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;improve exploration&lt;/li&gt;
&lt;li&gt;Noise on Action
&lt;ul&gt;
&lt;li&gt;Epsilon Greedy(之前的回顧)
&lt;ul&gt;
&lt;li&gt;$f_X(x) = \begin{cases}
arg \underset{a}{max}Q(s,a), &amp;amp; \text{with probability }1-\varepsilon \\
random, &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;給同樣的 state，採取的 action 不一定一樣&lt;/li&gt;
&lt;li&gt;沒有真實的 policy 會這樣運作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Noise on Parameters
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$a = arg \underset{a}{max}\tilde{Q}(s,a)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在每個 episode 剛開始的時候，在 Q-function 的參數上面加上 gaussian noise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;給同樣的 state，採取同樣的 action&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;叫做 state-dependent exploration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;explore in a consistent way&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;distributional-q-function&#34;&gt;Distributional Q-function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q-function 生出的東西是 cumulated reward 的期望值
&lt;ul&gt;
&lt;li&gt;所以我們是在對 distribution 取 mean，但不同的 distribution 也可能有同樣的 mean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;想做的事情是 model distribution&lt;/li&gt;
&lt;li&gt;如果有做這個，就比較不會有 over estimate reward 的結果，反而容易 under estimate，使 double 比較沒用
&lt;ul&gt;
&lt;li&gt;output 的 range 不可能無限寬，超過邊界的 reward 會被丟掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rainbow&#34;&gt;Rainbow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;綜合一堆方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;continuous-actions&#34;&gt;Continuous actions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Q learning 不容易處理 continuous action&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;sample n 個可能的 a，都丟 Q function 看誰最大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gradient descent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把 a 當作 parameter，要找一組 a 去 maximize Q function
&lt;ul&gt;
&lt;li&gt;運算量大，要 iterative 的 update a&lt;/li&gt;
&lt;li&gt;不一定可以找到 global 的最佳解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特別設計 Q network，讓解 optimization 的問題變容易&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;範例
&lt;ul&gt;
&lt;li&gt;Q network 輸出 $\mu(s)$、$\Sigma(s)$、$V(s)$，個別是 vector、matrix、scalar&lt;/li&gt;
&lt;li&gt;a 是 continuous 的 Action，是一個 vector，每個維度都是實數&lt;/li&gt;
&lt;li&gt;$\Sigma(s)$ 是 positive definite 的，實作的時候會把 $\Sigma$ 和它的 transpose 相乘&lt;/li&gt;
&lt;li&gt;$Q(s,a)=-(a-\mu(s))^T\Sigma(s)(a-\mu(s))+V(s)$&lt;/li&gt;
&lt;li&gt;$(a-\mu(s))^T\Sigma(s)(a-\mu(s))$ 這項必為正，所以 $a=\mu(s)$ 的時候就是最佳解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要用 Q-learning&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Proximal Policy Optimization(PPO)</title>
        <link>https://roykesydon.github.io/Blog/p/proximal-policy-optimizationppo/</link>
        <pubDate>Mon, 20 Feb 2023 12:35:56 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/proximal-policy-optimizationppo/</guid>
        <description>&lt;h1 id=&#34;onoff-policy&#34;&gt;On/Off-policy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;On-policy
&lt;ul&gt;
&lt;li&gt;學習的 agent 和與環境互動的 agent 是同一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Off-policy
&lt;ul&gt;
&lt;li&gt;學習的 agent 和與環境互動的 agent 是不同個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;想從-on-policy-轉-off-policy&#34;&gt;想從 On-policy 轉 Off-policy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;On-policy 每次都要重新蒐集資料，很花時間&lt;/li&gt;
&lt;li&gt;由另一個 $\pi_{\theta^{&amp;rsquo;}}$ 去 train $\theta$，$\theta^{&amp;rsquo;}$是固定的，所以我們可以 re-use sample data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;importance-sampling&#34;&gt;Importance Sampling&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是一個 general 的想法，不限於 RL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$E_{x \text{\textasciitilde} p}[f(x)]\approx \frac{1}{N}\displaystyle\sum_{i=1}^N f(x^i)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x^i$ is sampled from p(x)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我們遇到的問題是沒辦法從 p 來 sample data，只能透過 q(x) 去 sample $x^i$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把上式改寫成 $E_{x \text{\textasciitilde} p}[f(x)]=E_{x \text{\textasciitilde} q}[f(x)\frac{p(x)}{q(x)}]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;issue&#34;&gt;Issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;雖然理論上 q 可以任意選，只要不要 q(x) 是 0 的時候 p(x) 不是 0，實作上 p 和 q 不能差太多，不然會有問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這兩項的 Variance 不一樣，如果 p 除以 q 差距很大，右邊的 Variance 會很大，如果 sample 不夠多次就會有問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/ppo/importance-sample-issue.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;轉換&#34;&gt;轉換&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\triangledown \overline{R_{\theta}}=E_{\tau \text{\textasciitilde}p_{\theta}(\tau)}[R(\tau)\triangledown log p_{\theta} (\tau)]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\triangledown \overline{R_{\theta}}=E_{\tau \text{\textasciitilde}p_{\theta^{&amp;rsquo;}}(\tau)}[\frac{p_{\theta}(\tau)}{p_{\theta^{&amp;rsquo;}}(\tau)}R(\tau)\triangledown log p_{\theta} (\tau)]$&lt;/li&gt;
&lt;li&gt;從 $\theta^{&amp;rsquo;}$ sample 資料&lt;/li&gt;
&lt;li&gt;更新 $\theta$ 多次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;advantage-function&#34;&gt;Advantage function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E_{(s_t,a_t)\text{\textasciitilde}\pi_{\theta}}[A^{\theta}(s_t,a_t)\triangledown log p_\theta(a_t^n|s_t^n)]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E_{(s_t,a_t)\text{\textasciitilde}\pi_{\theta^{&amp;rsquo;}}}[\frac{P_\theta(s_t,a_t)}{P_{\theta^{&amp;rsquo;}}(s_t,a_t)}A^{\theta^{&amp;rsquo;}}(s_t,a_t)\triangledown log p_\theta(a_t^n|s_t^n)]$&lt;/li&gt;
&lt;li&gt;要注意 Advantage 的結果要由 $\theta^{&amp;rsquo;}$ 得出，是 $\theta^{&amp;rsquo;}$在和環境互動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新的 objective function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$J^{\theta^{&amp;rsquo;}}(\theta)=E_{(s_t,a_t)\text{\textasciitilde}\pi_{\theta^{&amp;rsquo;}}}[\frac{p_\theta(a_t|s_t)}{p_{\theta^{&amp;rsquo;}}(a_t|s_t)}A^{\theta^{&amp;rsquo;}}(s_t,a_t)]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ppo&#34;&gt;PPO&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;確保 $\theta$ 和 $\theta^{&amp;rsquo;}$ 不會差太多&lt;/li&gt;
&lt;li&gt;$J_{PPO}^{\theta^{&amp;rsquo;}}(\theta)=J^{\theta^{&amp;rsquo;}}(\theta)-\beta KL(\theta, \theta^{&amp;rsquo;})$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前身-trpo&#34;&gt;前身 TRPO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Trust Region Policy Optimization&lt;/li&gt;
&lt;li&gt;$J_{TRPO}^{\theta^{&amp;rsquo;}}(\theta)=E_{(s_t,a_t)\text{\textasciitilde}\pi_{\theta^{&amp;rsquo;}}}[\frac{p_\theta(a_t|s_t)}{p_{\theta^{&amp;rsquo;}}(a_t|s_t)}A^{\theta^{&amp;rsquo;}}(s_t,a_t)], KL(\theta, \theta^{&amp;rsquo;})&amp;lt;\delta$&lt;/li&gt;
&lt;li&gt;constrain 很難處理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kl-divergence&#34;&gt;KL divergence&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;這邊不是 $\theta$ 和 $\theta^{&amp;rsquo;}$ 參數上的距離，而是 behavior 的距離
&lt;ul&gt;
&lt;li&gt;參數上的距離是指這兩個參數有多像&lt;/li&gt;
&lt;li&gt;是給同樣的 state 生出 action 的 distribution 要像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;algorithm&#34;&gt;algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;初始參數 $\theta^0$&lt;/li&gt;
&lt;li&gt;每個 iteration
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用 $\theta^k$ 和環境互動，蒐集{$s_t,a_t$}，並計算 advantage $A^{\theta^k}(s_t,a_t)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找出 theta 最佳化 $J_{PPO}(\theta)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$J_{PPO}^{\theta^{k}}(\theta)=J^{\theta^{k}}(\theta)-\beta KL(\theta, \theta^{k})$&lt;/li&gt;
&lt;li&gt;可以更新很多次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;動態調整 $\beta$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adaptive KL Penalty&lt;/li&gt;
&lt;li&gt;設可接受的 KL 數值範圍&lt;/li&gt;
&lt;li&gt;if $KL(\theta,\theta^k)&amp;gt;KL_{max},\text{increase} \beta$&lt;/li&gt;
&lt;li&gt;if $KL(\theta,\theta^k)&amp;lt;KL_{min},\text{decrease} \beta$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ppo2&#34;&gt;PPO2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PPO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$J_{PPO}^{\theta^{k}}(\theta)=J^{\theta^{k}}(\theta)-\beta KL(\theta, \theta^{k})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PPO2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$J_{PPO2}^{\theta^{k}}(\theta)\approx \displaystyle\sum_{(s_t,a_t)}min(\frac{p_{\theta}(a_t|s_t)}{p_{\theta^k}(a_t|s_t)}A^{\theta^k}(s_t,a_t), \\
clip(\frac{p_{\theta}(a_t|s_t)}{p_{\theta^k}(a_t|s_t)}, 1-\varepsilon, 1+\varepsilon)A^{\theta^k}(s_t,a_t))$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/ppo/ppo2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Policy Gradient</title>
        <link>https://roykesydon.github.io/Blog/p/policy-gradient/</link>
        <pubDate>Sun, 19 Feb 2023 17:16:14 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/policy-gradient/</guid>
        <description>&lt;h1 id=&#34;basic-components&#34;&gt;Basic Components&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Actor
&lt;ul&gt;
&lt;li&gt;Policy $\pi$ is a network with parameter $\theta$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Env&lt;/li&gt;
&lt;li&gt;Reward Function&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;trajectory&#34;&gt;Trajectory&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/drl/policy-gradient/aer.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一場遊戲，把 env 輸出的 s 和 actor 輸出的 a 串起來，是一個 Trajectory&lt;/li&gt;
&lt;li&gt;Trajectory $\tau$ = {$s_1,a_1,s_2,a_2,&amp;hellip;,s_T,a_T$}&lt;/li&gt;
&lt;li&gt;$p_{\theta}(\tau)=p(s_1)\displaystyle\prod_{t=1}^Tp_{\theta}(a_t|s_t)p(s_{t+1}|s_t,a_t)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;update&#34;&gt;Update&lt;/h1&gt;
&lt;p&gt;$\theta \leftarrow \theta + \eta \triangledown \overline{R}_{\theta}$&lt;/p&gt;
&lt;p&gt;$\triangledown \overline{R_{\theta}} = \displaystyle\sum_{\tau} R(\tau) \triangledown p_{\theta} (\tau) \\
=\frac{1}{N}\displaystyle\sum_{n=1}^{N}\displaystyle\sum_{t=1}^{T_n}R(\tau^n)\triangledown log p_{\theta} (a_t^n|s_t^n)$&lt;/p&gt;
&lt;h1 id=&#34;實作&#34;&gt;實作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;常見公式
&lt;ul&gt;
&lt;li&gt;$\triangledown f(x)=f(x)\triangledown logf(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;用當前模型蒐集一堆 Trajectory&lt;/li&gt;
&lt;li&gt;更新模型&lt;/li&gt;
&lt;li&gt;回到第一步&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;細節
&lt;ul&gt;
&lt;li&gt;做一個分類問題，把 state 當作分類器的 Input，把 action 當作分類器的 ground truth 作訓練&lt;/li&gt;
&lt;li&gt;在實作分類問題的時候，objective function 都會寫成 minimize cross entropy，就是 maximize log likelihood&lt;/li&gt;
&lt;li&gt;RL 和一般分類的區別是，要記得在 loss 前面乘上 $R(\tau^n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tip&#34;&gt;Tip&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Add a Baseline
&lt;ul&gt;
&lt;li&gt;$R(\tau^n)$ 有可能永遠都為正
&lt;ul&gt;
&lt;li&gt;此時等於告訴 Model 說，今天不管是什麼 action，都要提高它的機率。不一定會有問題，因為雖然都是正的，但正的量有大有小，可能某些 action 上升的幅度會更大。因為我們是在做 sampling，不一定會 sample 到某些 action，本來想的情況是所有的 trajectory 都會出現才沒問題。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解法: 希望 reward 不要總是正的
&lt;ul&gt;
&lt;li&gt;$\triangledown \overline{R_{\theta}}\approx \frac{1}{N}\displaystyle\sum_{n=1}^{N}\displaystyle\sum_{t=1}^{T_n}(R(\tau^n)-b)\triangledown log p_{\theta}(a_t^n|s_t^n)$&lt;/li&gt;
&lt;li&gt;$b \approx E[R(\tau)]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assign Suitable Credit
&lt;ul&gt;
&lt;li&gt;原本整場遊戲的所有 action 都會乘上 $R(\tau)$，但這不太公平，因為就算結果是好的，不代表所有 action 都是對的，反之亦然。在理想的情況下，如果 sample 夠多，就可以解決這問題。&lt;/li&gt;
&lt;li&gt;解法
&lt;ol&gt;
&lt;li&gt;只計算從這個 action 後的 reward 總和
&lt;ul&gt;
&lt;li&gt;因為前面的 reward 和你做了什麼沒關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接續解法 1，把比較未來的 reward 做 discount
&lt;ul&gt;
&lt;li&gt;乘某個小於 1 的 $\gamma^{t^{&amp;rsquo;}-t}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;advantage-function&#34;&gt;Advantage function&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;base 可以是 state-dependent，可以根據 network 得出，以後再說&lt;/li&gt;
&lt;li&gt;$(Reward-b)$ 可以合起來看做 Advantage function $A^{\theta}(s_t,a_t)$
&lt;ul&gt;
&lt;li&gt;這邊 Reward 不管你是什麼形式，有沒有 discount。&lt;/li&gt;
&lt;li&gt;它的意義是，這個 action 相較於其他的 action 有多好，而不是絕對好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這個 A 通常可以由某個類神經網路估計，那個類神經網路叫做 critic，以後講 Actor-Critic 的時候再說&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MAE 論文</title>
        <link>https://roykesydon.github.io/Blog/p/mae-%E8%AB%96%E6%96%87/</link>
        <pubDate>Wed, 15 Feb 2023 16:08:46 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/mae-%E8%AB%96%E6%96%87/</guid>
        <description>&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2111.06377&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Masked Autoencoders Are Scalable Vision Learners&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;這篇論文顯示出 MAE 是 CV 中的 scalable self-supervised learners。&lt;/p&gt;
&lt;p&gt;MAE 的方法很簡單&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隨機蓋住輸入影像的一些 patch&lt;/li&gt;
&lt;li&gt;重建 missing pixels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具備兩個核心設計&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非對稱的 encoder-decoder 架構，encoder 只作用於可見的 patch 子集合(沒有 mask tokens)，lightweight decoder 則根據 latent representation 和 make tokens 來重建圖片。&lt;/li&gt;
&lt;li&gt;當遮住高比例(比如 75%)的影像時，會得到一個 nontrivial 和 meaningful 的 self-supervisory task&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;結合這兩點設計，可以有效地訓練大模型。
以 ViT-Huge 用 ImageNet-1K 訓練(訓練集一百多萬張照片)可達到 87.8% 的準確度。&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/MAE/intro.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/MAE/valid-example.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/MAE/valid-example-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在 CV 中，常需要大量 labeled images。
NLP 中，自監督預訓練處理了需要大量標註資料的問題。
masked autoencoders 是一種更 general 的 denoising autoencoders 的形式。
BERT 非常成功，autoencoding methods 在 CV 的研究卻落後 NLP，作者思考是什麼讓 masked autoencoding 在 CV 和 NLP 產生不同。
有以下觀點&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直到前陣子，CV 中的 CNN 是主流，但卷積層不好引入 mask tokens 或 positional embedding 這些 indicator。但這些可以透過 ViT 來解決，不應成為問題。&lt;/li&gt;
&lt;li&gt;語言和視覺的 Information density 不同，語言是 highly semantic 和 information-dense，使填字本身不是很簡單的事情，但影像含有大量冗餘的訊息，缺失的部分比較好從相鄰的 patch 重建，比如直接插值，所以作者用一種簡單的策略，隨機 mask 很大一部分的 patch，創造一個具有挑戰性的自監督任務，強迫模型關注 global 的資訊。&lt;/li&gt;
&lt;li&gt;關於 decoder，CV 還原 pixel，pixel 屬於 lower semantic level，NLP 還原 word，word 的 semantic information 較高。作者發現，雖然在 BERT 中，可以用簡單的 decoder 還原(一個 MLP)，但 CV 中 decoder 的設計就很重要。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基於以上觀點，作者提出 MAE，隨機遮住大量的 patch，並在 pixel space 重建失去的 patch。而且是非對稱 encoder-decoder 架構，encoder 只會看到可見的 patch，但 docoder 除了 latent representation，還會看到 mask tokens。這種設計在非常高的掩蓋率(比如 75%)下不但可以提高準確度，還可以讓 encoder 只處理較少比例(比如 25%)的 patch，將訓練時間減少 3 倍或更多，使 MAE 可以輕鬆擴展成更大的模型。&lt;/p&gt;
&lt;p&gt;在這樣的架構下，用 MAE 的 pre-training，可以訓練非常吃 data 的模型，比如 ViT-Large/-Huge，而只使用 ImageNet-1K。&lt;/p&gt;
&lt;p&gt;用 ImageNet-1K 在 vanilla ViT-Huge 上 fine-tune 可達到 87.8% 準確度，比以往只使用 ImageNet-1K 的結果都高。&lt;/p&gt;
&lt;p&gt;在 obejct detection、instance segmentation、semantic segmentation 上做 transfer learning 都達到不錯的效果，可以打敗用監督式預訓練模型的對手。&lt;/p&gt;
&lt;h1 id=&#34;相關工作&#34;&gt;相關工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Autoencoding
&lt;ul&gt;
&lt;li&gt;MAE 是一種 denoising autoencoding 的形式，但和 DAE 還是差別很大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Masked image encoding
&lt;ul&gt;
&lt;li&gt;iGPT、ViT、BEiT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;approach&#34;&gt;Approach&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Masking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和 ViT 一樣，把圖片切成多個 patch，對於 patch 均勻隨機地採樣保留，剩下地遮住&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MAE encoder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ViT&lt;/li&gt;
&lt;li&gt;也有 positional embedding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MAE decoder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transformer block&lt;/li&gt;
&lt;li&gt;輸入
&lt;ul&gt;
&lt;li&gt;encoded visible patches&lt;/li&gt;
&lt;li&gt;mask tokens
&lt;ul&gt;
&lt;li&gt;shared, learned vector&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;都會加入 positional embedding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用相較 encoder 輕量的解碼器，所有的 patch 由這個輕量的 decoder 處理，減少預訓練時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reconstruction target&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decoder 的最後一層是 linear projection，之後再 reshape 成你要的  patch&lt;/li&gt;
&lt;li&gt;loss function
&lt;ul&gt;
&lt;li&gt;mean squared error(MSE)&lt;/li&gt;
&lt;li&gt;只算 masked patched 的 MSE，像 BERT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple implementation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先取得一系列 token(patch 做 linear projection + positional embedding)&lt;/li&gt;
&lt;li&gt;randomly shuffle，根據比例移除尾端一部份&lt;/li&gt;
&lt;li&gt;encoding 後，尾端接上 mask tokens，並且 unshuffle&lt;/li&gt;
&lt;li&gt;加上 positional embedding 後，給 decoder&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;imagenet-experiments&#34;&gt;ImageNet Experiments&lt;/h1&gt;
&lt;p&gt;在 ImageNet-1K 上做自監督的預訓練，然後做&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;end-to-end fine-tuning
&lt;ul&gt;
&lt;li&gt;所有參數都可改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;linear probing
&lt;ul&gt;
&lt;li&gt;只改最後一層線性層&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/MAE/vit-mae.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/MAE/result.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/MAE/ratio-result.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;optimal masking ratio 意外地高，相比 BERT 只有 15%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/MAE/fine-tune-blocks.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;討論和結論&#34;&gt;討論和結論&lt;/h1&gt;
&lt;p&gt;在 CV 實用的預訓練做法主流是監督式的，CV 中自監督的做法可能正跟著 NLP 的軌跡走。&lt;/p&gt;
&lt;p&gt;要仔細處理圖像和語言的區別，作者去除圖片中很可能不構成 semantic segment 的部分，而不是移除某個 object。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ViT 論文</title>
        <link>https://roykesydon.github.io/Blog/p/vit-%E8%AB%96%E6%96%87/</link>
        <pubDate>Sun, 12 Feb 2023 00:27:55 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/vit-%E8%AB%96%E6%96%87/</guid>
        <description>&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2010.11929&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;在 CV 領域 transformer 表現有限，目前 attention 常常是和卷積神經網路一起用，或是用來把一些卷積層換成 self-attention，但整體架構不變。這篇論文想展現一個純 Transformer 可以直接在影像分類上表現很好。如果用大量資料作預訓練，再遷移到中小型的資料集，可以和 SOTA 的 CNN 表現得一樣好，還需要較少的訓練資源作訓練。&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;self-attention-based 架構，特別是 Transformer，已經是 NLP 的重要選擇。主流的作法是在大型文字資料集上作訓練，再針對小型任務資料集作 fine-tune。由於 Transformer 的計算效率高，還有可擴展性，可以 train 一些很大的 model，隨著 model 和資料集增大，目前還沒看出飽和的現象。&lt;/p&gt;
&lt;p&gt;然而在 CV，CNN 還是主流，一些工作嘗試用 self-attention 結合 CNN-like 的架構，比如把 feature map 當 transformer 的輸入，因為原始 pixel 太多，或甚至把卷積層全換成 self-attention，雖然後者理論上效率很高(原論文中有另外 cite 兩篇作法)，但因為他們做法特殊，在現代硬體上很難加速，所以無法很有效地擴展。在 large-scale 的影像識別上， ResNet-like 的架構還是 SOTA。&lt;/p&gt;
&lt;p&gt;該實驗直接把一個標準的 Transformer 作用於圖片上，只作最少的修改。把影像分成多個 patch，並把它們變成一系列的 linear embedding，當作 NLP 中的 tokens(words) 來處理。&lt;/p&gt;
&lt;p&gt;當在中型大小的資料集(e.g. ImageNet)上訓練，如果沒有 strong regularization，ViT 會略輸同等大小的 ResNets&lt;/p&gt;
&lt;p&gt;這篇論文在更大的資料集(14M-300M 的影像)上訓練，就打敗了 inductive bias。在大量資料上作預訓練就很讚。&lt;/p&gt;
&lt;h1 id=&#34;related-work&#34;&gt;Related Work&lt;/h1&gt;
&lt;p&gt;大型的 Transformer-based 模型常常是先在大資料集上預訓練然後根據任務 fine-tune，比如 BERT 和 GPT。&lt;/p&gt;
&lt;p&gt;要把 self-attention 用在 CV 上，最簡單的做法就是把每個 Pixel 當一個元素，但 self-attention 是平方複雜度，在現實的圖片很難應用。一個應用 Transformer 的做法是只把 self-attention 用在 local neighborhood，另外一個是用 Sparse Transformer，還有一堆特殊的方法，雖然表現不錯，但要用硬體加速起來不容易。&lt;/p&gt;
&lt;p&gt;另一個有關的模型是 iGPT，在 reduce image resolution 和 color space 後把 transformer 應用在 image pixels 上。它用非監督式訓練後，再 fine-tune 或做 linear probing(只更新最後的 linear layer) 分類任務，表現很好。&lt;/p&gt;
&lt;p&gt;已經有類似的工作了，抽取 patches of size 2 * 2，最後再接 full self-attention，基本上和 ViT 非常像，這篇論文進一步證明了作大規模的預訓練可以讓 Transformer 和 SOTA 的 CNN 相比，而且 ViT 因為 patch 比較大，可以處理 medium-resolution 的圖片。這問題是可預期的，因為 Transformer 缺少了一些 inductive biases。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inductive biases
&lt;ul&gt;
&lt;li&gt;一些假設&lt;/li&gt;
&lt;li&gt;比如 CNN 常有四個假設
&lt;ul&gt;
&lt;li&gt;locality&lt;/li&gt;
&lt;li&gt;translation invariance with pooling layers
&lt;ul&gt;
&lt;li&gt;平移不變性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;translation equivariance
&lt;ul&gt;
&lt;li&gt;f(g(x)) = g(f(x))&lt;/li&gt;
&lt;li&gt;卷積和平移的先後順序沒差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;method&#34;&gt;Method&lt;/h1&gt;
&lt;p&gt;模型盡可能類似原始 Transformer，這樣可以把一些 NLP 上成功的 Transformer 架構拿來用，還可以用一些很有效率的 implementation&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/ViT/ViT.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/ViT/ViT-process.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;embedding 維度是 768 = 16 * 16 * 3
position embedding 的做法是 standard learnable 1D positional embeddings，就是 BERT 的做法，簡單來說就是生出一張可以訓練的表，(序列長度, embedding size)，作者也有嘗試其他方法，但發現成效差不多，比如 2D positional embedding，概念就是從生出(序列長度, embedding size)變成生出 2 個(sqrt(序列長度), embedding size)。&lt;/p&gt;
&lt;p&gt;[class] 的概念是 NLP 出來的，ResNet-like 的架構常見的做法也有通過 globally average-pooling (GAP)來生出向量，再接上分類器做預測。實驗發現直接在 transformer 的輸出做 GAP 和 [class] 都可以達到不錯的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/ViT/ViT-gap.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/ViT/ViT-dataset.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/deep-learning/ViT/ViT-acc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;拿標準的 Transformer 來作 Image recognition，和以往用 self-attention 在 CV 的方法不一樣，除了一開始的 initial patch extraction，沒有引入其他影像特有的 inductive biases。直接把圖片當成是一系列的 patch，然後直接用 Transformer encoder 當一般 NLP 任務處理。在很多影像分類訓練集上表現得更好還在 pre-train 上相對便宜。&lt;/p&gt;
&lt;p&gt;還有一些值得挑戰的地方，比如把 ViT 應用在其他 CV 任務，比如 detection 和 segmentation。另一個挑戰是探索自監督預訓練的方法。這篇論文其實有實驗自監督，表現 OK，但和監督式還是有很大的落差。擴大 ViT 可能有更好的結果。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>機率論 - IV</title>
        <link>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-iv/</link>
        <pubDate>Sun, 05 Feb 2023 15:18:41 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-iv/</guid>
        <description>&lt;h1 id=&#34;隨機變數之和&#34;&gt;隨機變數之和&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Z=X+Y&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$p_Z(z)=\displaystyle\sum_{x=-\infty}^{\infty}p_{X,Y}(x,z-x)\\
=\displaystyle\sum_{y=-\infty}^{\infty}p_{X,Y}(z-y,y)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f_Z(z)=\int_{-\infty}^{\infty}f_{X,Y}(x,z-x)dx\\
=\int_{-\infty}^{\infty}f_{X,Y}(z-y,y)dy$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 X, Y 獨立&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;離散&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p_Z(z)=\displaystyle\sum_{x=-\infty}^{\infty}p_{X}(x)\cdot p_Y(z-x)\\
=\displaystyle\sum_{y=-\infty}^{\infty}p_{X}(z-y)\cdot p_Y(y)$
&lt;ul&gt;
&lt;li&gt;這兩個等式是 discrete convolution&lt;/li&gt;
&lt;li&gt;$=p_X(z) * p_Y(z)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;連續&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$f_Z(z)=\int_{-\infty}^{\infty}f_{X}(x) f_Y(z-x) dx\\
=\int_{-\infty}^{\infty}f_{X}(z-y) f_Y(y) dy$
&lt;ul&gt;
&lt;li&gt;這兩個等式是 continuous convolution&lt;/li&gt;
&lt;li&gt;$=f_X(z) * f_Y(z)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有 n 個獨立隨機變數&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X=X_1+X_2+&amp;hellip;+X_n$
&lt;ul&gt;
&lt;li&gt;如果 $X_1,&amp;hellip;,X_n$ 獨立
&lt;ul&gt;
&lt;li&gt;$p_X(x)=p_{X_1}(x) * p_{X_2}(x) * p_{X_3}(x) * &amp;hellip; * p_{X_n}(x)$
&lt;ul&gt;
&lt;li&gt;連續做 convolution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$f_X(x)=f_{X_1}(x) * f_{X_2}(x) * f_{X_3}(x) * &amp;hellip; * f_{X_n}(x)$
&lt;ul&gt;
&lt;li&gt;連續做 convolution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mgf&#34;&gt;MGF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;moment generating function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;convolution 很難算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有多個連續 convolution 也適用下面流程，全部一次一起相乘&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;給定 $p_{X_1}(x), p_{X_2}(x)$，目標是求 $p_{X_1}(x) * p{X_2}(x)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;轉換到 MGF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\phi_{X_1}(s)=E \lbrack e^{sX_1} \rbrack\\
= \displaystyle\sum_{x=-\infty}^{\infty}e^{sx}\cdot p_{X_1}(x)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\phi_{X_2}(s)=E \lbrack e^{sX_2} \rbrack$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相乘
$\phi_{X_1}(s) \cdot \phi_{X_2}(s)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逆轉換&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\phi_X(s)$ 定義&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\phi_X(s)=E \lbrack e^{sX} \rbrack = \begin{cases}
\displaystyle\sum_{x=-\infty}^{\infty} e^{sx} \cdot p_{X}(x) &amp;amp; 離散, \\
\int_{-\infty}^{\infty} e^{sx} \cdot f_{X}(x)dx &amp;amp; 連續
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性質&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Y = aX + b
&lt;ul&gt;
&lt;li&gt;$\phi_Y(s) = e^{sb} \cdot \phi_X(as) $&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常見離散機率分佈的 MGF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X$~$Bernoulli(p)$
&lt;ul&gt;
&lt;li&gt;$\phi_X(s)=1-p+pe^s$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$X$~$BIN(n, p)$
&lt;ul&gt;
&lt;li&gt;作 n 次實驗成功次數等於個實驗室成功次數的總和&lt;/li&gt;
&lt;li&gt;$X = X_1 + X_2 + &amp;hellip; + X_n, X_i 獨立, Xi$~$Bernoulli(p)$&lt;/li&gt;
&lt;li&gt;$\phi_{X_i}(s)=1-p+pe^s$&lt;/li&gt;
&lt;li&gt;$\phi_{X}(s)=\lbrack 1-p+pe^s \rbrack ^n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$X$~$Geometric(p)$
&lt;ul&gt;
&lt;li&gt;自行推導&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$X$~$Pascal(k,p)$
&lt;ul&gt;
&lt;li&gt;看到第 k 次成功，花的總實驗室次數等於第 1 號成功花多少次 + 第 2 號 +&amp;hellip;+ 第 k 號&lt;/li&gt;
&lt;li&gt;$X = X_1 + X_2 + &amp;hellip; + X_n, X_i 獨立, Xi$~$Gemetric(p)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$X$~$Exponential(\lambda)$
&lt;ul&gt;
&lt;li&gt;自行推導&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$X$~$Erlang(n,\lambda)$
&lt;ul&gt;
&lt;li&gt;$X = X_1 + X_2 + &amp;hellip; + X_n, X_i 獨立, Xi$~$Exponential(\lambda)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;多個隨機變數之和&#34;&gt;多個隨機變數之和&lt;/h1&gt;
&lt;h2 id=&#34;獨立隨機變數之和&#34;&gt;獨立隨機變數之和&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$X_1, X_2, &amp;hellip;$獨立，且各自有一模一樣的機率分佈
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;{ $X_i$ } $I.I.D.$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Independently and Identically Distributed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X = X_1+X_2+&amp;hellip;+X_n$，n 為常數，請問 X 的機率分佈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p_X(x)=p_{X_1}(x) * p_{X_1}(x) * p_{X_1}(x) * &amp;hellip; * p_{X_1}(x)$&lt;/li&gt;
&lt;li&gt;$f_X(x)=f_{X_1}(x) * f_{X_1}(x) * f_{X_1}(x) * &amp;hellip; * f_{X_1}(x)$
&lt;ul&gt;
&lt;li&gt;因為他們機率分佈一模一樣，所以底下都是 $X_1$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$\phi_X(s)=\lbrack \phi_{X_1}(s) \rbrack ^n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e.g. 假設壽司理想重量是 13g，抓飯量是常態分佈，期望值是 14，標準差是 3，每天要作 100 個，每天飯量的機率分佈是?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X_i$ : 第 i 個壽司的飯量，{ $X_i$ } I.I.D.&lt;/li&gt;
&lt;li&gt;$X_i$~$N(14,9)\\
\Rightarrow \phi_{X_i}(s)=\phi_{X_1}(s)\\
=e^{\mu S + \frac{\sigma^2}{2}s^2} = e^{14 s + \frac{9}{2}s^2}$&lt;/li&gt;
&lt;li&gt;$X=X_1+X_2+&amp;hellip;+X_{100}$&lt;/li&gt;
&lt;li&gt;$\phi_X(s)=\lbrack \phi_{X_1}(s) \rbrack^{100}\\
=e^{1400 s + \frac{900}{2}s^2}$
&lt;ul&gt;
&lt;li&gt;這個東西是 $X$~$N(1400,900)$ 的 MGF，所以可以逆推回來機率分佈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;隨機變數之獨立隨機變數和&#34;&gt;隨機變數之獨立隨機變數和&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$X_1,X_2,&amp;hellip;I.I.D.$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X = X_1 + X_2 + &amp;hellip; + X_N$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N 本身也是隨機變數，其機率分佈已知&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\phi_X(s)=\phi_N(ln(\phi_{X_1}(s)))$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;中央極限定理&#34;&gt;中央極限定理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;central limit theorem(CLT)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 $X_1,X_2,&amp;hellip;,X_n$ 為 $I.I.D.$，當 n 趨近於無窮大時&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$X=X_1+X_2+&amp;hellip;+X_n$~$N(\mu_{X_1+X_2&amp;hellip;+X_n}, \sigma^2_{X_1+X_2+&amp;hellip;+X_n})$&lt;/li&gt;
&lt;li&gt;$\mu_{X_1+X_2+&amp;hellip;+X_n}=\mu_{X_1}+\mu_{X_2}+&amp;hellip;+\mu_{X_n}=n\mu_{X_1}$&lt;/li&gt;
&lt;li&gt;$\sigma^2_{X_1+X_2+&amp;hellip;+X_n}=\sigma^2_{X_1}+\sigma^2_{X_2}+&amp;hellip;+\sigma^2_{X_n}=n\sigma^2_{X_1}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;應用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要處理多個獨立的隨機變數的和時，可以用 CLT 將其機率分佈近似為常態分佈後計算機率
&lt;ul&gt;
&lt;li&gt;比如雜訊常當作常態分佈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果某機率分佈等於多個獨立隨機變數的和，此機率分佈可以用常態分佈近似，再算機率
&lt;ul&gt;
&lt;li&gt;e.g. $X$~$BIN(100,0.3)$
&lt;ul&gt;
&lt;li&gt;$X=X_1+X_2+&amp;hellip;+X_100$&lt;/li&gt;
&lt;li&gt;{$X_i$} $I.I.D., X_i$~$Bernoulli(0.3)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;天團粉絲有 0.2 的機率買 CD，共有100萬個粉絲，發售 CD 超過 200800 張的機率為何
&lt;ul&gt;
&lt;li&gt;$X$~$BIN(1000000,0.2)$&lt;/li&gt;
&lt;li&gt;$P(X&amp;gt;200800)=\displaystyle\sum_{x=200801}^{10^6}(\overset{1000000}{x})0.2^x0.8^{10^6-x}$
&lt;ul&gt;
&lt;li&gt;$(\overset{1000000}{x})=\frac{1000000!}{200801!799199!}$&lt;/li&gt;
&lt;li&gt;算不出來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$X=X_1+X_2+&amp;hellip;+X_{1000000}, X_i$~$Bernoulli(0.2)\\
\Rightarrow \mu_{X_1}=0.2, \sigma_{X_1}^2=0.16$&lt;/li&gt;
&lt;li&gt;By CLT $\Rightarrow X$~$N(200000,160000)$
&lt;ul&gt;
&lt;li&gt;$P(X&amp;gt;200800)\\
=P(\frac{X-200000}{400} &amp;gt; \frac{200800-200000}{400})\\
=P(Z&amp;gt;2)
=Q(2)
\approx0.023$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;de-moivre---laplace-formula&#34;&gt;De Moivre - Laplace Formula&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果是離散的隨機變數和，可以算的更精確&lt;/li&gt;
&lt;li&gt;$P(k_1 \le X \le k_2) \approx \Phi(\frac{k_2+0.5-n\mu_{X_1}}{\sqrt{n}\sigma_{X_1}}) - \Phi(\frac{k_1-0.5-n\mu_{X_1}}{\sqrt{n}\sigma_{X_1}})$&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>機率論 - III</title>
        <link>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-iii/</link>
        <pubDate>Thu, 02 Feb 2023 15:18:41 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-iii/</guid>
        <description>&lt;h1 id=&#34;隨機變數的函數&#34;&gt;隨機變數的函數&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;隨機變數 X 的任意函數 g(x) 也是一個隨機變數，常被稱為 Derived Random Variable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;求-gx-的機率分佈&#34;&gt;求 g(x) 的機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;X 是離散
&lt;ul&gt;
&lt;li&gt;直接推 g(X) 的 PMF
&lt;ul&gt;
&lt;li&gt;X 是離散隨機變數，Y = g(X) 也是離散隨機變數&lt;/li&gt;
&lt;li&gt;$p_{g(X)}(y) = \displaystyle\sum_{會讓g(x)=y 的所有x}p_X(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X 是連續
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先推 g(x) 的 CDF，再微分得 PDF&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先算 g(X) 的 CDF
&lt;ul&gt;
&lt;li&gt;$F_{g(X)}(y)=P\lbrack g(X) \le y \rbrack$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若 g(X) 可以微分，再對 y 微分得 PDF
&lt;ul&gt;
&lt;li&gt;$f_{g(X)}(y)=\frac{d}{dy}F_{g(X)}(y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;e.g. 若 Y=3X+2，請問 Y 的 PDF 與 $f_X(x) 的關係?$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$F_Y(y)=P(Y \le y)\\
=P(3X+2 \le y)\\
=P(X \le \frac{y-2}{3})\\
=F_X(\frac{y-2}{3})$&lt;/li&gt;
&lt;li&gt;$f_Y(y)=\frac{d}{dy}F_Y(y)\\
=\frac{d}{dy}F_X(\frac{y-2}{3})\\
=\frac{dF_X(\frac{y-2}{3})}{d(\frac{y-2}{3})} \cdot \frac{d \frac{y-2}{3}}{dy}\\
=f_X(\frac{y-2}{3}) \cdot \frac{1}{3}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 Y=aX+b&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$f_Y(y)=\frac{1}{|a|}f_X(\frac{y-b}{a})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;條件機率分佈&#34;&gt;條件機率分佈&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;若 X 是離散隨機變數，PMF 是 $p_X(x)$，某事件 B 已發生
&lt;ul&gt;
&lt;li&gt;PMF: $p_{X|B}(x)= x = \begin{cases}
x \in B: &amp;amp; \frac{p_X(x)}{p(B)}, \
x \notin B: &amp;amp; 0
\end{cases}$&lt;/li&gt;
&lt;li&gt;CDF: $F_{X|B}(x)\\
=\displaystyle\sum_{u \le x}p_{X|B}(u)\\
=\displaystyle\sum_{u \le x, u \in B} \frac{p_X(u)}{P(B)}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若 X 是連續隨機變數，某事件 B 已發生
&lt;ul&gt;
&lt;li&gt;PDF: $f_{X|B}(x)\\
=\begin{cases}
x \in B: &amp;amp; \frac{f_X(x)}{P(B)}, \
x \notin B: &amp;amp; 0
\end{cases}$&lt;/li&gt;
&lt;li&gt;CDF: $F_{X|B}(x)\\
=\int_{-\infty \le u \le x, u \in B} \frac{f_X(u)}{P(B)} du$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;條件期望值-conditional-excpectation&#34;&gt;條件期望值 Conditional Excpectation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$E \lbrack X|B \rbrack\\
=\begin{cases}
\displaystyle\sum_{x=-\infty}^{\infty} x \cdot p_{X|B}(x) &amp;amp; 離散, \\
\int_{-\infty}^{\infty} x \cdot f_{X|B}(x)dx &amp;amp; 連續
\end{cases}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$E \lbrack g(X)|B \rbrack\\
=\begin{cases}
\displaystyle\sum_{x=-\infty}^{\infty} g(x) \cdot p_{X|B}(x) &amp;amp; 離散, \\
\int_{-\infty}^{\infty} g(x) \cdot f_{X|B}(x)dx &amp;amp; 連續
\end{cases}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$Var(X|B) = E\lbrack X^2 | B \rbrack - (\mu_{X|B})^2$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;失憶性-memoryless&#34;&gt;失憶性 Memoryless&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Geometric 和 Exponential 機率分佈都有失憶性&lt;/li&gt;
&lt;li&gt;不管事情已經進行多久，對於事情之後的進行一點影響都沒有&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;聯合機率分佈&#34;&gt;聯合機率分佈&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;joint probability distribution&lt;/li&gt;
&lt;li&gt;同時考慮多個隨機變數的機率分佈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;joint-pmf&#34;&gt;Joint PMF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;X, Y 皆為離散，聯合PMF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p_{X,Y}(x,y)=P(X=x, Y=y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性質&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$0 \le p_{X,Y}(x,y) \le 1$&lt;/li&gt;
&lt;li&gt;$\Sigma^{\infty}&lt;em&gt;{x=-\infty}\Sigma^{\infty}&lt;/em&gt;{y=-\infty}
p_{X,Y}(x,y)=1$&lt;/li&gt;
&lt;li&gt;X, Y 獨立
&lt;ul&gt;
&lt;li&gt;$P_{X,Y}(x,y)\\
=P(X=x,Y=y)\\
=P_X(x)P_Y(y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對任何事件 B
&lt;ul&gt;
&lt;li&gt;$P(B)=\Sigma_{(x,y)\in B}P_{X,Y}(x,y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;joint-cdf&#34;&gt;Joint CDF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$F_{X,Y}(x,y)=P(X \le x, Y \le y)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性質&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$0 \le F_{X,Y}(x, y) \le 1$&lt;/li&gt;
&lt;li&gt;若 $x_1 \le x_2$ 且 $y_1 \le y_2$，則 $F_{X,Y}(x_1,y_1) \le F_{X,Y} (x_2, y_2)$&lt;/li&gt;
&lt;li&gt;$F_{X,Y}(x, \infty) = F_X(x)$&lt;/li&gt;
&lt;li&gt;$F_{X,Y}(\infty, y) = F_Y(y)$&lt;/li&gt;
&lt;li&gt;$F_{X,Y}(\infty, \infty) = 1$&lt;/li&gt;
&lt;li&gt;$F_{X,Y}(x, -\infty)\\
= P(X \le x, Y \le -\infty)\\
\le P(Y \le -\infty) \\
= 0$&lt;/li&gt;
&lt;li&gt;$F_{X,Y}(-\infty, y) = 0$&lt;/li&gt;
&lt;li&gt;$P(x_1 &amp;lt; X \le x_2, y_1 &amp;lt; Y \le y_2)\\
=F_{X,Y}(x_2,y_2)-F_{X,Y}(x_2,y_1)-F_{X,Y}(x_1,y_2)+F_{X,Y}(x_1,y_1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;joint-pdf&#34;&gt;Joint PDF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$f_{X,Y}(x,y)= \frac{\partial^2F_{X,Y}(x,y)}{\partial x \partial y}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$F_{X,Y}(x,y) = \int_{-\infty}^{x} \int_{-\infty}^{y} f_{X,Y}(u,v)dv du$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性質&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$f_{X,Y}(x,y) \ge 0$&lt;/li&gt;
&lt;li&gt;$\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}f_{X,Y}(x,y)dxdy=1$&lt;/li&gt;
&lt;li&gt;如果 X,Y 獨立
&lt;ul&gt;
&lt;li&gt;$f_{X,Y}(x,y)=f_X(x) \cdot f_Y(y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對任何事件 B
&lt;ul&gt;
&lt;li&gt;$P(B)=\int\int_{(x,y)\in B}f_{X,Y}(x,y)dxdy$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;邊際-pmf&#34;&gt;邊際 PMF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Marginal PMF&lt;/li&gt;
&lt;li&gt;已知聯合 PMF : $p_{X,Y}(x,y)$，求 $p_X(x), p_Y(y)$，稱為邊際 PMF
&lt;ul&gt;
&lt;li&gt;$p_X(x)=\displaystyle\sum_{y=-\infty}^{\infty}P_{X,Y}(x,y)$&lt;/li&gt;
&lt;li&gt;$p_Y(y)=\displaystyle\sum_{x=-\infty}^{\infty}P_{X,Y}(x,y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已知聯合 PDF : $p_{X,Y}(x,y)$，求 $f_X(x), f_Y(y)$，稱為邊際 PDF
&lt;ul&gt;
&lt;li&gt;$f_X(x)=\int_{-\infty}^{\infty}f_{X,Y}(x,y)dy$&lt;/li&gt;
&lt;li&gt;$f_Y(y)=\int_{-\infty}^{\infty}f_{X,Y}(x,y)dx$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;雙變數期望值&#34;&gt;雙變數期望值&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聯合 PMF 下的期望值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E\lbrack h(X,Y) \rbrack = \displaystyle\sum_{x=-\infty}^{\infty}\displaystyle\sum_{y=-\infty}^{\infty}h(x,y)\cdot p_{X,Y}(x,y)$
&lt;ul&gt;
&lt;li&gt;h(X,Y) 也可以只和 X 有關，比如它可以是 $x^2$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聯合 PDF 下的期望值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E\lbrack h(X,Y) \rbrack = \int_{-\infty}^{\infty}\int_{-\infty}^{\infty}h(x,y)\cdot f_{X,Y}(x,y) dxdy$&lt;/li&gt;
&lt;li&gt;e.g. 已知 $f_{X,Y}(x,y)=\begin{cases}
0.5, &amp;amp; \text{if } 0 \le y \le x \le 2, \\
0, &amp;amp; otherwise
\end{cases}$
&lt;ul&gt;
&lt;li&gt;$E \lbrack X + Y \rbrack \\
= \int_{-\infty}^{\infty}\int_{-\infty}^{\infty}(x+y)\cdot f_{X,Y}(x,y) dxdy\\
= \int_{0}^{2}\int_{y}^{2}(x+y)\cdot 0.5 dxdy$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;期望值性質&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E\lbrack \alpha h_1(X,Y)+ \beta h_2(X,Y) \rbrack\\
=\alpha E\lbrack  h_1(X,Y)\rbrack + \beta E\lbrack  h_2(X,Y) \rbrack$&lt;/li&gt;
&lt;li&gt;若 X,Y 獨立
&lt;ul&gt;
&lt;li&gt;$E\lbrack g(X)h(Y) \rbrack = E \lbrack g(X) \rbrack \cdot E \lbrack h(Y) \rbrack$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variance 性質&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Var(X+Y)=Var(X)+Var(Y)+2 \cdot Cov(X,Y)$
&lt;ul&gt;
&lt;li&gt;$Cov(X,Y)=E\lbrack (X-\mu_X)(Y -\mu_Y) \rbrack$
&lt;ul&gt;
&lt;li&gt;如果 X, Y 獨立
&lt;ul&gt;
&lt;li&gt;$2E\lbrack (X-\mu_X)(Y -\mu_Y) \rbrack \\
= 2E\lbrack (X-\mu_X) \rbrack  E\lbrack (Y -\mu_Y) \rbrack \\
= 0$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>機率論 - II</title>
        <link>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-ii/</link>
        <pubDate>Wed, 01 Feb 2023 15:18:41 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-ii/</guid>
        <description>&lt;h1 id=&#34;機率密度函數-pdf&#34;&gt;機率密度函數 PDF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;probability density function&lt;/li&gt;
&lt;li&gt;PMF 在 連續R.V. 上，假如 $X\text{\textasciitilde}[0,1)$，$p_X(0.7)$ = 0，因為有無窮多個數字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;公式&#34;&gt;公式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$f_X(x)=\lim\limits_{\Delta x \rightarrow 0} \frac{P(x \le X \le x + \Delta x)}{\Delta x} \\
= \lim\limits_{\Delta x \rightarrow 0} \frac{F_X(x+\Delta x) - F_X(x)}{\Delta x} \\
= F^{\prime}_X(x)
$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;和-cdf-的關係&#34;&gt;和 CDF 的關係&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$CDF: F_X(x) = PDF: f_X(x)$
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\int^x_{-\infty}$ 可以從 PDF 轉到 CDF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\frac{d}{dx} 可以從 CDF 轉到 PDF$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跟機率的關係&#34;&gt;跟機率的關係&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$P(a &amp;lt; X \le b) = F_X(b) - F_X(a) \\
= \int^b_{-\infty} f_X(x)dx - \int^a_{-\infty} f_X(x)dx \\
= \int^a_b f_X(x)dx$&lt;/li&gt;
&lt;li&gt;$f_X(x)=\lim\limits_{\Delta x \rightarrow 0} \frac{P(x \le X \le x + \Delta x)}{\Delta x}$
&lt;ul&gt;
&lt;li&gt;當 $\Delta x$ 很小時
&lt;ul&gt;
&lt;li&gt;$P(x \le X \le x + \Delta x) \approx f_X(x) \cdot \Delta x$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性質&#34;&gt;性質&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$f_X(x) = F^{\prime}_X(x)$&lt;/li&gt;
&lt;li&gt;$F_X(x)=\int^x_{-\infty}f_X(u)du$&lt;/li&gt;
&lt;li&gt;$P(a \le X \le b)=\int^b_a f_X(x) dx$&lt;/li&gt;
&lt;li&gt;$\int^{\infty}_{-\infty}f_X(x)dx=1$&lt;/li&gt;
&lt;li&gt;$f_X(x) \ge 0$&lt;/li&gt;
&lt;li&gt;$f_X(x)$ 可以比 1 大&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;連續機率分佈&#34;&gt;連續機率分佈&lt;/h1&gt;
&lt;h2 id=&#34;uniform-機率分佈&#34;&gt;Uniform 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$X \text{\textasciitilde}UNIF(a,b)$&lt;/li&gt;
&lt;li&gt;PDF
&lt;ul&gt;
&lt;li&gt;$f_X(x) = \begin{cases}
\frac{1}{b-a} &amp;amp; ,a \le x \le b \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \begin{cases}
0 &amp;amp; ,x \le a \\
\frac{x-a}{b-a} &amp;amp; ,a &amp;lt; x \le b\\
1 &amp;amp; ,x &amp;gt; b
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exponential-機率分佈&#34;&gt;Exponential 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有失憶性(memoryless)，常被用來 model 有這種性質的事情&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}Exponential(\lambda)$&lt;/li&gt;
&lt;li&gt;PDF
&lt;ul&gt;
&lt;li&gt;$f_X(x) = \begin{cases}
\lambda e^{-\lambda x} &amp;amp; ,x \ge 0 \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = 1-e^{-\lambda x}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;erlang-機率分佈&#34;&gt;Erlang 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gamma Distribution&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}Erlang(n,\lambda)$&lt;/li&gt;
&lt;li&gt;PDF
&lt;ul&gt;
&lt;li&gt;$f_X(x) = \begin{cases}
\frac{1}{(n-1)!}\lambda^n x^{n-1} e^{-\lambda x} &amp;amp; ,x \ge 0 \\
0 &amp;amp; ,otherwise
\end{cases}$
&lt;ul&gt;
&lt;li&gt;$f_X(x)=(\lambda e^{-\lambda x}) * (\lambda e^{-\lambda x}) * &amp;hellip; * (\lambda e^{-\lambda x})$
&lt;ul&gt;
&lt;li&gt;自己和自己做 n 次 convolution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \begin{cases}
1 - \Sigma^{n-1}_{k=0}\frac{(\lambda x)^k}{k!}e^{-\lambda x} &amp;amp; ,x \ge 0 \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常見用法&#34;&gt;常見用法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來 model 一件有多個關卡事情的總時間，而每個關卡所需時間是隨機的
&lt;ul&gt;
&lt;li&gt;關卡數: n&lt;/li&gt;
&lt;li&gt;每關卡所需時間之機率分佈 $Exponential(\lambda)$&lt;/li&gt;
&lt;li&gt;e.g. 打電動過三關所需時間
&lt;ul&gt;
&lt;li&gt;$Erlang(3, \lambda)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;normal-機率分佈-常態分佈&#34;&gt;Normal 機率分佈 (常態分佈)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在自然界常出現&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常被用做「很多隨機量的總和」的機率模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;又稱 Gaussian 機率分佈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X \text{\textasciitilde}Gaussian(\mu,\sigma)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PDF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$f_X(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也常用 $X \text{\textasciitilde}N(\mu,\sigma^2)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意 $\sigma$ 不一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CDF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;太難算，積不出來&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;針對某組特別的 $\mu, \sigma$ 的 CDF 建表，把其他常態分佈的 CDF 和這組產生關聯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;標準常態分佈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Z \text{\textasciitilde}N(0,1)$
&lt;ul&gt;
&lt;li&gt;$f_Z(z)=\frac{1}{\sqrt{2 \pi}}e^{-\frac{z^2}{2}}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF 表示為 $\Phi(z)$
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\Phi(z)=\int^z_{-\infty}\frac{1}{\sqrt{2\pi}}e^{-\frac{u^2}{2}}du$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;積不出來，以數值方法近似出來後建表給人家查
&lt;ul&gt;
&lt;li&gt;查 standard normal table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e.g. $F_Z(1.325)=?$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查表 $F_Z(1.32)=0.9066$，$F_Z(1.33)=0.9082$
&lt;ul&gt;
&lt;li&gt;用內插約略得 0.9074&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性質&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\Phi(-z) = 1 - \Phi(z)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任意  $\mu, \sigma$ 的 CDF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對任何 $X \text{\textasciitilde}N(\mu,\sigma^2)$
&lt;ul&gt;
&lt;li&gt;$\frac{X-\mu}{\sigma}\text{\textasciitilde}N(0,1)$&lt;/li&gt;
&lt;li&gt;$F_X(x)=\Phi(\frac{x-\mu}{\sigma})$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;期望值&#34;&gt;期望值&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Expectation&lt;/li&gt;
&lt;li&gt;大數法則
&lt;ul&gt;
&lt;li&gt;$P(A)=\lim\limits_{N \rightarrow \infty}\frac{N_A}{N}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本上期望值是利用大數法則算的 mean 值，雖然平均值是 R.V.，但當實驗無窮多次時，會收斂到常數，因此以這為估算值&lt;/li&gt;
&lt;li&gt;Mean 值又稱做期望值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;離散隨機變數&#34;&gt;離散隨機變數&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$E\lbrack X \rbrack=\mu_X=\displaystyle\sum^{\infty}_{x=-\infty}x \cdot P_X(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;離散隨機變數的函數的期望值&#34;&gt;離散隨機變數的函數的期望值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對離散隨機變數 X 而言，其任意函數 g(x) 也是一隨機變數，也有期望值
&lt;ul&gt;
&lt;li&gt;$g(X)$ 的期望值定義為
&lt;ul&gt;
&lt;li&gt;$E \lbrack g(X) \rbrack=\displaystyle\sum^{\infty}_{x=-\infty}g(x)\cdot P_X(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性質-1&#34;&gt;性質&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$E\lbrack \alpha g(X) \rbrack = \alpha \cdot E \lbrack g(X) \rbrack$&lt;/li&gt;
&lt;li&gt;$E\lbrack \alpha g(X) + \beta h(X) \rbrack \\
=\alpha \cdot E \lbrack g(X) \rbrack + \beta \cdot E \lbrack h(X) \rbrack$&lt;/li&gt;
&lt;li&gt;$E\lbrack \alpha \rbrack = \alpha$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常見隨機變數函數的期望值&#34;&gt;常見隨機變數函數的期望值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$X$ 的 $n^{th} moment$
&lt;ul&gt;
&lt;li&gt;$E \lbrack X^n \rbrack = \displaystyle\sum^{\infty}_{x=-\infty}x^n \cdot P_X(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X 的變異數(variance)
&lt;ul&gt;
&lt;li&gt;$E \lbrack (X-\mu_X)^2 \rbrack = \displaystyle\sum^{\infty}_{x=-\infty} (x-\mu_X)^2 \cdot P_X(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;變異數-variance&#34;&gt;變異數 Variance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Variance 通常符號表示為 $\sigma^2_X=E \lbrack (X-\mu_X)^2 \rbrack$&lt;/li&gt;
&lt;li&gt;隱含隨機變數 X 多「亂」的資訊
&lt;ul&gt;
&lt;li&gt;variance 大的話，X 不見得接近 $\mu_X$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;變異數開根號是標準差(standard deviation)
&lt;ul&gt;
&lt;li&gt;$\sigma_X = \sqrt{Variance} \ge 0$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算法&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;$\sigma^2_X=E \lbrack X^2 \rbrack - \mu^2_X\\
\Rightarrow E \lbrack X^2 \rbrack = \sigma^2_X + \mu^2_X$&lt;/p&gt;
&lt;h3 id=&#34;常見離散分佈的期望值--變異數&#34;&gt;常見離散分佈的期望值 / 變異數&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$X\text{\textasciitilde}Bernouli(p)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X=1 \cdot p + 0 \cdot (1-p) \\
= p$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = E \lbrack X^2 \rbrack - \mu^2_X \\
= \displaystyle\sum^1_{x=0}x^2\cdot p_X(x)-\mu_X^2 \\
=1^2 \cdot p + 0^2 \cdot (1-p) - p^2\\
=p(1-p)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$BIN(n,p)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = np$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = np(1-p)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$GEO(p)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \frac{1}{p}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \frac{(1-p)}{p^2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$PASKAL(k,p)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \frac{k}{p}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \frac{k(1-p)}{p^2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$POI(\alpha)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \alpha$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \alpha$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$UNIF(a,b)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \frac{a+b}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \frac{1}{12}(b-a)(b-a+2)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;連續隨機變數&#34;&gt;連續隨機變數&lt;/h2&gt;
&lt;p&gt;對連續的隨機變數 X 而言，將 X 的值以 $\Delta$ 為單位無條件捨去來近似，以隨機變數 Y 表示(當 $\Delta \rightarrow$ 0 時，$X \approx Y$)，然後再當做 PMF 處理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E \lbrack X \rbrack = \int^{\infty}_{-\infty}xf_X(x)dx$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;連續隨機變數的函數的期望值&#34;&gt;連續隨機變數的函數的期望值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對連續隨機變數 X 而言，其任意函數 g(x) 也是一隨機變數，也有期望值
&lt;ul&gt;
&lt;li&gt;$g(X)$ 的期望值定義為
&lt;ul&gt;
&lt;li&gt;$E \lbrack g(X) \rbrack=\int^{\infty}_{-\infty}g(x)\cdot f_X(x)dx$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性質-2&#34;&gt;性質&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$E\lbrack \alpha g(X) \rbrack = \alpha \cdot E \lbrack g(X) \rbrack$&lt;/li&gt;
&lt;li&gt;$E\lbrack \alpha g(X) + \beta h(X) \rbrack \\
=\alpha \cdot E \lbrack g(X) \rbrack + \beta \cdot E \lbrack h(X) \rbrack$&lt;/li&gt;
&lt;li&gt;$E\lbrack \alpha \rbrack = \alpha$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常見隨機變數函數的期望值-1&#34;&gt;常見隨機變數函數的期望值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;$X$ 的 $n^{th} moment$
&lt;ul&gt;
&lt;li&gt;$E \lbrack X^n \rbrack = \int^{\infty}_{-\infty}x^n \cdot f_X(x)dx$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X 的變異數(variance)
&lt;ul&gt;
&lt;li&gt;$E \lbrack (X-\mu_X)^2 \rbrack = \int^{\infty}_{-\infty} (x-\mu_X)^2 \cdot f_X(x)dx$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;變異數-variance-1&#34;&gt;變異數 Variance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和離散隨機變數的資訊一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常見連續分佈之期望值變異數&#34;&gt;常見連續分佈之期望值/變異數&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$X$~$Exponential(\lambda)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \frac{1}{\lambda}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \frac{1}{\lambda^2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$Erlang(n, \lambda)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \frac{n}{\lambda}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \frac{n}{\lambda^2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$Gaussian(\mu,\sigma)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \mu$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \sigma^2$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$X$~$UNIF(a,b)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mu_X = \frac{a+b}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma^2_X = \frac{1}{12}(b-a)^2$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>機率論 - I</title>
        <link>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-i/</link>
        <pubDate>Tue, 31 Jan 2023 15:18:41 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/%E6%A9%9F%E7%8E%87%E8%AB%96-i/</guid>
        <description>&lt;h1 id=&#34;集合論&#34;&gt;集合論&lt;/h1&gt;
&lt;h2 id=&#34;名詞&#34;&gt;名詞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;子集合(Subset)
&lt;ul&gt;
&lt;li&gt;B 是 C 的子集(B 不能等於 C)
&lt;ul&gt;
&lt;li&gt;$B \subset C$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補集(Complement)
&lt;ul&gt;
&lt;li&gt;C 是 A 的補集
&lt;ul&gt;
&lt;li&gt;$C=A^C$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不相交(Disjoint)
&lt;ul&gt;
&lt;li&gt;$X \cap Y = \{\}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;互斥(Mutually Exclusive)
&lt;ul&gt;
&lt;li&gt;一群集合 $X_1, X_2, &amp;hellip;, X_n$ 中任選兩個集合 $X_i, X_j$ 都不相交，則 $X_1, X_2, &amp;hellip;, X_n$ 這群集合互斥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;公式&#34;&gt;公式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;De Morgan&amp;rsquo;s Law
&lt;ul&gt;
&lt;li&gt;${(A \cup B)}^C=A^C \cap B^C$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;機率名詞&#34;&gt;機率名詞&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Outcome (結果)
&lt;ul&gt;
&lt;li&gt;實驗中可能的結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sample Space (樣本空間)
&lt;ul&gt;
&lt;li&gt;機率實驗所有可能的結果的集合，常以 $S$ 表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Event (事件)
&lt;ul&gt;
&lt;li&gt;對於實驗結果的某種敘述&lt;/li&gt;
&lt;li&gt;事件可以看做是 outcome 的集合，也是 sample space 的子集&lt;/li&gt;
&lt;li&gt;機率是一個函數，其自變數是 event，故可看做是一個映射&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;公理-axioms&#34;&gt;公理 Axioms&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;對任何事件 $A$ 而言, $P(A) \geq 0$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$P(S) = 1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件 $A_1, A_2, &amp;hellip;$ 互斥 $\Rightarrow$ $P(A_1 \cup A_2 \cup A_3 \cup &amp;hellip;)$&lt;/p&gt;
&lt;p&gt;$=P(A_1)+P(A_2)+P(A_3)+&amp;hellip;$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;衍生公式&#34;&gt;衍生公式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Boole&amp;rsquo;s 不等式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對任意 $n$ 個事件 $A_1, A_2, &amp;hellip;, A_n$ 而言
&lt;ul&gt;
&lt;li&gt;$P(\cup^n_{i=1}A_i \leq \Sigma^n_{i=1}P(A_i))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonferroni&amp;rsquo;s 不等式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對任意 $n$ 個事件 $A_1, A_2, &amp;hellip;, A_n$ 而言
&lt;ul&gt;
&lt;li&gt;$P(\cap^n_{i=1} A_i) \geq 1 - \Sigma^n_{i=1} P(A^C_i)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;條件機率&#34;&gt;條件機率&lt;/h1&gt;
&lt;h2 id=&#34;公式-1&#34;&gt;公式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$P(X|Y) = \frac{P(X \cap Y)}{P(Y)}$
&lt;ul&gt;
&lt;li&gt;$P(X \cap Y) = P(X|Y) * {P(Y)} = P(Y|X) * P(X)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性質&#34;&gt;性質&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;$P(X|Y) \geq 0$&lt;/li&gt;
&lt;li&gt;$P(Y|Y) = 1$&lt;/li&gt;
&lt;li&gt;$A, B$ 互斥 $\Rightarrow P(A \cup B |Y) = \frac{P(A)}{P(Y)} + \frac{P(B)}{P(Y)} = P(A|Y)+P(B|Y)$&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;定理&#34;&gt;定理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Total Probability 定理
&lt;ul&gt;
&lt;li&gt;若 $C_1, C_2, &amp;hellip;, C_n$ 互斥且 $C_1 \cup C_2 \cup &amp;hellip; \cup C_n = S$，則對任意事件 $A$
&lt;ul&gt;
&lt;li&gt;$P(A) = P(A|C_1)P(C_1) +  P(A|C_2)P(C_2) + &amp;hellip; + P(A|C_n)P(C_n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bayes&amp;rsquo; Rule 貝式定理
&lt;ul&gt;
&lt;li&gt;若 $C_1, C_2, &amp;hellip;, C_n$ 互斥且 $C_1 \cup C_2 \cup &amp;hellip; \cup C_n = S$，則對任意事件 $A$
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$P(C_j|A)=\frac{P(A|C_j) * P(C_j)}{\Sigma^n_{i=1}P(A|C_i)*P(C_i)}$&lt;/p&gt;
&lt;p&gt;$= \frac{P(C_j \cap A)}{P(A)}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;獨立性-independence&#34;&gt;獨立性 Independence&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若兩事件 $A, B$ 之機率滿足&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$P(A \cap B) = P(A) * P(B)$&lt;/li&gt;
&lt;li&gt;或以 $P(A|B) = P(A)$ 表示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;則 $A, B$ 兩事件稱為機率上的獨立事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若事件 $A_1, A_2, &amp;hellip; A_n$ 滿足下列條件，則稱此 $n$ 事件獨立 $(n&amp;gt;2)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;從中任選 $m$ 事件 $A_{i_1}, A_{i_2}, &amp;hellip; A_{i_m}$ 均滿足
&lt;ul&gt;
&lt;li&gt;$P(A_{i_1} \cap A_{i_2} \cap &amp;hellip; \cap A_{i_m}) = P(A_{i_1})P(A_{i_2})&amp;hellip;P(A_{i_m}) , m=2, 3, &amp;hellip;, n$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;排列組合&#34;&gt;排列組合&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;二項式係數(binomial coefficient)
&lt;ul&gt;
&lt;li&gt;$(^n_k)$
&lt;ul&gt;
&lt;li&gt;有 $n$ 個異物，從中取出 $k$ 個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多項式係數(multinomial coefficient)
&lt;ul&gt;
&lt;li&gt;$\frac{n!}{n_1!n_2!&amp;hellip;n_m!}$
&lt;ul&gt;
&lt;li&gt;有 m 種異物，每次選物從中選一後放回，依序選 n 次，共有 $m^n$ 種 outcome，在所有實驗結果中，第一種出現 $n_1$ 次，以此類推，這樣的實驗結果有多少種&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;隨機變數-random-variable-rv&#34;&gt;隨機變數 Random Variable, R.V.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;用來把 outcome 數字化的表示方式&lt;/li&gt;
&lt;li&gt;通常用大寫英文字母&lt;/li&gt;
&lt;li&gt;是將 outcome 轉成對應數字的函數
&lt;ul&gt;
&lt;li&gt;$X: S \rightarrow R$
&lt;ul&gt;
&lt;li&gt;從樣本空間映射到實數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隨機變數的函數，也是一個隨機變數&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;種類&#34;&gt;種類&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;離散隨機變數 (Discrete R.V.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值是有限個，或是「可數的」無窮多個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;連續隨機變數 (Continuous R.V.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值有無窮多個，而且「不可數」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可數不可數&#34;&gt;可數、不可數&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可數
&lt;ul&gt;
&lt;li&gt;包含的東西可一個個被數，總有一天會被數到
&lt;ul&gt;
&lt;li&gt;e.g. 正偶數集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不可數的
&lt;ul&gt;
&lt;li&gt;不管怎麼數，裡面一定有個東西會沒數到
&lt;ul&gt;
&lt;li&gt;e.g. 0~1 之間的所有數字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;累積分佈函數-cdf&#34;&gt;累積分佈函數 CDF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cumulative distribution function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;對任一個隨機變數 $X$，定義 CDF 為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$F_X(x) \overset{def}{=}P(X \leq x)$
&lt;ul&gt;
&lt;li&gt;永遠用 $F$ 表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常見用途&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算 X 落在某範圍的機率&lt;/li&gt;
&lt;li&gt;$P(A &amp;lt; X \le b) = F_X(b)-F_X(a)$
&lt;ul&gt;
&lt;li&gt;$P(A \le X \le b) = F_X(b)-F_X(a)+P(X=a)$&lt;/li&gt;
&lt;li&gt;$P(A &amp;lt; X &amp;lt; b) = P(A &amp;lt; X \le b^-)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性質-1&#34;&gt;性質&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;離散隨機變數的 CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x^+)=F_X(x)$&lt;/li&gt;
&lt;li&gt;$F_X(x^-)=F_X(x)-P(X=x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;連續隨機變數的 CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x^-)=F_X(x)=F_X(x^+)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同
&lt;ul&gt;
&lt;li&gt;$F_X(- \infty)=P(X \le - \infty)=0$&lt;/li&gt;
&lt;li&gt;$F_X(\infty)=P(X \le \infty) = 1$&lt;/li&gt;
&lt;li&gt;$0 \le F_X(x) \le 1$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;機率質量函數-pmf&#34;&gt;機率質量函數 PMF&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;probability mass function&lt;/li&gt;
&lt;li&gt;對任一個「離散」隨機變數 $X$，其 PMF 為
&lt;ul&gt;
&lt;li&gt;$p_X(x) \overset{def}{=}P(X=x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pmf-和-cdf-的關係&#34;&gt;PMF 和 CDF 的關係&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對任何 $x$
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \displaystyle\sum^{\lfloor x \rfloor}_{n=-\infty}p_X(n)$
&lt;ul&gt;
&lt;li&gt;$P_X(x)=F_X(x^+)-F_X(x^-)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;機率分佈probability-distribution&#34;&gt;機率分佈(Probability Distribution)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PMF 和 PDF 都是一種機率分佈
&lt;ul&gt;
&lt;li&gt;將總和為 1 的機率分佈在點上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;離散機率分佈&#34;&gt;離散機率分佈&lt;/h1&gt;
&lt;h2 id=&#34;bernoulli-機率分佈&#34;&gt;Bernoulli 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 次實驗，2 種結果，在意某結果發生與否&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}Bernoulli(p)$&lt;/li&gt;
&lt;li&gt;PMF
&lt;ul&gt;
&lt;li&gt;$p_X(x) = \begin{cases}
p &amp;amp; ,x=1 \\
1-p &amp;amp; x=0 \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \begin{cases}
0 &amp;amp; ,x&amp;lt;0 \\
1-p &amp;amp; 0 \leq x &amp;lt;1 \\
1 &amp;amp; ,x \geq 1
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;binomial-機率分佈&#34;&gt;Binomial 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;實驗成功機率為 p，做 n 次實驗，X 表成功次數&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}BIN(p)$&lt;/li&gt;
&lt;li&gt;PMF
&lt;ul&gt;
&lt;li&gt;$p_X(x) = (^n_x)p^x(1-p)^{n-x}$
&lt;ul&gt;
&lt;li&gt;成功 $x$ 次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \displaystyle\sum^{\lfloor x \rfloor}_{m=-\infty} (^n_m)\cdot p^m \cdot (1-p)^{n-m}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uniform-機率分佈&#34;&gt;Uniform 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 次實驗，n 種結果，各結果機率均等，在意某結果發生否&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}UNIF(a,b)$&lt;/li&gt;
&lt;li&gt;PMF
&lt;ul&gt;
&lt;li&gt;$p_X(x) = \begin{cases}
\frac{1}{b-a+1} &amp;amp; ,x=a,a+1,&amp;hellip;,b \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \begin{cases}
0 &amp;amp; ,x&amp;lt;a \\
\frac{\lfloor x \rfloor - a + 1}{b-a+1} &amp;amp; ,a \leq x&amp;lt; b\\
1 &amp;amp; ,x \geq b
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;geometric-機率分佈&#34;&gt;Geometric 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;若實驗成功機率為 p，到成功為止，做了 X 次嘗試&lt;/li&gt;
&lt;li&gt;有失憶性&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}Geometric(p)$&lt;/li&gt;
&lt;li&gt;PMF
&lt;ul&gt;
&lt;li&gt;$p_X(x) = \begin{cases}
(1-p)^{x-1} \cdot p &amp;amp; ,x=1, 2, 3, &amp;hellip; \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \begin{cases}
1-(1-p)^{\lfloor x \rfloor} &amp;amp; ,x \ge 1 \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pascal-機率分佈&#34;&gt;Pascal 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;若實驗成功機率為 p，到第 k 次成功為止，共做了 X 次嘗試&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}Pascal(k, p)$&lt;/li&gt;
&lt;li&gt;PMF
&lt;ul&gt;
&lt;li&gt;$p_X(x) = \begin{cases}
\binom{x-1}{k-1}(1-p)^{x-k} p^k &amp;amp; ,x=k, k+1, &amp;hellip; \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = P(X \le x) \\
= P(在 x 次實驗中 \ge k 次成功)\\
= P(Y \ge k), Y~BIN (x,p) \\
$
&lt;ul&gt;
&lt;li&gt;故 Pascal 又稱 Negative Binomial&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;poisson-機率分佈&#34;&gt;Poisson 機率分佈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;已知某事發生速率為每單位時間 $\lambda$ 次，觀察時間為 $T$ 時間單位，$X$ 為該觀察時間內發生該事的總次數。&lt;/li&gt;
&lt;li&gt;$X \text{\textasciitilde}POI(\lambda T)$
&lt;ul&gt;
&lt;li&gt;有時候也會以 $\mu$ 來表示 $\lambda T$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PMF
&lt;ul&gt;
&lt;li&gt;$p_X(x) = e^{-\lambda T} \cdot \frac{(\lambda T)^x}{x!}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDF
&lt;ul&gt;
&lt;li&gt;$F_X(x) = \begin{cases}
\displaystyle\sum^{\lfloor x \rfloor}_{n=-\infty}e^{-\lambda T} \cdot \frac{(\lambda T)^n}{n!} &amp;amp; ,x = 0,1,2,&amp;hellip; \\
0 &amp;amp; ,otherwise
\end{cases}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>IPC -- Inter-Process Communication</title>
        <link>https://roykesydon.github.io/Blog/p/ipc--inter-process-communication/</link>
        <pubDate>Sat, 28 Jan 2023 15:31:50 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/ipc--inter-process-communication/</guid>
        <description>&lt;h1 id=&#34;share-information-between-processes&#34;&gt;Share information between processes&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;透過硬碟上的文件溝通
&lt;ul&gt;
&lt;li&gt;超慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 kernel buffer
&lt;ul&gt;
&lt;li&gt;滿快的，但這樣要一直在 user mode 和 kernel mode 來回切換，因為kernel buffer 在 kernel space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透過 shared memory region
&lt;ul&gt;
&lt;li&gt;shared memory region 在 user space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;mechanisms&#34;&gt;Mechanisms&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Signals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Communication&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data transfer
&lt;ul&gt;
&lt;li&gt;Byte Stream
&lt;ul&gt;
&lt;li&gt;Pipes&lt;/li&gt;
&lt;li&gt;FIFOs(Named Pipes)&lt;/li&gt;
&lt;li&gt;stream sockets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message Passing
&lt;ul&gt;
&lt;li&gt;SystemV MsgQ&lt;/li&gt;
&lt;li&gt;POSIX MsgQ&lt;/li&gt;
&lt;li&gt;datagram sockets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared Memory
&lt;ul&gt;
&lt;li&gt;SystemV S.M&lt;/li&gt;
&lt;li&gt;POSIX S.M&lt;/li&gt;
&lt;li&gt;Memory Mapping
&lt;ul&gt;
&lt;li&gt;anonymous memory mapping&lt;/li&gt;
&lt;li&gt;memory mapped file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Synchronization&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;pipes&#34;&gt;Pipes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Related processes
&lt;ul&gt;
&lt;li&gt;parent-child&lt;/li&gt;
&lt;li&gt;sibling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executing on same machine&lt;/li&gt;
&lt;li&gt;用法
&lt;ul&gt;
&lt;li&gt;cmd1 | cmd2
&lt;ul&gt;
&lt;li&gt;cmd1 不是輸出到 stdout，而是由 kernel 維護的 buffer，也就是 pipe&lt;/li&gt;
&lt;li&gt;cmd 不是從 stdin 獲取輸入，而是從 pipe 獲取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cmd1 | cmd2 | &amp;hellip; | cmdn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;named-pipes--fifos&#34;&gt;Named Pipes / FIFOs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Related / Unrelated processes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Executing on same machine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;creat a FIFO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commands
&lt;ul&gt;
&lt;li&gt;mkfifo&lt;/li&gt;
&lt;li&gt;mknod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嘗試寫入或讀取 FIFO 時，會被 redirect 到 pipe&lt;/p&gt;
&lt;h1 id=&#34;signal-handling&#34;&gt;Signal Handling&lt;/h1&gt;
&lt;h2 id=&#34;signal&#34;&gt;Signal&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Used by OS to notify running process some event has occured without the process needing to pull for that event&lt;/li&gt;
&lt;li&gt;process 收到 signal 後會先停止執行並執行 signal handler&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;A process did something
&lt;ul&gt;
&lt;li&gt;SIGSEGV(11), SIGFPE(8), SIGILL(4), SIGPIPE(13)&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A process wants to tell another process something
&lt;ul&gt;
&lt;li&gt;SIGCHILD(17)
&lt;ul&gt;
&lt;li&gt;child process terminated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User sends sig to foreground processes
&lt;ul&gt;
&lt;li&gt;Ctrl + C SIGINT(2)&lt;/li&gt;
&lt;li&gt;Ctrl + \ SIGQUIT(3)&lt;/li&gt;
&lt;li&gt;Ctrl + Z SIGTSTP(20)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;disposition&#34;&gt;disposition&lt;/h3&gt;
&lt;p&gt;決定 process 遇到 signal 時該怎麼處理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Term
&lt;ul&gt;
&lt;li&gt;teminate process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ign
&lt;ul&gt;
&lt;li&gt;ignore&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Core
&lt;ul&gt;
&lt;li&gt;terminate the process and dump core&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stop
&lt;ul&gt;
&lt;li&gt;stop the process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cont
&lt;ul&gt;
&lt;li&gt;continue the process if it is stopped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;signal-cant-not-be-caught&#34;&gt;Signal can&amp;rsquo;t not be caught&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SIGKILL(9)&lt;/li&gt;
&lt;li&gt;SIGSTOP(19)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;trap&lt;/p&gt;
&lt;p&gt;可以 handle signal&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kill&#34;&gt;kill&lt;/h2&gt;
&lt;p&gt;kill - L 可以看到 standard signal 和 real-time signal&lt;/p&gt;
&lt;p&gt;standard signal 開頭是 SIG，realt-time signal 是 SIGRT&lt;/p&gt;
</description>
        </item>
        <item>
        <title>InstructGPT</title>
        <link>https://roykesydon.github.io/Blog/p/instructgpt/</link>
        <pubDate>Fri, 27 Jan 2023 17:39:12 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/instructgpt/</guid>
        <description>&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2203.02155&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Training language models to follow instructions with human feedback&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;把語言模型變大不代表他們會更好地遵循用戶的意圖。&lt;/p&gt;
&lt;p&gt;大的語言模型有可能會生成 untruthful, toxic, not helpful 的答案。&lt;/p&gt;
&lt;p&gt;該論文透過 fine-tuning with human feedback 來解決這問題。&lt;/p&gt;
&lt;p&gt;一開始準備一系列人工標註的 prompts，然後用這 dataset 對 GPT-3 做 fine-tune。&lt;/p&gt;
&lt;p&gt;接下來再蒐集一個 dataset，存放 rankings of model outputs，由人工判斷輸出好壞，再用 RL 把剛剛 fine-tune 過的 model 繼續 fine-tune。&lt;/p&gt;
&lt;p&gt;最後有 1.3B 參數的 InstructGPT 表現的結果比 175B 參數的 GPT-3 還好。&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Large language models(LMs) 可以透過 &amp;ldquo;prompt&amp;rdquo; 來執行各種 NLP 任務。&lt;/p&gt;
&lt;p&gt;但這些模型也常有一些非目的性的行為，諸如捏造事實等等。&lt;/p&gt;
&lt;p&gt;原因是出在目標函數上，多數 LMs 的目標函數是根據網路上的文本生出下一個字詞。&lt;/p&gt;
&lt;p&gt;這和「根據使用者指令生出安全且有幫助的答案不同」。&lt;/p&gt;
&lt;p&gt;上述的差異使語言模型的目標是 misaligned。&lt;/p&gt;
&lt;p&gt;作者的目標是生出 helpful、 honest(沒有誤導性資訊)、harmless 的 model。&lt;/p&gt;
&lt;p&gt;具體作法，使用 reinforcement learning from human feedback(RLHF)。&lt;/p&gt;
&lt;h2 id=&#34;訓練步驟&#34;&gt;訓練步驟&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/instruct-gpt-train-step.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;結果&#34;&gt;結果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Labelers 明顯偏好 InstructGPT 的答案，勝過 GPT-3 的答案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InstructGPT 的答案在 truthfulness 勝過 GPT-3 的答案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InstructGPT 的答案在 toxicity 上小勝 GPT-3 的答案，但在 bias 上沒有&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;methods&#34;&gt;Methods&lt;/h1&gt;
&lt;h2 id=&#34;dataset&#34;&gt;Dataset&lt;/h2&gt;
&lt;p&gt;標註人員寫很多 prompts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plain:
&lt;ul&gt;
&lt;li&gt;隨便寫任意任務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Few-shot:
&lt;ul&gt;
&lt;li&gt;想個 instruction，並寫 multiple query/response pairs for that instruction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User-based:
&lt;ul&gt;
&lt;li&gt;根據一些申請使用 OpenAI API 的用戶，提出有關的 prompts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後根據這個訓練初步模型，並把這個初步模型放到他們的 Playground 給用戶使用。&lt;/p&gt;
&lt;p&gt;再把用戶問的問題蒐集回來，並做篩選。&lt;/p&gt;
&lt;p&gt;訓練 SFT 的模型用 13k training prompts&lt;/p&gt;
&lt;p&gt;訓練 RM 的模型用 33k training prompts&lt;/p&gt;
&lt;p&gt;訓練 PPO 的模型用 31k training prompts&lt;/p&gt;
&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Supervised fine-tuning(SFT)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拿 GPT-3 去訓練 16 個 epochs&lt;/li&gt;
&lt;li&gt;跑一個 epoch 就發現 overfitting，但發現訓練更多 epoches 對後面的 RM 有用，而且這個 model 也只是過渡產品&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reward modeling(RM)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把 SFT 後面的 unembedding layer 去除掉，接上線性層，最後輸出一個 scalar reward&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 6B RMs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這模型會吃 prompt 和 response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人工標記的是排序，不是分數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;對每個 prompt 生出 9 個答案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原本是 4 個，但排 9 個花的時間可能不會到 4 個的兩倍，因為主要心力會花在讀 prompt。但標註訊息會多很多，因為都是兩兩比較。&lt;/li&gt;
&lt;li&gt;而且在 loss 中最多只要丟入 RM 9 次，因為可以重用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pairwise Ranking Loss&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對一個 prompt(假設是 x)，取出一對回覆(假設是 $y_w$ 和 $y_l$)，算出 RM(x, $y_w$) 和 RM(x, $y_l$)，假設 $y_w$ 比 $y_l$ 排序高，讓 RM(x, $y_w$) - RM(x, $y_l$) 的數值越大越好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/instruct-gpt-reward-loss.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reinforcement learning(RL)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PPO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/instruct-gpt-rl-loss.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\beta$ 那項是 KL divergence&lt;/li&gt;
&lt;li&gt;$\gamma$ 那項是不想要讓這 model 太專注在微調的任務，而失去原本在其他 NLP 任務也表現很好的功能。
&lt;ul&gt;
&lt;li&gt;$D_{pretrain}$ 是 pretraining distribution&lt;/li&gt;
&lt;li&gt;如果 $\gamma$ 為 0，在該實驗中叫做 PPO，否則，稱為 PPO-ptx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;result&#34;&gt;Result&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/instruct-gpt-result.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bayesian Optimization</title>
        <link>https://roykesydon.github.io/Blog/p/bayesian-optimization/</link>
        <pubDate>Thu, 26 Jan 2023 01:36:53 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/bayesian-optimization/</guid>
        <description>&lt;h1 id=&#34;介紹&#34;&gt;介紹&lt;/h1&gt;
&lt;p&gt;一種用於自動化找超參數的方法，用在採樣昂貴而且是黑盒子的情況&lt;/p&gt;
&lt;h1 id=&#34;流程&#34;&gt;流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;取樣一些資料點&lt;/li&gt;
&lt;li&gt;生出一個 Surrogate Model(可採用 Gaussian Process)&lt;/li&gt;
&lt;li&gt;反覆做以下事情
&lt;ul&gt;
&lt;li&gt;用 Acquisition Function 挑選下一個要採樣的點&lt;/li&gt;
&lt;li&gt;重新評估 Surrogate Model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;gaussian-process&#34;&gt;Gaussian Process&lt;/h2&gt;
&lt;p&gt;最終的 prediction 是一個 distribution 而不是單一個數字
生成方法需借助 kernel function，常用 RBF(Radial Basis Function)&lt;/p&gt;
&lt;p&gt;$K(x, x^{&amp;rsquo;}|\tau)=\sigma^2exp(-\frac{1}{2}(\frac{x-x^{&amp;rsquo;}}{l})^2)$&lt;/p&gt;
&lt;p&gt;$\sigma$ 和 $l$ 是兩個可以調整的超參數&lt;/p&gt;
&lt;h2 id=&#34;acquisition-function&#34;&gt;Acquisition Function&lt;/h2&gt;
&lt;p&gt;可用超參數來調節 exploitation 和 exploitation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UCB(Upper confidence bound)&lt;/li&gt;
&lt;li&gt;PI(probability of improvement)&lt;/li&gt;
&lt;li&gt;EI(Expected improvement)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>IO Redirection</title>
        <link>https://roykesydon.github.io/Blog/p/io-redirection/</link>
        <pubDate>Sat, 21 Jan 2023 02:20:43 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/io-redirection/</guid>
        <description>&lt;h1 id=&#34;ppfdt&#34;&gt;PPFDT&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;per process file descriptor table&lt;/li&gt;
&lt;li&gt;每個 process 都有&lt;/li&gt;
&lt;li&gt;存放 file descriptors
&lt;ul&gt;
&lt;li&gt;file descriptors 是一個唯一的整數，用來識別作業系統上的 open file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;0, 1, 2 是 Standard input / ouput / error&lt;/li&gt;
&lt;li&gt;大小受限於 OPEN_MAX，亦即能同時間能開的最多檔案數&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;redirection&#34;&gt;Redirection&lt;/h1&gt;
&lt;h2 id=&#34;input-redirection&#34;&gt;Input redirection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$ wc &amp;lt; /etc/passwd
&lt;ul&gt;
&lt;li&gt;把 wc 的 PPFDT 的 stdin 改成 /etc/passwd&lt;/li&gt;
&lt;li&gt;如果是 $ wc /etc/passwd，則是在 PPFDT 追加 /etc/passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ouput-redirection&#34;&gt;Ouput redirection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$ wc &amp;gt; f1
&lt;ul&gt;
&lt;li&gt;把 wc 的 PPFDT 的 stdout 改成 f1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;input--output-redirection&#34;&gt;Input &amp;amp; output redirection&lt;/h2&gt;
&lt;p&gt;兩個可以同時用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ cat &amp;lt; f1 &amp;gt; f2&lt;/li&gt;
&lt;li&gt;&amp;gt;&amp;gt; 可以 append&lt;/li&gt;
&lt;li&gt;$ &amp;lt; f1 cat &amp;gt; f2
&lt;ul&gt;
&lt;li&gt;可以亂換位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;error-redirection&#34;&gt;Error redirection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$ find / -name f1 2&amp;gt; error 1&amp;gt; outputs
&lt;ul&gt;
&lt;li&gt;這樣就會把那些 Permission denied 的給到 errors，成功的給到 outputs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2&amp;gt;/dev/null
&lt;ul&gt;
&lt;li&gt;/dev/null 會把丟進來的東西都丟棄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;copy-descripter&#34;&gt;Copy Descripter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;這兩者等價
&lt;ul&gt;
&lt;li&gt;$ cat f1 1&amp;gt;op_err 2&amp;gt;op_err&lt;/li&gt;
&lt;li&gt;$ cat f1 1&amp;gt;op_err 2&amp;gt;&amp;amp;1
&lt;ul&gt;
&lt;li&gt;make 2 a copy of 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Process Management</title>
        <link>https://roykesydon.github.io/Blog/p/process-management/</link>
        <pubDate>Sat, 21 Jan 2023 00:08:25 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/process-management/</guid>
        <description>&lt;h1 id=&#34;compile-c&#34;&gt;Compile C&lt;/h1&gt;
&lt;h2 id=&#34;4-steps&#34;&gt;4-steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;pre-processing&lt;/li&gt;
&lt;li&gt;compilation&lt;/li&gt;
&lt;li&gt;assembly&lt;/li&gt;
&lt;li&gt;linking&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;types-of-object-files&#34;&gt;Types of Object Files&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Executable object file&lt;/li&gt;
&lt;li&gt;Relocatable object file&lt;/li&gt;
&lt;li&gt;Shared object file&lt;/li&gt;
&lt;li&gt;Core file&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;formats-of-object-files&#34;&gt;Formats of Object Files&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;a.out
&lt;ul&gt;
&lt;li&gt;initial version of UNIX&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COFF
&lt;ul&gt;
&lt;li&gt;SVR3 UNIX&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PE
&lt;ul&gt;
&lt;li&gt;Win. NT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ELF
&lt;ul&gt;
&lt;li&gt;SVR4 Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;elf-format-of-a-program&#34;&gt;ELF format of a program&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ELF Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Program Header Table&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.rodata&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.bss&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.symtab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.rel.text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.rel.data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.debug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.strtab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Section Header Table&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可參考: &lt;a class=&#34;link&#34; href=&#34;http://ccckmit.wikidot.com/lk:elf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://ccckmit.wikidot.com/lk:elf&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;process&#34;&gt;Process&lt;/h1&gt;
&lt;p&gt;Instance of a program running on a computer&lt;/p&gt;
&lt;h2 id=&#34;process-control-block&#34;&gt;Process Control Block&lt;/h2&gt;
&lt;p&gt;task_struct&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process Identification
&lt;ul&gt;
&lt;li&gt;PID, PPID, SID, UID, EUID..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process State Information&lt;/li&gt;
&lt;li&gt;Process Control Information&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Shell</title>
        <link>https://roykesydon.github.io/Blog/p/shell/</link>
        <pubDate>Thu, 19 Jan 2023 23:00:02 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/shell/</guid>
        <description>&lt;h1 id=&#34;features&#34;&gt;Features&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Process control&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Flow control&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;File &amp;amp; cmd name completions&lt;/li&gt;
&lt;li&gt;Cmd line editng&lt;/li&gt;
&lt;li&gt;Cmd history&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;command-mode&#34;&gt;Command Mode&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Interactive&lt;/li&gt;
&lt;li&gt;Non- Interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;command-type&#34;&gt;Command Type&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;internal / Builtin command&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令的程式碼是 shell 的一部分
&lt;ul&gt;
&lt;li&gt;e.g., cd, exit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不會產生 child process&lt;/li&gt;
&lt;li&gt;有些 internal command，比如 echo, pwd，會 internal 和 external 都有實作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;external command&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令的程式碼在硬碟上的某個 binary file
&lt;ul&gt;
&lt;li&gt;e.g., clear, ls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會產生 child process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;common-commands&#34;&gt;Common Commands&lt;/h1&gt;
&lt;p&gt;比較實用或常用的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;grep&lt;/p&gt;
&lt;p&gt;找字詞&lt;/p&gt;
&lt;p&gt;grep &amp;lt;string/pattern&amp;gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i 大小寫不敏感&lt;/li&gt;
&lt;li&gt;-v 不包含關鍵字的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cut
找 column&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-f 找哪些 column&lt;/li&gt;
&lt;li&gt;-d 分隔符是什麼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比較兩個檔案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;comm&lt;/p&gt;
&lt;p&gt;顯示 file1 獨有的列、 file2 獨有的列、file1 和 file2 共有的列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmp, diff&lt;/p&gt;
&lt;p&gt;回傳不一樣的列資訊&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unset&lt;/p&gt;
&lt;p&gt;把指定的變數移除掉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tee&lt;/p&gt;
&lt;p&gt;吃 stdin 輸出到 stdout 和其他檔案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;less&lt;/p&gt;
&lt;p&gt;讀檔案用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;expansions&#34;&gt;Expansions&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;White space&lt;/li&gt;
&lt;li&gt;Control Operators
&lt;ul&gt;
&lt;li&gt;;
&lt;ul&gt;
&lt;li&gt;讓指令接著執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;amp;
&lt;ul&gt;
&lt;li&gt;放在結尾，讓指令在背景執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;amp;&amp;amp;
&lt;ul&gt;
&lt;li&gt;logical AND&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;||
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;logical OR&lt;/p&gt;
&lt;p&gt;前面失敗才會跑後面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;#
&lt;ul&gt;
&lt;li&gt;註解用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\
&lt;ul&gt;
&lt;li&gt;escape special characters&lt;/li&gt;
&lt;li&gt;放結尾好換行繼續輸入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$?
&lt;ul&gt;
&lt;li&gt;一個特別的變數，有上個指令的 exit code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shell variables
&lt;ul&gt;
&lt;li&gt;User defined&lt;/li&gt;
&lt;li&gt;Env var&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shell history&lt;/li&gt;
&lt;li&gt;File Globing
&lt;ul&gt;
&lt;li&gt;*, ?, [], -, !&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>GPT 三部曲</title>
        <link>https://roykesydon.github.io/Blog/p/gpt-%E4%B8%89%E9%83%A8%E6%9B%B2/</link>
        <pubDate>Thu, 19 Jan 2023 01:50:07 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/gpt-%E4%B8%89%E9%83%A8%E6%9B%B2/</guid>
        <description>&lt;p&gt;GPT 本質上就是 Transformer 的 decoder&lt;/p&gt;
&lt;h1 id=&#34;gpt-1&#34;&gt;GPT-1&lt;/h1&gt;
&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://www.semanticscholar.org/paper/Improving-Language-Understanding-by-Generative-Radford-Narasimhan/cd18800a0fe0b668a1cc19f2ec95b5003d0a5035&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Improving Language Understanding by Generative Pre-Training&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用 semi-supervised，後來被歸為 self-supervised&lt;/p&gt;
&lt;h2 id=&#34;unsupervised-pre-training&#34;&gt;Unsupervised pre-training&lt;/h2&gt;
&lt;p&gt;$L_1(U)=\sum_i logP(u_i|u_{i-k},&amp;hellip;,u_{i-1};\theta)$&lt;/p&gt;
&lt;p&gt;$U= \{ u_1,&amp;hellip;,u_n \}$&lt;/p&gt;
&lt;p&gt;$U$ 是一系列未標記的文本 token&lt;/p&gt;
&lt;p&gt;$k$ 是窗口大小&lt;/p&gt;
&lt;h3 id=&#34;模型大致架構&#34;&gt;模型大致架構&lt;/h3&gt;
&lt;p&gt;$h_0=UW_e+W_p$&lt;/p&gt;
&lt;p&gt;$h_1=transformer \_ block(h_{i-1})\forall i \in[1,n]$&lt;/p&gt;
&lt;p&gt;$P(u)=softmax(h_nW^T_e)$&lt;/p&gt;
&lt;p&gt;$U=\{u_{-k},&amp;hellip;,u_{-1}\}$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;supervised-fine-tuning&#34;&gt;Supervised fine-tuning&lt;/h2&gt;
&lt;p&gt;$P(y|x^1,&amp;hellip;,x^m)=softmax(h^m_lW_y)$&lt;/p&gt;
&lt;p&gt;$L2(C)=\sum_{(x,y)}log P(y|x^1,&amp;hellip;,x^m)$&lt;/p&gt;
&lt;p&gt;$L_3(C)=L_2(C)+\lambda*L_1(C)$&lt;/p&gt;
&lt;p&gt;$C$ 是 labeled 的資料集，微調基本上就是在後面加上線性層&lt;/p&gt;
&lt;p&gt;作者最大化 likelihood 的時候是用 $L_3$ 而非單純的 $L_2$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;微調應用範例&#34;&gt;微調應用範例&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-1-tasks.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;資料集&#34;&gt;資料集&lt;/h2&gt;
&lt;p&gt;用 BooksCorpus 訓練出來的&lt;/p&gt;
&lt;p&gt;有超過 7000 本未出版的書&lt;/p&gt;
&lt;h2 id=&#34;模型結構&#34;&gt;模型結構&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;12 層 transformer 的 decoder&lt;/li&gt;
&lt;li&gt;768 維 word embedding&lt;/li&gt;
&lt;li&gt;12 個 attention heads&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;和-bert-base-比較&#34;&gt;和 BERT BASE 比較&lt;/h2&gt;
&lt;p&gt;BERT 論文比較晚出，但 BASE 的模型架構和 GPT 有相似之處，&lt;/p&gt;
&lt;p&gt;BASE 是 12 層的 decoder，word embedding 和 attention head 的維度或數量和 GPT-1 相同&lt;/p&gt;
&lt;h1 id=&#34;gpt-2&#34;&gt;GPT-2&lt;/h1&gt;
&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://paperswithcode.com/paper/language-models-are-unsupervised-multitask&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Language Models are Unsupervised Multitask Learner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GPT-2 除了用更大的的模型和更大的資料集，把重點放在 zero-shot 上，雖然在 GPT-1 的論文就有提過 zero-shot&lt;/p&gt;
&lt;h2 id=&#34;資料集-1&#34;&gt;資料集&lt;/h2&gt;
&lt;p&gt;這次做了一個叫做 WebText 的資料集，有百萬級別的網頁&lt;/p&gt;
&lt;h3 id=&#34;common-crawl&#34;&gt;Common Crawl&lt;/h3&gt;
&lt;p&gt;大型爬蟲專案，有大量網頁資料，但充斥了垃圾訊息&lt;/p&gt;
&lt;h3 id=&#34;webtext&#34;&gt;WebText&lt;/h3&gt;
&lt;p&gt;WebText 的資料來源是 reddit 上的外部連結，只要有至少三個 karma，就會被採納，由此取得品質較好的網頁資料。透過這種方法，取得了 4500 萬個連結。並用Dragnet (Peters &amp;amp; Lecocq, 2013) and Newspaper content extractors 把文字訊息從 HTML 中抓出來&lt;/p&gt;
&lt;h2 id=&#34;架構&#34;&gt;架構&lt;/h2&gt;
&lt;p&gt;和原本差不多，變成有 1.5B 參數的 Transformer decoder&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-2-models.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;zero-shot&#34;&gt;zero-shot&lt;/h2&gt;
&lt;p&gt;不需要下游任務的標記資料&lt;/p&gt;
&lt;p&gt;改把任務輸入進模型&lt;/p&gt;
&lt;h3 id=&#34;目前問題&#34;&gt;目前問題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現在的模型泛化能力不太好&lt;/li&gt;
&lt;li&gt;Multitask learning
在 NLP 上不太常用，NLP 現在主流還是在預訓練模型上做微調以應對下游任務
&lt;ul&gt;
&lt;li&gt;對每個下游任務都得重新訓練模型&lt;/li&gt;
&lt;li&gt;得蒐集 labeled 資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結果&#34;&gt;結果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-2-result-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-2-result-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;gpt-3&#34;&gt;GPT-3&lt;/h1&gt;
&lt;p&gt;paper: &lt;a class=&#34;link&#34; href=&#34;https://arxiv.org/abs/2005.14165&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Language Models are Few-Shot Learners&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有 175B 的參數，由於模型極大，要在子任務微調會成本很大，所以不做任何梯度更新&lt;/li&gt;
&lt;li&gt;在很多 NLP 任務有傑出的成果&lt;/li&gt;
&lt;li&gt;可以生出人類難以區分的新聞文章&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目前有的問題&#34;&gt;目前有的問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要在子任務微調，需要資料集&lt;/li&gt;
&lt;li&gt;微調後在有些子任務上表現好不代表你預訓練模型一定泛化能力高&lt;/li&gt;
&lt;li&gt;人類不需要大量 labeled 資料去完成小任務&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;評估方式&#34;&gt;評估方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分為三種，few / one / zero-shot learning&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架構-1&#34;&gt;架構&lt;/h2&gt;
&lt;p&gt;基本上 GPT-3 和 GPT-2 架構一樣&lt;/p&gt;
&lt;h3 id=&#34;相同&#34;&gt;相同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;modified initialization&lt;/li&gt;
&lt;li&gt;pre-normalization&lt;/li&gt;
&lt;li&gt;reversible tokenization described therein&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不同&#34;&gt;不同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把 Sparse Transformer 的一些修改拿過來用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-3-models.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;GPT-3 Small 是 GPT-1 的大小
GPT-3 Medium 是 BERT Large 的大小
GPT-3 XL 和 GPT-2 相近，比較淺也比較寬&lt;/p&gt;
&lt;h4 id=&#34;batch-size-大小&#34;&gt;Batch Size 大小&lt;/h4&gt;
&lt;p&gt;模型小的時候需要小一點，透過這種額外的 noise 來避免 overfitting(不確定是不是猜想)&lt;/p&gt;
&lt;h2 id=&#34;資料集-2&#34;&gt;資料集&lt;/h2&gt;
&lt;h3 id=&#34;common-crawl-1&#34;&gt;Common Crawl&lt;/h3&gt;
&lt;p&gt;架構比 GPT-2 大很多，所以回頭考慮這個資料集&lt;/p&gt;
&lt;h4 id=&#34;三步驟&#34;&gt;三步驟&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;先過濾，透過 reddit 那個高品質的資料集，來訓練一個模型分類高品質和低品質的網頁。&lt;/li&gt;
&lt;li&gt;透過 LSH 演算法把相似的文本過濾掉&lt;/li&gt;
&lt;li&gt;把一些已知高品質的資料集也加進來&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-3-dataset.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;這是一個 Batch 裡有 60% 來自 Common Crawl(filtered) 的意思
Wikipedia 雖然總量比較少，但也有 3% 的採樣率&lt;/p&gt;
&lt;h2 id=&#34;結果-1&#34;&gt;結果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-3-result-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;計算量指數增長，loss 卻是線性的往下降&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://roykesydon.github.io/Blog/Blog/images/gpt/gpt-3-result-2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;paper 裡有很多任務的實驗結果，這邊就不附上了&lt;/p&gt;
&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;在文本生成上還是比較弱，生很長的東西，可能會重複自己說過的話、失去連貫性、自相矛盾等等&lt;/p&gt;
&lt;p&gt;在有些雙向性的任務上可能表現更差&lt;/p&gt;
&lt;h2 id=&#34;影響&#34;&gt;影響&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可能被用來散布不實消息、垃圾郵件等等&lt;/li&gt;
&lt;li&gt;偏見&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;在很多 NLP 任務可以做到接近 SOTA 微調模型的成果&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux 瑣事</title>
        <link>https://roykesydon.github.io/Blog/p/linux-%E7%91%A3%E4%BA%8B/</link>
        <pubDate>Thu, 19 Jan 2023 01:50:07 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/linux-%E7%91%A3%E4%BA%8B/</guid>
        <description>&lt;h1 id=&#34;vm&#34;&gt;VM&lt;/h1&gt;
&lt;p&gt;A software implementation of a machine&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;System VM
&lt;ul&gt;
&lt;li&gt;提供可以執行 GuestOS 的 complete system platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process VM
&lt;ul&gt;
&lt;li&gt;像一個一般的 app 一樣在 hostOS 跑，支援單一個 process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hypervisor&#34;&gt;Hypervisor&lt;/h2&gt;
&lt;p&gt;又稱虛擬機器監視器（英語：virtual machine monitor，縮寫為VMM）
用來管理 VM&lt;/p&gt;
&lt;p&gt;允許多個 GuestOS 跑在 host computer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Type-1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bare-metal hypervisors&lt;/li&gt;
&lt;li&gt;直接在硬體上執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type-2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hosted hypervisors&lt;/li&gt;
&lt;li&gt;在 hostOS 上執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;directories&#34;&gt;directories&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Binary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., bin, sbin, lib, opt
&lt;ul&gt;
&lt;li&gt;bin: 有關 user 的指令&lt;/li&gt;
&lt;li&gt;sbin: 管理員會用的指令&lt;/li&gt;
&lt;li&gt;opt: optional software，多數機器中這是空的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., boot, etc,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., home, root, srv, media, mnt, temp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In memory
字面上的意思，不在 hard disk，在 memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., dev, proc, sys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System Resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., usr&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variable Data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., var&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://roykesydon.github.io/Blog/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>https://roykesydon.github.io/Blog/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
