<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Full Stack on Roykesydon</title>
        <link>https://roykesydon.github.io/Blog/categories/full-stack/</link>
        <description>Recent content in Full Stack on Roykesydon</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 25 Aug 2024 00:00:17 +0800</lastBuildDate><atom:link href="https://roykesydon.github.io/Blog/categories/full-stack/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>SQL 語法筆記</title>
        <link>https://roykesydon.github.io/Blog/p/sql-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sun, 25 Aug 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/sql-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;邏輯上的執行順序&#34;&gt;邏輯上的執行順序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;FROM&lt;/li&gt;
&lt;li&gt;WHERE&lt;/li&gt;
&lt;li&gt;GROUP BY&lt;/li&gt;
&lt;li&gt;HAVING&lt;/li&gt;
&lt;li&gt;DISTINCT&lt;/li&gt;
&lt;li&gt;SELECT&lt;/li&gt;
&lt;li&gt;ORDER BY&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ddl&#34;&gt;DDL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Definition Language&lt;/li&gt;
&lt;li&gt;用來定義資料庫的結構&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-database&#34;&gt;Create Database&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DATABASE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;database_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;create-table&#34;&gt;Create Table&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;....&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Data types:
&lt;ul&gt;
&lt;li&gt;INTENGER, VARCHAR(size), TEXT, etc.&lt;/li&gt;
&lt;li&gt;VARCHAR
&lt;ul&gt;
&lt;li&gt;Variable-length character string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constraints&#34;&gt;Constraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datatype&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;....&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Auto Increment
&lt;ul&gt;
&lt;li&gt;用來自動增加一個數值&lt;/li&gt;
&lt;li&gt;通常用在 primary key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Primary Key
&lt;ul&gt;
&lt;li&gt;用來唯一識別一筆資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Foreign Key
&lt;ul&gt;
&lt;li&gt;用來避免資料不一致&lt;/li&gt;
&lt;li&gt;必須是另一個 table 的 primary key&lt;/li&gt;
&lt;li&gt;可以是 NULL&lt;/li&gt;
&lt;li&gt;可以設置 reference action
&lt;ul&gt;
&lt;li&gt;比如 &lt;code&gt;ON DELETE CASCADE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not Null
&lt;ul&gt;
&lt;li&gt;用來限制 column 不可以是 NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unique
&lt;ul&gt;
&lt;li&gt;不像 primary key，可以有 null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check
&lt;ul&gt;
&lt;li&gt;用來限制 column 的值，可以自己寫條件&lt;/li&gt;
&lt;li&gt;可以用在多個 column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dcl&#34;&gt;DCL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Control Language&lt;/li&gt;
&lt;li&gt;用來控制資料庫的存取權限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dql&#34;&gt;DQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Query Language&lt;/li&gt;
&lt;li&gt;用來查詢資料庫中的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;select&#34;&gt;Select&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; 代表所有的 column&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;column&#34;&gt;column&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;column 也可以利用 operator
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;AS&lt;/code&gt; 來改變 column 的名稱
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;where&#34;&gt;WHERE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;針對 row 的條件過濾&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;any-all&#34;&gt;ANY, ALL&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來比較子查詢的結果&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ANY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;如果用 &amp;gt; ANY subquery，而 subquery 沒有任何結果，那麼就會回傳 false，因為你的數值沒有比任何一人都高（要至少一人）&lt;/li&gt;
&lt;li&gt;如果是 &amp;gt; ALL subquery，那麼就是要比所有人都高，所以如果 subquery 沒有任何結果，那麼就會回傳 true，你的數值比裡面的東西都高&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;join&#34;&gt;JOIN&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來結合兩個 table&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;types
&lt;ul&gt;
&lt;li&gt;INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;group-by&#34;&gt;GROUP BY&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來將資料分組&lt;/li&gt;
&lt;li&gt;針對 group 的條件過濾&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;select 的 column 必須是 group by 的 column 或是 aggregate function&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;having&#34;&gt;HAVING&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來過濾 group by 的結果&lt;/li&gt;
&lt;li&gt;要有 group by 才能使用&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GROUP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;HAVING&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;order-by&#34;&gt;ORDER BY&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;可以指定升冪或降冪
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DESC&lt;/code&gt;, &lt;code&gt;ASC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;limit--offset&#34;&gt;LIMIT &amp;amp; OFFSET&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來限制查詢結果的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;distinct&#34;&gt;DISTINCT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來去除重複的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;case&#34;&gt;CASE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來做條件判斷&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CASE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;THEN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ELSE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;查詢結果集合運算&#34;&gt;查詢結果集合運算&lt;/h4&gt;
&lt;h5 id=&#34;union&#34;&gt;UNION&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來結合兩個查詢結果&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;table2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNION ALL&lt;/code&gt; 會包含重複的資料
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UNION&lt;/code&gt; 會自動去除重複的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;每個查詢的 column 數量必須相同&lt;/li&gt;
&lt;li&gt;每個查詢的 column 的資料型態必須相同&lt;/li&gt;
&lt;li&gt;column 的順序必須相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;intersect&#34;&gt;INTERSECT&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來取兩個查詢結果的交集&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;except&#34;&gt;EXCEPT&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用來取兩個查詢結果的差集&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;all&#34;&gt;ALL&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;要加這個才會包含重複的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;subquery&#34;&gt;Subquery&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;select, from, where 等等都可以有 subquery&lt;/li&gt;
&lt;li&gt;他可以視情況回傳一個值，也可以回傳一堆 row，或是一個 column（一維向量&lt;/li&gt;
&lt;li&gt;可以用 outer query 的 column 來當作 subquery 的條件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;correlated-subquery&#34;&gt;Correlated Subquery&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;一個 subquery 用到 outer query 的 value&lt;/li&gt;
&lt;li&gt;可能導致效能問題，比如每一筆資料都要執行一次 subquery
&lt;ul&gt;
&lt;li&gt;像是兩層 for loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flattening
&lt;ul&gt;
&lt;li&gt;寫成等效的 flat query&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dml&#34;&gt;DML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data Manipulation Language&lt;/li&gt;
&lt;li&gt;用來操作資料庫中的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;insert&#34;&gt;Insert&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以一次插入多筆資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;column2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;delete&#34;&gt;Delete&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;DELETE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;operators&#34;&gt;Operators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic Operators&lt;/li&gt;
&lt;li&gt;Comparison Operators&lt;/li&gt;
&lt;li&gt;Bitwise Operators&lt;/li&gt;
&lt;li&gt;String Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Math Functions&lt;/li&gt;
&lt;li&gt;Date Functions&lt;/li&gt;
&lt;li&gt;String Functions&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Kafka 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/kafka-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sat, 17 Aug 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/kafka-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;kafka&#34;&gt;Kafka&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;event streaming platform&lt;/li&gt;
&lt;li&gt;專注在 publish / subscribe&lt;/li&gt;
&lt;li&gt;message 會在一段時間後被刪除，而不是等待 consumer 處理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;topic&#34;&gt;Topic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個特定的 data stream
&lt;ul&gt;
&lt;li&gt;一系列的 message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有限制 topic 的數量&lt;/li&gt;
&lt;li&gt;由 name 來識別&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;topic-replication&#34;&gt;Topic replication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果有一個 broker down 了，會有另一個 broker 繼續提供複本&lt;/li&gt;
&lt;li&gt;topic replication factor
&lt;ul&gt;
&lt;li&gt;這個 factor 要大於 1&lt;/li&gt;
&lt;li&gt;常見的設定值是 3&lt;/li&gt;
&lt;li&gt;這個數值代表有幾個複本
&lt;ul&gt;
&lt;li&gt;複本會被放在其他的 broker 上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設為 n，可以承受 n-1 個 broker down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一個 partition 只會有一個 broker 作為他的 leader
&lt;ul&gt;
&lt;li&gt;其他的有複本的 broker 被稱為 ISR (in-sync replica)&lt;/li&gt;
&lt;li&gt;producer 寫入的時候，只能寫到 leader&lt;/li&gt;
&lt;li&gt;consumer 預設也只會從 leader 讀取
&lt;ul&gt;
&lt;li&gt;2.4 版本後，可以設定從 ISR 讀取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partition&#34;&gt;Partition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;topic 通常會被分成多個 partition&lt;/li&gt;
&lt;li&gt;partiton 中的 message 是有序的
&lt;ul&gt;
&lt;li&gt;message 會獲得 id，他是 incremental 的&lt;/li&gt;
&lt;li&gt;這個 id 被稱為 offset
&lt;ul&gt;
&lt;li&gt;只在特定的 partition 中有意義，不同的 partition 的 offset 是獨立的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但不同 partition 的 message 是沒有順序的，只有在同一個 partition 中才有順序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;immutable
&lt;ul&gt;
&lt;li&gt;一旦 message 被寫入，就不能被修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常 partition 的數量至少為 consumer 數量
&lt;ul&gt;
&lt;li&gt;如果 partition 數量少於 consumer 數量，有些 consumer 會閒置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;message&#34;&gt;Message&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;message 也被叫做 event&lt;/li&gt;
&lt;li&gt;構成
&lt;ul&gt;
&lt;li&gt;required
&lt;ul&gt;
&lt;li&gt;key, value, compression type, partition, offset, timestamp
&lt;ul&gt;
&lt;li&gt;key, value 可以是 null&lt;/li&gt;
&lt;li&gt;timestamp 可以由系統設置&lt;/li&gt;
&lt;li&gt;message 發給 kafka 後，會加上 partition, offset, timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;optional
&lt;ul&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;retention
&lt;ul&gt;
&lt;li&gt;message 會在一段時間後被刪除&lt;/li&gt;
&lt;li&gt;預設 7 天，可以設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;message-serialization--deserialization&#34;&gt;Message serialization / deserialization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 會將 message 轉換成 bytes 才傳輸&lt;/li&gt;
&lt;li&gt;用在 key 和 value&lt;/li&gt;
&lt;li&gt;不支援的格式也可以用自訂的 serializer / deserializer
&lt;ul&gt;
&lt;li&gt;ex: JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點
&lt;ul&gt;
&lt;li&gt;可以用不同的語言來寫 producer 和 consumer&lt;/li&gt;
&lt;li&gt;減少資料大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;producer&#34;&gt;Producer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;producer 會將 message 寫入到 topic&lt;/li&gt;
&lt;li&gt;producer 會知道要寫入哪個 partition&lt;/li&gt;
&lt;li&gt;send message
&lt;ul&gt;
&lt;li&gt;會帶有一個 key，可以是任何資料型態
&lt;ul&gt;
&lt;li&gt;如果 key 是 null，會以 round-robin 的方式分配到 partition&lt;/li&gt;
&lt;li&gt;如果不是，同個 key 會被分配到同個 partition，因為有 hash function 來決定
&lt;ul&gt;
&lt;li&gt;kafka partitioner 會負責做 key hashing&lt;/li&gt;
&lt;li&gt;預設 hash function 是 murmur2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;producer-acknoledgement-ack&#34;&gt;Producer acknoledgement (ack)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有三種 ack
&lt;ul&gt;
&lt;li&gt;acks=0
&lt;ul&gt;
&lt;li&gt;producer 不會等待 broker 的回應&lt;/li&gt;
&lt;li&gt;這樣會有最高的效能，但是可能會有 message 丟失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;acks=1
&lt;ul&gt;
&lt;li&gt;producer 會等待 leader 的回應&lt;/li&gt;
&lt;li&gt;這樣會有中等的效能，但是可能發生 leader down 的情況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;acks=all
&lt;ul&gt;
&lt;li&gt;producer 會等待所有的 ISR 的回應&lt;/li&gt;
&lt;li&gt;這樣會有最低的效能，但是不會有 message 丟失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consumer&#34;&gt;Consumer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;consumer 會從 topic 中讀取 message
&lt;ul&gt;
&lt;li&gt;是 pull 的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和 producer 解耦&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;push-vs-pull&#34;&gt;Push vs Pull&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;push
&lt;ul&gt;
&lt;li&gt;沒辦法知道 consumer 能不能 handle message&lt;/li&gt;
&lt;li&gt;如果 push 出去但 consumer 來不及消化會造成問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pull
&lt;ul&gt;
&lt;li&gt;如果 consumer 速度比 producer 慢，可以之後慢慢補上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;consumer-group&#34;&gt;Consumer group&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個 application 可以有多個 consumer，共同組成一個 consumer group&lt;/li&gt;
&lt;li&gt;同個 consumer group 中的 consumer 會共同設置一個 group id&lt;/li&gt;
&lt;li&gt;consumer group 中的所有 consumer 會以 exclusive 的方式從 partition 中讀取 message
&lt;ul&gt;
&lt;li&gt;不會有同一個 partition 被配給多個 consumer&lt;/li&gt;
&lt;li&gt;如果 consumer 比 partition 多，有些 consumer 會閒置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;group coordinator
&lt;ul&gt;
&lt;li&gt;會負責管理 group 中的 consumer&lt;/li&gt;
&lt;li&gt;會負責分配 partition 給 consumer&lt;/li&gt;
&lt;li&gt;利用 __consumer_offsets 來記錄 consumer group 中的 consumer 的 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;consumer-offset&#34;&gt;Consumer offset&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;kafka 會紀錄 consumer group 中的每個 consumer 消耗到哪裡了&lt;/li&gt;
&lt;li&gt;會放在 topic 的 __consumer_offsets&lt;/li&gt;
&lt;li&gt;當 group 中的 consumer 取得 message 後，會週期性的 commit offset，讓 kafka 更新到 ＿consumer_offsets
&lt;ul&gt;
&lt;li&gt;這樣即使 consumer down 了，下次啟動時，也可以從上次消耗的地方繼續&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三種 commit 策略
&lt;ul&gt;
&lt;li&gt;at least once
&lt;ul&gt;
&lt;li&gt;會在處理完 message 後才 commit&lt;/li&gt;
&lt;li&gt;要確保處理方式是 idempotent
&lt;ul&gt;
&lt;li&gt;可以幫 message 加上 primary key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;at most once
&lt;ul&gt;
&lt;li&gt;會在取得 message 後就 commit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;exactly once&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-broker&#34;&gt;Kafka broker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kafka cluster 中的每個 server 都是 broker&lt;/li&gt;
&lt;li&gt;多個連接在一起的 broker 組成一個 cluster
&lt;ul&gt;
&lt;li&gt;會有一個 broker 是 controller
&lt;ul&gt;
&lt;li&gt;負責管理 cluster 中的 broker&lt;/li&gt;
&lt;li&gt;也管 topic 和 partition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 id 來識別，id 是整數&lt;/li&gt;
&lt;li&gt;broker 會包含某些 partition&lt;/li&gt;
&lt;li&gt;也被叫做 bootstrap server
&lt;ul&gt;
&lt;li&gt;一但連到某個 broker，就可以連到整個 cluster
&lt;ul&gt;
&lt;li&gt;kafka client 會處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;broker 數量考量
&lt;ul&gt;
&lt;li&gt;儲存空間&lt;/li&gt;
&lt;li&gt;容錯&lt;/li&gt;
&lt;li&gt;throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;Zookeeper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;被用來管理 kafka broker&lt;/li&gt;
&lt;li&gt;可以拿來幫 partition 做 leader election&lt;/li&gt;
&lt;li&gt;Zookeeper 分成 leader 和 follower&lt;/li&gt;
&lt;li&gt;Kafka 3.0 之後，可以改用 Kafka Raft
&lt;ul&gt;
&lt;li&gt;4.0 之後，會移除 zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;該不該用
&lt;ul&gt;
&lt;li&gt;現在似乎 KRaft 已經準備好上 production 了&lt;/li&gt;
&lt;li&gt;如果是 kafka client，應該盡量不使用 zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kafka-server-start.sh &amp;lt;config file&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;啟動 kafka server (broker)&lt;/li&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--bootstrap-server&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 kafka server&lt;/li&gt;
&lt;li&gt;不推薦使用 &lt;code&gt;--zookeeper&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--command-config&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;li&gt;裡面會寫包含帳號密碼以及加密方式等安全設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kaft-topics.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--partitions&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 partition 數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--replication-factor&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 replication factor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--topic&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 topic name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--describe&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;描述 topic
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Replicas&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;顯示哪些 broker 有複本 (id)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ISR&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;顯示哪些 broker 和 leader 同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--list&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;列出所有 topic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kaft-console-producer.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--topic&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 topic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--producer.config&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--producer-property&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 producer property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acks&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 acks 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--property&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可以打許多次，每次指定一個 property&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kaft-console-consumer.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--topic&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 topic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--from-beginning&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;不只是自打開 consumer 後的 message，而是從一開始的 message 開始&lt;/li&gt;
&lt;li&gt;如果同一個 group 有多個 consumer，這個選項只會對第一個 consumer 有用，offset 是看 group 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--consumer.config&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 config file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--group&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定 consumer group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kafka-consumer-groups.sh&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--list&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;列出所有 consumer group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--describe&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;描述 consumer group
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CURRENT-OFFSET&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;目前 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOG-END-OFFSET&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;最後一個 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LAG&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;落後的 offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MongoDB 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/mongodb-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Fri, 16 Aug 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/mongodb-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;mongodb-基礎&#34;&gt;MongoDB 基礎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以 BSON (Binary JSON) 儲存資料
&lt;ul&gt;
&lt;li&gt;BSON 是 JSON 的二進位版本，支援更多資料型別，如日期和二進位資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;_id 欄位作為預設的主鍵
&lt;ul&gt;
&lt;li&gt;若未指定，MongoDB 會自動生成一個 12 字節的 ObjectId&lt;/li&gt;
&lt;li&gt;用於確保文件中唯一性，特別在分散式系統中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;索引機制&#34;&gt;索引機制&lt;/h2&gt;
&lt;h3 id=&#34;composite-index&#34;&gt;Composite Index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由多個欄位組成，例如 (a, b)&lt;/li&gt;
&lt;li&gt;Prefix 特性
&lt;ul&gt;
&lt;li&gt;如果索引為 (a, b)，則 (a) 也可被單獨使用&lt;/li&gt;
&lt;li&gt;但 (b) 或 (a, b, c) 無法直接利用此索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hint
&lt;ul&gt;
&lt;li&gt;可強制 MongoDB 使用特定索引&lt;/li&gt;
&lt;li&gt;用於測試或避免 optimizer 選錯索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;explain-分析查詢&#34;&gt;Explain 分析查詢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來檢視查詢的執行計畫&lt;/li&gt;
&lt;li&gt;重要欄位
&lt;ul&gt;
&lt;li&gt;cursor
&lt;ul&gt;
&lt;li&gt;BasicCursor 表示全表掃描，應避免&lt;/li&gt;
&lt;li&gt;BtreeCursor 表示使用索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nscanned
&lt;ul&gt;
&lt;li&gt;掃描的索引數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nscannedObjects
&lt;ul&gt;
&lt;li&gt;掃描的文件數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;n
&lt;ul&gt;
&lt;li&gt;最終返回的文件數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關係：nscanned &amp;gt;= nscannedObjects &amp;gt;= n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scanAndOrder
&lt;ul&gt;
&lt;li&gt;表示需要將文件載入記憶體並排序&lt;/li&gt;
&lt;li&gt;通常一次性返回所有結果，效率較低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;optimizer-索引選擇&#34;&gt;Optimizer 索引選擇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一階段：尋找最佳索引
&lt;ul&gt;
&lt;li&gt;最佳索引條件
&lt;ul&gt;
&lt;li&gt;包含所有 filter 和 sort 的欄位&lt;/li&gt;
&lt;li&gt;equality filter 必須在 range filter 之前&lt;/li&gt;
&lt;li&gt;sort 欄位必須在 range filter 之後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若有多個最佳索引條件符合條件，隨便選擇一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二階段：實驗性選擇
&lt;ul&gt;
&lt;li&gt;若無最佳索引，會測試多個索引&lt;/li&gt;
&lt;li&gt;optimizer 選擇 nscanned 最小的索引作為最終方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;儲存引擎&#34;&gt;儲存引擎&lt;/h2&gt;
&lt;h3 id=&#34;mmapv1&#34;&gt;MMAPv1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB 早期的儲存引擎&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;_id 直接對應 disk 偏移量 (diskloc)
&lt;ul&gt;
&lt;li&gt;查詢速度快，但更新需維護偏移量，效能低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鎖定機制
&lt;ul&gt;
&lt;li&gt;初始為 database-level lock&lt;/li&gt;
&lt;li&gt;後期升級至 collection-level lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已於 MongoDB 4.0 後棄用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wiredtiger&#34;&gt;WiredTiger&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB 收購並採用的新儲存引擎&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;Document-level locking，提升並發效能&lt;/li&gt;
&lt;li&gt;支援資料壓縮，減少儲存空間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本演進
&lt;ul&gt;
&lt;li&gt;5.2 之前
&lt;ul&gt;
&lt;li&gt;_id 用於查找 recordid&lt;/li&gt;
&lt;li&gt;recordid 作為 clustered index，指向實際文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5.3 之後
&lt;ul&gt;
&lt;li&gt;_id 直接成為 clustered index&lt;/li&gt;
&lt;li&gt;_id 為 12 字節 (ObjectId)，比原 64 位 recordid 更大&lt;/li&gt;
&lt;li&gt;影響
&lt;ul&gt;
&lt;li&gt;對 secondary index 增加儲存負擔&lt;/li&gt;
&lt;li&gt;提升跨機器和 shard 環境中的唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Database 一般筆記</title>
        <link>https://roykesydon.github.io/Blog/p/database-%E4%B8%80%E8%88%AC%E7%AD%86%E8%A8%98/</link>
        <pubDate>Sun, 21 Jul 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/database-%E4%B8%80%E8%88%AC%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;資料庫核心概念&#34;&gt;資料庫核心概念&lt;/h2&gt;
&lt;h3 id=&#34;儲存結構&#34;&gt;儲存結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Table&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;資料庫中最基本的儲存單位，用來組織資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Row_id&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多數資料庫會維護一個唯一的 row_id，也稱為 tuple id，用來識別每一行資料&lt;/li&gt;
&lt;li&gt;例如 PostgreSQL 使用 OID 或 ctid，MySQL 則依賴主鍵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個 row 會被儲存在一個 page 中&lt;/li&gt;
&lt;li&gt;讀取時不會單獨讀取某個 row，而是以 page 為單位讀取一或多個 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IO&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;IO 操作指的是存取磁碟的操作&lt;/li&gt;
&lt;li&gt;一次 IO 可能讀取多個 page，也可能直接從 cache 中取得資料&lt;/li&gt;
&lt;li&gt;資料庫常利用 cache（如 buffer pool）來減少 IO
&lt;ul&gt;
&lt;li&gt;若查詢速度很快，可能是因為資料已存在 cache 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heap&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;用來儲存整個 table 的資料，是一種無特定順序的結構&lt;/li&gt;
&lt;li&gt;若使用 clustered index 組織資料，則不會有獨立的 heap
&lt;ul&gt;
&lt;li&gt;例如 MySQL InnoDB 的主鍵就是 clustered index，資料直接依主鍵排序儲存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料儲存方式&#34;&gt;資料儲存方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Row-oriented (行導向)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個 row 依序儲存，包含所有 column 的資料&lt;/li&gt;
&lt;li&gt;一次 IO 會讀取多個 row，每個 row 包含所有欄位&lt;/li&gt;
&lt;li&gt;適合 OLTP（線上交易處理），因為常需要存取整行資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Column-oriented (列導向)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個 column 依序儲存，同一 column 的資料連續存放&lt;/li&gt;
&lt;li&gt;壓縮效率高，且適合 aggregation 操作，因此常用於 OLAP（線上分析處理）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;碎片化-fragmentation&#34;&gt;碎片化 (Fragmentation)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Internal Fragmentation (內部碎片)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一個 page 中有許多未使用的空間&lt;/li&gt;
&lt;li&gt;可能因為 row 刪除或大小不均導致，例如插入時預留空間過多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;External Fragmentation (外部碎片)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個 page 的儲存位置不連續&lt;/li&gt;
&lt;li&gt;即使剩餘空間足夠，因不連續而無法使用，需透過整理（如 vacuum）來解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料結構與索引&#34;&gt;資料結構與索引&lt;/h2&gt;
&lt;h3 id=&#34;常用資料結構&#34;&gt;常用資料結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一種平衡樹結構，適用於快速搜尋&lt;/li&gt;
&lt;li&gt;每個 node 同時儲存 key 和 value&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;由於 node 儲存完整資料，空間利用率較低&lt;/li&gt;
&lt;li&gt;range query 效率較差，因為需要多次隨機存取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B+Tree&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;B-Tree 的改良版本，常用於資料庫索引&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;internal node 只儲存 key，leaf node 儲存 key 和 value&lt;/li&gt;
&lt;li&gt;因 internal node 只存 key，元素大小較小，一個 node 可容納更多 key，使存取的結點數變少，提升搜尋效率&lt;/li&gt;
&lt;li&gt;leaf node 用 linked list 串聯，適合 range query&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常一個 node 對應一個 DBMS 的 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LSM-Tree (Log-Structured Merge-Tree)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;設計為追加式寫入，資料加在尾端，不覆蓋原有資料&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;對 SSD 友好，因避免隨機寫入&lt;/li&gt;
&lt;li&gt;適合高寫入量的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;與 B-Tree 比較
&lt;ul&gt;
&lt;li&gt;B-Tree 為保持平衡會頻繁調整結構，導致隨機 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引基礎&#34;&gt;索引基礎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;索引的作用&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若欄位未建立索引，查詢需掃描整個 table&lt;/li&gt;
&lt;li&gt;索引透過 pointer 指向 heap 或資料位置，加速查詢&lt;/li&gt;
&lt;li&gt;索引本身也儲存在 page 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;搜索方法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Table Scan&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;掃描整個 table，適用於範圍過大或無索引的情況&lt;/li&gt;
&lt;li&gt;通常以 parallel 方式執行，提升效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index Scan&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;利用索引定位資料，再從 heap 取值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index-only Scan (Covering Index)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若所需欄位已包含在索引中，無需存取 heap&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;速度快，因避免額外 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意
&lt;ul&gt;
&lt;li&gt;索引過大可能佔用更多記憶體，甚至觸發磁碟 IO，降低效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composite Index&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將多個 column 作為 key 建立索引&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;在 PostgreSQL 中，若索引為 (a, b)，查詢 a 可使用索引，但單獨查 b 無法有效利用&lt;/li&gt;
&lt;li&gt;順序影響查詢效率，設計時需考慮常用條件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-key Column&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;可透過 include 將常用但非 key 的欄位加入索引&lt;/li&gt;
&lt;li&gt;促成 index-only scan，提升查詢速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引類型&#34;&gt;索引類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clustered Index (叢集索引)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;資料依索引順序物理儲存，也稱 Index-Organized Table&lt;/li&gt;
&lt;li&gt;特性
&lt;ul&gt;
&lt;li&gt;一個 table 只能有一個 clustered index，因資料只能按一種順序排列&lt;/li&gt;
&lt;li&gt;未指定時，primary key 通常作為 clustered index（如 MySQL InnoDB）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;範圍查詢效率高，因資料已排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Primary Key vs Secondary Key&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Primary Key&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通常用於 clustered index，資料圍繞其排序&lt;/li&gt;
&lt;li&gt;若查詢小範圍資料，因有序可減少 IO&lt;/li&gt;
&lt;li&gt;設計差異
&lt;ul&gt;
&lt;li&gt;PostgreSQL 不強制 clustered，primary key 只是唯一約束&lt;/li&gt;
&lt;li&gt;MySQL InnoDB 則將 primary key 作為 clustered index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secondary Key&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不在乎原本 table 的 order，而是根據自訂的 key 來排序&lt;/li&gt;
&lt;li&gt;會有另外一個結構去放 index，可以找到 row_id&lt;/li&gt;
&lt;li&gt;用途
&lt;ul&gt;
&lt;li&gt;提供額外的查詢路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計差異&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;所有索引（包括 primary 和 secondary）直接指向 row&lt;/li&gt;
&lt;li&gt;優勢：secondary index 可直接取資料，不用再跳一層 primary key&lt;/li&gt;
&lt;li&gt;劣勢：更新 row 時，若 row_id 改變，所有索引需同步更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MySQL&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;secondary index 指向 primary key，再由 primary key 指向 row&lt;/li&gt;
&lt;li&gt;優勢：row 更新時只需調整 primary key 的指向&lt;/li&gt;
&lt;li&gt;劣勢：查詢需多跳一次，增加 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料模型與類型&#34;&gt;資料模型與類型&lt;/h2&gt;
&lt;h3 id=&#34;資料類型&#34;&gt;資料類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;設計原則&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;設計 column 時，應先確認資料庫提供的資料類型，選擇最適合的類型以提升效能與儲存效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以 PostgreSQL 為例&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Numeric&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;整數 (integer)：如 smallint、integer、bigint&lt;/li&gt;
&lt;li&gt;浮點數 (float)：如 real、double precision&lt;/li&gt;
&lt;li&gt;Serial：自動遞增（auto increment）的整數，常用於主鍵（如 serial、bigserial）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Character&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;char(n)：固定長度字串，空間不足時補空白&lt;/li&gt;
&lt;li&gt;varchar(n)：可變長度字串，指定最大長度&lt;/li&gt;
&lt;li&gt;text：無長度限制的字串，等同於未指定長度的 varchar&lt;/li&gt;
&lt;li&gt;bpchar：好像就是 varchar，但是 document 有寫 blank trimmed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date / Time&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如 date、time、timestamp，提供日期與時間儲存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;true/false 或 null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;bytea：儲存二進位資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Geometric&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;提供點 (point)、線 (line)、多邊形 (polygon) 等類型&lt;/li&gt;
&lt;li&gt;應用：若需儲存二維平面座標，可用 point 替代兩個 float&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UUID&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通用唯一識別碼，適合分散式系統生成唯一 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enum&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;自訂有限字串集合，按建立順序有序&lt;/li&gt;
&lt;li&gt;應用：狀態欄位（如 &amp;ldquo;pending&amp;rdquo;、&amp;ldquo;completed&amp;rdquo;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分割-partitioning&#34;&gt;分割 (Partitioning)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將大 table 分成多個小 table，以提升效能或管理便利性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vertical Partitioning (垂直分割)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;按 column 分割&lt;/li&gt;
&lt;li&gt;應用
&lt;ul&gt;
&lt;li&gt;將不常用或大型欄位（如 blob）獨立出來&lt;/li&gt;
&lt;li&gt;可將這些欄位放在較慢的磁碟，保留常用欄位在 SSD&lt;/li&gt;
&lt;li&gt;減少不必要欄位進入 cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal Partitioning (水平分割)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;按 row 分割&lt;/li&gt;
&lt;li&gt;應用
&lt;ul&gt;
&lt;li&gt;根據範圍（如時間、地域）分割資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;優點&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;單一 partition 的單次查詢更快&lt;/li&gt;
&lt;li&gt;對 sequential scan 有幫助，因範圍縮小&lt;/li&gt;
&lt;li&gt;可將舊資料移至較便宜的儲存設備&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺點&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;跨 partition 移動資料效率低&lt;/li&gt;
&lt;li&gt;若查詢需掃描所有 partition，可能比未分割的 table 更慢&lt;/li&gt;
&lt;li&gt;partition 大小可能不均（unbalance），需設計均衡策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料庫游標-database-cursor&#34;&gt;資料庫游標 (Database Cursor)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;處理大型結果集時，避免一次傳送所有資料給 client（因網路與記憶體限制）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server-side Cursor&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;伺服器分批傳送資料給 client&lt;/li&gt;
&lt;li&gt;優勢：減少 client 記憶體需求&lt;/li&gt;
&lt;li&gt;劣勢：多次網路往返可能增加總時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client-side Cursor&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一次傳送所有資料，由 client 分批處理&lt;/li&gt;
&lt;li&gt;優勢：減少伺服器負擔&lt;/li&gt;
&lt;li&gt;劣勢：需較大網路頻寬與 client 記憶體&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分散式系統&#34;&gt;分散式系統&lt;/h2&gt;
&lt;h3 id=&#34;分片-sharding&#34;&gt;分片 (Sharding)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將 table 分成多個 shard，分散至不同資料庫伺服器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;與 Horizontal Partitioning 的差異&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Horizontal Partitioning：分割後仍位於同一資料庫，由 DBMS 管理&lt;/li&gt;
&lt;li&gt;Sharding：分割後分至不同伺服器，client 需自行處理資料位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;挑戰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;交易 (transaction) 與 join 操作變得複雜，因資料分散&lt;/li&gt;
&lt;li&gt;需額外設計一致性與資料存取邏輯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分片鍵-sharding-key&#34;&gt;分片鍵 (Sharding Key)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hash&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用 hash function 決定資料分配&lt;/li&gt;
&lt;li&gt;優勢：分佈均勻&lt;/li&gt;
&lt;li&gt;劣勢：範圍查詢困難&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Range&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根據某 column 的範圍（如時間、ID）分配&lt;/li&gt;
&lt;li&gt;優勢：支援範圍查詢&lt;/li&gt;
&lt;li&gt;劣勢：可能導致熱點（hotspot）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dictionary&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;根據離散值（如地區、類別）分配&lt;/li&gt;
&lt;li&gt;優勢：直觀且易管理&lt;/li&gt;
&lt;li&gt;劣勢：擴展性受限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計考量&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cardinality&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;鍵值的種類數量，種類過少限制水平擴展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;鍵值的分佈頻率，需避免單一 shard 負載過高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monotonicity&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若鍵值單調遞增或遞減，可能導致新資料集中於某 shard&lt;/li&gt;
&lt;li&gt;解決方式：結合 hash 或隨機前綴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料庫複製-database-replication&#34;&gt;資料庫複製 (Database Replication)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;透過 redundancy 來提高 reliability, tolerance, accessibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Master / Backup Replication (主從複製)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;單一 master 負責寫入，多個 backup（slave）負責讀取&lt;/li&gt;
&lt;li&gt;模式：一寫多讀&lt;/li&gt;
&lt;li&gt;應用：讀多寫少的場景（如內容管理系統）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-master Replication (多主複製)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個 master 可同時寫入&lt;/li&gt;
&lt;li&gt;挑戰：需處理寫入衝突（如使用版本控制或衝突解決策略）&lt;/li&gt;
&lt;li&gt;應用：高可用性與分散式寫入需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Synchronous (同步)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;transaction 完成前需等待所有 backup 寫入確認&lt;/li&gt;
&lt;li&gt;變體：可設定等待前 N 個或任一完成&lt;/li&gt;
&lt;li&gt;優勢：資料一致性高&lt;/li&gt;
&lt;li&gt;劣勢：延遲增加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asynchronous (非同步)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;transaction 寫入 master 後即完成，後台同步至 backup&lt;/li&gt;
&lt;li&gt;優勢：寫入速度快&lt;/li&gt;
&lt;li&gt;劣勢：可能出現資料不一致（若 master 故障）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;應用&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;常見於負載平衡與災難恢復設計&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;並發與交易管理&#34;&gt;並發與交易管理&lt;/h2&gt;
&lt;h3 id=&#34;並發控制策略&#34;&gt;並發控制策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pessimistic (悲觀)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用鎖定機制確保交易隔離&lt;/li&gt;
&lt;li&gt;適用於衝突頻繁的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimistic (樂觀)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;不使用鎖，假設衝突少見，若發生衝突則交易失敗並重試&lt;/li&gt;
&lt;li&gt;適用於讀多寫少的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;鎖定機制-lock&#34;&gt;鎖定機制 (Lock)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;類型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared Lock (共享鎖)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個交易可同時持有，適用於讀取&lt;/li&gt;
&lt;li&gt;其他交易可再設置 shared lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exclusive Lock (排他鎖)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;僅一個交易可持有，適用於寫入&lt;/li&gt;
&lt;li&gt;禁止其他交易讀取或寫入&lt;/li&gt;
&lt;li&gt;PostgreSQL 提供 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 來取得 exclusive lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相容性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;若資料已持有一種鎖，其他交易無法設置另一種鎖&lt;/li&gt;
&lt;li&gt;例如：shared lock 下無法設置 exclusive lock，反之亦然&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死結-deadlock&#34;&gt;死結 (Deadlock)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多個交易互相等待對方釋放鎖，導致無法繼續執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;處理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;多數 DBMS 會檢測死結，並強制回滾最後造成死結的交易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;兩階段鎖定-two-phase-locking-2pl&#34;&gt;兩階段鎖定 (Two-Phase Locking, 2PL)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;DBMS 為了實現 isolation 需要保證 conflict serializability (CSR)，2PL 可以保證這一點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;階段&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Growing Phase (增長階段)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;交易只能申請鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shrinking Phase (收縮階段)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;交易只能釋放鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制：釋放任一鎖後，交易無法再申請新鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一個交易釋放鎖後，無法再取得鎖&lt;/li&gt;
&lt;li&gt;保證一致性，但可能導致死結&lt;/li&gt;
&lt;li&gt;應用於多數關聯式資料庫的交易管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;實作與優化&#34;&gt;實作與優化&lt;/h2&gt;
&lt;h3 id=&#34;資料庫引擎-database-engine&#34;&gt;資料庫引擎 (Database Engine)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定義&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;也叫 storage engine 或 embedded database，負責處理 CRUD 操作的核心庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;DBMS 基於引擎提供更高階功能（如查詢優化、交易管理）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;範例&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 的 InnoDB（支援交易與外鍵）、MyISAM（高效讀寫但無交易）&lt;/li&gt;
&lt;li&gt;SQLite 本身即為嵌入式引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;物件關聯映射-orm&#34;&gt;物件關聯映射 (ORM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;載入策略&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eager Loading (積極載入)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一次載入所有相關資料&lt;/li&gt;
&lt;li&gt;範例：查詢 Teacher 時一併載入所有 Student&lt;/li&gt;
&lt;li&gt;優勢：減少後續查詢次數&lt;/li&gt;
&lt;li&gt;劣勢：可能載入過多不必要資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lazy Loading (延遲載入)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;僅在需要時載入相關資料&lt;/li&gt;
&lt;li&gt;優勢：節省初始載入時間與記憶體&lt;/li&gt;
&lt;li&gt;劣勢：可能導致多次 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open Session in View (OSIV)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每個 http request 開啟一個資料庫 session&lt;/li&gt;
&lt;li&gt;用途：配合 lazy loading，確保 request 期間資料可隨時載入&lt;/li&gt;
&lt;li&gt;注意：可能延長 session 存活時間，增加資源占用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N+1 Problem&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;查詢主表後，對每個主表記錄再查詢子表，導致 N+1 次 IO&lt;/li&gt;
&lt;li&gt;範例：查詢 10 個 Teacher，再各查其 Student，共 11 次查詢&lt;/li&gt;
&lt;li&gt;解決方式：使用 join 或 eager loading 合併查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;效能優化與實務建議&#34;&gt;效能優化與實務建議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免使用 Offset&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Offset + Limit 是簡單的 pagination 實現，但 offset 需讀取並丟棄前 n 筆資料&lt;/li&gt;
&lt;li&gt;替代方案：使用條件（如 &lt;code&gt;WHERE id &amp;gt; last_id&lt;/code&gt;）追蹤分頁位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;連線池 (Connection Pool)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;維護固定數量的資料庫連線，避免頻繁建立與關閉連線的開銷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等幂鍵 (Idempotency Key)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;確保同一 request 只執行一次&lt;/li&gt;
&lt;li&gt;實現
&lt;ul&gt;
&lt;li&gt;生成唯一鍵（如 ULID），隨 request 傳送並記錄&lt;/li&gt;
&lt;li&gt;重複鍵時拒絕執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ULID 優勢
&lt;ul&gt;
&lt;li&gt;包含時間戳記，可排序且集中於相近 page&lt;/li&gt;
&lt;li&gt;相較 UUID 的隨機性，減少 IO 與 buffer 壓力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性雜湊 (Consistent Hashing)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;將 hash 結果映射至環狀結構，分配資料至伺服器&lt;/li&gt;
&lt;li&gt;優勢
&lt;ul&gt;
&lt;li&gt;新增或移除伺服器時，僅影響部分資料重分配&lt;/li&gt;
&lt;li&gt;可針對負載高的伺服器動態調整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寫入放大 (Write Amplification)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;實際寫入磁碟的資料量超出預期&lt;/li&gt;
&lt;li&gt;分很多不同 level，通常是在說 SSD 造成的&lt;/li&gt;
&lt;li&gt;原因
&lt;ul&gt;
&lt;li&gt;SSD 更新時，需將整個 block 搬移至新位置並標記舊 block 為 free
&lt;ul&gt;
&lt;li&gt;想更新的時候，更新的 page 會被標記為不能使用。為了那些不能再被使用的空間搬整個 block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多型關聯 (Polymorphic Association)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;單一欄位根據情況指向不同 table 的 id&lt;/li&gt;
&lt;li&gt;優勢：節省空間與表數&lt;/li&gt;
&lt;li&gt;劣勢：無法直接使用 foreign key，需額外邏輯處理&lt;/li&gt;
&lt;li&gt;替代方案：拆為多欄位或多表，增加明確性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Angular 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/angular-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Fri, 24 May 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/angular-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;基礎概念&#34;&gt;基礎概念&lt;/h2&gt;
&lt;h3 id=&#34;module&#34;&gt;Module&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把相關的 Component、Directive、Pipe、Service 等打包在一起的容器&lt;/li&gt;
&lt;li&gt;可以使用 Lazy Loading 延遲加載模組，提高效能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;component&#34;&gt;Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Angular 應用程式的基本組成單位&lt;/li&gt;
&lt;li&gt;由 HTML、CSS、TypeScript 共同組成&lt;/li&gt;
&lt;li&gt;具有自己的 &lt;code&gt;@Component&lt;/code&gt; 裝飾器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pipe&#34;&gt;Pipe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來轉換資料的工具，可以用於字串格式化、日期格式化等&lt;/li&gt;
&lt;li&gt;可以透過 &lt;code&gt;|&lt;/code&gt; 符號在模板中使用，例如 &lt;code&gt;{{ value | uppercase }}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;內建 Pipes：&lt;code&gt;date&lt;/code&gt;、&lt;code&gt;uppercase&lt;/code&gt;、&lt;code&gt;lowercase&lt;/code&gt;、&lt;code&gt;currency&lt;/code&gt;、&lt;code&gt;percent&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;可以建立自訂 Pipe&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;directive&#34;&gt;Directive&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來修改 DOM 元素的外觀或行為
&lt;ul&gt;
&lt;li&gt;例如 &lt;code&gt;ngIf&lt;/code&gt;、&lt;code&gt;ngFor&lt;/code&gt;、&lt;code&gt;ngStyle&lt;/code&gt;、&lt;code&gt;ngClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分為三種類型：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Structural Directive&lt;/strong&gt;: 修改 DOM 的結構
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*ngIf&lt;/code&gt;, &lt;code&gt;*ngFor&lt;/code&gt;, &lt;code&gt;*ngSwitch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可搭配 &lt;code&gt;ng-container&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;不會產生額外的 DOM 元素，適合在 &lt;code&gt;ngIf&lt;/code&gt; 和 &lt;code&gt;ngFor&lt;/code&gt; 不希望產生額外元素時使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*ngFor&lt;/code&gt; 例子：&lt;code&gt;let item of items; index as i&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attribute Directive&lt;/strong&gt;: 修改 DOM 的屬性，例如 &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngStyle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component Directive&lt;/strong&gt;: 包含 template 的 directive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;負責 API 請求、資料處理等工作&lt;/li&gt;
&lt;li&gt;透過 &lt;strong&gt;Dependency Injection (DI)&lt;/strong&gt; 來提供服務&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Injectable()&lt;/code&gt; 裝飾器用來標記服務
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;providedIn&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;: 服務將在整個應用程式中可用&lt;/li&gt;
&lt;li&gt;也可以在特定 Module 或 Component 的 &lt;code&gt;providers&lt;/code&gt; 中設定要注入的 Service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;router&#34;&gt;Router&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;負責處理 URL 路由&lt;/li&gt;
&lt;li&gt;設定路由時使用 &lt;code&gt;routes&lt;/code&gt; 陣列
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;: 定義路徑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component&lt;/code&gt;: 指定對應的 Component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canActivate&lt;/code&gt;: 設定路由守衛 (Guard)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由守衛 (Guard)
&lt;ul&gt;
&lt;li&gt;透過 &lt;code&gt;ng g guard &amp;lt;guard-name&amp;gt;&lt;/code&gt; 來產生&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CanActivate&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;控制是否允許使用者進入某個路由&lt;/li&gt;
&lt;li&gt;適合用來驗證使用者權限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli-command&#34;&gt;CLI Command&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng new my-app&lt;/code&gt;: 建立新的 Angular 專案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng serve&lt;/code&gt;: 啟動開發伺服器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng build&lt;/code&gt;: 打包專案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng generate&lt;/code&gt; (縮寫 &lt;code&gt;ng g&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng g module my-module&lt;/code&gt;: 建立新的 Module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g component my-component&lt;/code&gt;: 建立新的 Component
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--module=app&lt;/code&gt;: 指定 Component 所屬的 Module&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g service my-service&lt;/code&gt;: 建立新的 Service&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g pipe my-pipe&lt;/code&gt;: 建立新的 Pipe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng g directive my-directive&lt;/code&gt;: 建立新的 Directive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;module-1&#34;&gt;Module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@NgModule()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;declarations&lt;/code&gt;: 定義同一 Module 中的 Component、Directive、Pipe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imports&lt;/code&gt;: 匯入其他 Module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;providers&lt;/code&gt;: 定義 Service&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bootstrap&lt;/code&gt;: 定義應用程式啟動時的根 Component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exports&lt;/code&gt;: 定義要匯出的 Component、Directive、Pipe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;component-1&#34;&gt;Component&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包含的主要部分：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;: HTML 模板&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TypeScript Class&lt;/strong&gt;: 包含 Component 的邏輯與屬性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Selector&lt;/strong&gt;: 定義 Component 在 HTML 中的名稱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS Style&lt;/strong&gt;: 樣式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.spec.ts&lt;/strong&gt;: 測試檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standalone Component&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Angular 新版預設採用 Standalone Component 模式&lt;/li&gt;
&lt;li&gt;Component 不再需要透過 &lt;code&gt;NgModule&lt;/code&gt; 管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lifecycle-hooks&#34;&gt;Lifecycle Hooks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ngOnChanges&lt;/code&gt;: 當輸入屬性變更時調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngOnInit&lt;/code&gt;: 組件初始化時調用（僅執行一次）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngDoCheck&lt;/code&gt;: 手動偵測變更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterContentInit&lt;/code&gt;: &lt;code&gt;ng-content&lt;/code&gt; 投影完成後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterContentChecked&lt;/code&gt;: &lt;code&gt;ng-content&lt;/code&gt; 內容變更後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterViewInit&lt;/code&gt;: &lt;code&gt;ViewChild&lt;/code&gt;、&lt;code&gt;ViewChildren&lt;/code&gt; 初始化後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngAfterViewChecked&lt;/code&gt;: 每次檢查變更後調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ngOnDestroy&lt;/code&gt;: 組件銷毀前調用，可用於取消訂閱與清除資源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sharing-data-資料傳遞&#34;&gt;Sharing Data (資料傳遞)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Input&lt;/code&gt;: 父元件傳遞資料給子元件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Output&lt;/code&gt;: 子元件透過 &lt;code&gt;EventEmitter&lt;/code&gt; 傳遞資料給父元件&lt;/li&gt;
&lt;li&gt;其他方式：
&lt;ul&gt;
&lt;li&gt;透過 &lt;strong&gt;Service&lt;/strong&gt; 和 &lt;strong&gt;RxJS&lt;/strong&gt; Subject/BehaviorSubject 來進行資料共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;data-binding-資料綁定&#34;&gt;Data Binding (資料綁定)&lt;/h2&gt;
&lt;h3 id=&#34;property-binding-屬性綁定&#34;&gt;Property Binding (屬性綁定)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來設定 HTML 元素的屬性&lt;/li&gt;
&lt;li&gt;使用中括號 &lt;code&gt;[]&lt;/code&gt; 包住屬性名稱&lt;/li&gt;
&lt;li&gt;範例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;imageUrl&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;event-binding-事件綁定&#34;&gt;Event Binding (事件綁定)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來設定 HTML 元素的事件&lt;/li&gt;
&lt;li&gt;使用小括號 &lt;code&gt;()&lt;/code&gt; 包住事件名稱&lt;/li&gt;
&lt;li&gt;範例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$event&lt;/code&gt;: 取得事件物件
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;onInput&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;($&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;two-way-binding-雙向綁定&#34;&gt;Two-way Binding (雙向綁定)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;屬性與事件綁定結合在一起&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;[(ngModel)]&lt;/code&gt; 綁定表單輸入&lt;/li&gt;
&lt;li&gt;需要匯入 &lt;code&gt;FormsModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;範例：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ngModel&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;)]=&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Spring Boot 筆記</title>
        <link>https://roykesydon.github.io/Blog/p/spring-boot-%E7%AD%86%E8%A8%98/</link>
        <pubDate>Mon, 06 May 2024 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/spring-boot-%E7%AD%86%E8%A8%98/</guid>
        <description>&lt;h2 id=&#34;maven&#34;&gt;Maven&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;專案管理工具&lt;/li&gt;
&lt;li&gt;會先檢查 maven local repository 有沒有需要的 dependency，沒有的話就會去 maven central repository (remote repository) 下載&lt;/li&gt;
&lt;li&gt;pom.xml
&lt;ul&gt;
&lt;li&gt;project cooridnate
&lt;ul&gt;
&lt;li&gt;groupId&lt;/li&gt;
&lt;li&gt;artifactId&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugin
&lt;ul&gt;
&lt;li&gt;和 dependency 的差別是，是用來執行某種 task 的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mvnw
&lt;ul&gt;
&lt;li&gt;maven wrapper&lt;/li&gt;
&lt;li&gt;在沒有安裝 maven 的環境下，會下載正確的 maven 版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring&#34;&gt;Spring&lt;/h2&gt;
&lt;h3 id=&#34;ioc&#34;&gt;IoC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Invocation of Constructor
&lt;ul&gt;
&lt;li&gt;把物件交給 Spring 管理&lt;/li&gt;
&lt;li&gt;loose coupling&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bean
&lt;ul&gt;
&lt;li&gt;給 Spring 管理的物件&lt;/li&gt;
&lt;li&gt;創建方法
&lt;ul&gt;
&lt;li&gt;@Component
&lt;ul&gt;
&lt;li&gt;創建出的 Bean 名字是 class 的開頭轉小寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注入方法
&lt;ul&gt;
&lt;li&gt;@Autowired
&lt;ul&gt;
&lt;li&gt;種類
&lt;ul&gt;
&lt;li&gt;field injection
&lt;ul&gt;
&lt;li&gt;不太推薦，不利於 unit test&lt;/li&gt;
&lt;li&gt;spring boot 會先建立所有 component，在逐一注入，使元件可能短暫處於初始化不完整狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;constructor injection
&lt;ul&gt;
&lt;li&gt;最推薦&lt;/li&gt;
&lt;li&gt;建立 bean 時就注入&lt;/li&gt;
&lt;li&gt;確保 component 被使用時是處於完整的狀態&lt;/li&gt;
&lt;li&gt;有利於 unit test，因為可以把設計好的 mock bean 從 constructor 傳入&lt;/li&gt;
&lt;li&gt;spring 建議使用 constructor injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;setter injection
&lt;ul&gt;
&lt;li&gt;用 setter 來注入&lt;/li&gt;
&lt;li&gt;創好 component 後，再注入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制
&lt;ol&gt;
&lt;li&gt;該 Class 也得是 Bean&lt;/li&gt;
&lt;li&gt;會根據類型注入 bean
&lt;ul&gt;
&lt;li&gt;如果同時有多個同類型的 bean，會報錯，可以用 @Qualifier 指定要注入的 bean 名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;@Qualifier
&lt;ul&gt;
&lt;li&gt;指定要注入的 bean 名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Primary
&lt;ul&gt;
&lt;li&gt;如果有多個同類型的 bean，會優先注入這個 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cycle life
&lt;ul&gt;
&lt;li&gt;@PostConstruct
&lt;ul&gt;
&lt;li&gt;創建 bean 後，就會執行這個方法&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;必須是 public void&lt;/li&gt;
&lt;li&gt;不能有參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@PreDestroy
&lt;ul&gt;
&lt;li&gt;bean 被銷毀前執行&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;必須是 public void&lt;/li&gt;
&lt;li&gt;不能有參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lazy Initialization
&lt;ul&gt;
&lt;li&gt;本來 beans 不管有沒有用都會被創建&lt;/li&gt;
&lt;li&gt;@Lazy
&lt;ul&gt;
&lt;li&gt;只有在要使用時才會初始化&lt;/li&gt;
&lt;li&gt;缺點是用 @RestController 的話，第一次 request 才會創建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在 application.properties 裡設定 spring.main.lazy-initialization=true，讓所有 beans 都變成 lazy initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aop&#34;&gt;AOP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Aspect Oriented Programming&lt;/li&gt;
&lt;li&gt;透過 Aspect 統一處理不同方法的共同邏輯&lt;/li&gt;
&lt;li&gt;要導入 aop 的 starter&lt;/li&gt;
&lt;li&gt;只有 Bean 才能設置 @Aspect&lt;/li&gt;
&lt;li&gt;Annotation
&lt;ul&gt;
&lt;li&gt;@Aspect
&lt;ul&gt;
&lt;li&gt;這個 class 是一個切面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Before
&lt;ul&gt;
&lt;li&gt;加上切入點，就可以在切入點 (Pointcut) 的方法執行前執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@After
&lt;ul&gt;
&lt;li&gt;在方法之後執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Around
&lt;ul&gt;
&lt;li&gt;在方法之前和之後都執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的功能都已經被封裝好了，開發較少用到 AOP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;run-app&#34;&gt;Run app&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;java -jar&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mvn clean package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java -jar target/xxx.jar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;mvn spring-boot:run&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mvn spring-boot:run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特性&#34;&gt;特性&lt;/h2&gt;
&lt;h3 id=&#34;starter&#34;&gt;Starter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using.build-systems.starters&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Boot Starters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方的 starter 命名是 &lt;code&gt;spring-boot-starter-*&lt;/code&gt;
第三方的 starter 命名是 &lt;code&gt;*-spring-boot-starter&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;外部化配置&#34;&gt;外部化配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application.properties&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;重新啟動 jar 時會自動載入，不用改配置要重新 build jar&lt;/li&gt;
&lt;li&gt;集中管理&lt;/li&gt;
&lt;li&gt;@Value
&lt;ul&gt;
&lt;li&gt;可以注入到變數中&lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;:&lt;/code&gt; 來設定預設值&lt;/li&gt;
&lt;li&gt;限制
&lt;ul&gt;
&lt;li&gt;只能在 Bean 和 Configuration 中使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;YAML
&lt;ul&gt;
&lt;li&gt;application.properties 寫多後，沒有層級辨識度&lt;/li&gt;
&lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;profiles
&lt;ul&gt;
&lt;li&gt;可以根據不同的環境來設定不同的配置 (dev, test, prod)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application-{profile}.properties&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application-{profile}.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring.profiles.active&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;指定啟用的 profile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jar
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Dspring.profiles.active=dev&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定配置文件
&lt;ul&gt;
&lt;li&gt;cli
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--spring.config.location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Config 資料夾
&lt;ul&gt;
&lt;li&gt;可以在 jar 目錄下建立 config 資料夾，放配置文件，不用輸入額外的 args&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大致分類
&lt;ul&gt;
&lt;li&gt;core
&lt;ul&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;web&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;actuator&lt;/li&gt;
&lt;li&gt;integration&lt;/li&gt;
&lt;li&gt;devtools&lt;/li&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dependency-management&#34;&gt;Dependency Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;parent 寫了版本號，故 dependency 可以不用寫版本號&lt;/li&gt;
&lt;li&gt;真的要指定的話，可以利用 maven 的就近原則&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;auto-configuration&#34;&gt;Auto Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Component Scan
&lt;ul&gt;
&lt;li&gt;Spring Boot 會掃描主程式所在的 package 以及子 package&lt;/li&gt;
&lt;li&gt;也可以在主程式上加以下註解來指定掃描的 package
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@SpringBootApplication(scanBasePackages = &amp;quot;com.example&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有 starter 都有 &lt;code&gt;spring-boot-starter&lt;/code&gt;，&lt;code&gt;spring-boot-starter&lt;/code&gt; 又有 &lt;code&gt;spring-boot-autoconfigure&lt;/code&gt;，這個就是自動配置的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spring boot 默認掃描不到 spring-boot-autoconfigure 的所有配置類 (因為預設只掃描 Main Application Class 的 package)，但是 @SpringBootApplication 的 @EnableAutoConfiguration 會預設掃描 spring-boot-autoconfigure 的所有配置類
&lt;ul&gt;
&lt;li&gt;它們再依據 conditional annotation 來決定是否要啟用這個配置類&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-annotations&#34;&gt;Common Annotations&lt;/h2&gt;
&lt;p&gt;Spring Boot 放棄了 XML 配置，改用 Annotation 配置&lt;/p&gt;
&lt;h3 id=&#34;component-registration&#34;&gt;Component registration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Configuration, @SpringBootConfiguration
&lt;ul&gt;
&lt;li&gt;@Bean
&lt;ul&gt;
&lt;li&gt;有時候可能會想用第三方套件，此時可能不能修改套件的 code，這時候就可以用 @Configuration 來註冊 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Controller, @Service, @Repository, @Component
&lt;ul&gt;
&lt;li&gt;三層式架構
&lt;ul&gt;
&lt;li&gt;@Controller
&lt;ul&gt;
&lt;li&gt;用來處理請求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Service
&lt;ul&gt;
&lt;li&gt;用來處理業務邏輯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Repository
&lt;ul&gt;
&lt;li&gt;用來處理資料庫操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@SpringBootApplication
&lt;ul&gt;
&lt;li&gt;由以下組成
&lt;ul&gt;
&lt;li&gt;@SpringBootConfiguration&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration&lt;/li&gt;
&lt;li&gt;@ComponentScan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web
&lt;ul&gt;
&lt;li&gt;@RestController
&lt;ul&gt;
&lt;li&gt;@Controller + @ResponseBody&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequestMapping
&lt;ul&gt;
&lt;li&gt;設置 route&lt;/li&gt;
&lt;li&gt;Method
&lt;ul&gt;
&lt;li&gt;@GetMapping&lt;/li&gt;
&lt;li&gt;@PostMapping&lt;/li&gt;
&lt;li&gt;@PutMapping&lt;/li&gt;
&lt;li&gt;@DeleteMapping&lt;/li&gt;
&lt;li&gt;@PatchMapping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取得參數
&lt;ul&gt;
&lt;li&gt;@RequestParam
&lt;ul&gt;
&lt;li&gt;取得 url 中的參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequestBody
&lt;ul&gt;
&lt;li&gt;取得 request body&lt;/li&gt;
&lt;li&gt;根據欄位名字調用對應的 setter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequestHeader
&lt;ul&gt;
&lt;li&gt;取得 header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@PathVariable
&lt;ul&gt;
&lt;li&gt;取得 route 中的參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Scope
&lt;ul&gt;
&lt;li&gt;mode
&lt;ul&gt;
&lt;li&gt;singleton
&lt;ul&gt;
&lt;li&gt;預設，共用一個 instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;prototype
&lt;ul&gt;
&lt;li&gt;每次注入都創建新的 instance&lt;/li&gt;
&lt;li&gt;可以用 proxy.mode = ScopedProxyMode.TARGET_CLASS，會變成每次調用 method 都創建新的 instance&lt;/li&gt;
&lt;li&gt;prototype 的元件生出後，spring 不會再管理，要自己管理生命週期，相當於 new 出物件的替代作法&lt;/li&gt;
&lt;li&gt;預設是 lazy initialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;request
&lt;ul&gt;
&lt;li&gt;每個 request 都有一個獨立的 instance&lt;/li&gt;
&lt;li&gt;request 指的是 HTTP request，從進入 controller 到離開 controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;session
&lt;ul&gt;
&lt;li&gt;每個 session 都有一個獨立的 instance&lt;/li&gt;
&lt;li&gt;session 指的是 HTTP session，從進入 controller 到離開 controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conditional-annotations&#34;&gt;Conditional Annotations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;條件成立則觸發指定行為&lt;/li&gt;
&lt;li&gt;ConditionalOn&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;ConditionalOnClass
&lt;ul&gt;
&lt;li&gt;如果 classpath 有指定的 class 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConditionalOnMissingClass
&lt;ul&gt;
&lt;li&gt;如果 classpath 沒有指定的 class 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConditionalOnBean
&lt;ul&gt;
&lt;li&gt;如果容器中有指定的 bean 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConditionalOnMissingBean
&lt;ul&gt;
&lt;li&gt;如果容器中沒有指定的 bean 才會觸發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scenario
&lt;ul&gt;
&lt;li&gt;如果有某個 dependency，則創建某個 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;property-binding&#34;&gt;Property Binding&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把任意 Bean 的 property 與配置文件 (application.properties) 中的 property 綁定&lt;/li&gt;
&lt;li&gt;annotations
&lt;ul&gt;
&lt;li&gt;@ConfigurationProperties
&lt;ul&gt;
&lt;li&gt;prefix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@EnableConfigurationProperties
&lt;ul&gt;
&lt;li&gt;如果 class 只有 @ConfigurationProperties，沒有 @Component，需要加這個 annotation&lt;/li&gt;
&lt;li&gt;用在第三方 package 上，因為默認掃不到第三方的 @component&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-json-data-binding&#34;&gt;Java JSON Data Binding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 Java POJO 和 JSON 之間轉換&lt;/li&gt;
&lt;li&gt;Spring 用 Jackson 來做轉換
&lt;ul&gt;
&lt;li&gt;Jackson 會 call getter, setter 來轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;alias
&lt;ul&gt;
&lt;li&gt;mapping&lt;/li&gt;
&lt;li&gt;marshalling&lt;/li&gt;
&lt;li&gt;serialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;輔助工具&#34;&gt;輔助工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spring boot devtools
&lt;ul&gt;
&lt;li&gt;Hot reload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Boot Actuator
&lt;ul&gt;
&lt;li&gt;公開用來 monitor 的 endpoint&lt;/li&gt;
&lt;li&gt;endpoints
&lt;ul&gt;
&lt;li&gt;都有固定前綴 /actuator&lt;/li&gt;
&lt;li&gt;/health
&lt;ul&gt;
&lt;li&gt;查看應用程式的 status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/info
&lt;ul&gt;
&lt;li&gt;查看應用程式的 info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/beans
&lt;ul&gt;
&lt;li&gt;查看所有 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Logging 選擇&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logging API
&lt;ul&gt;
&lt;li&gt;JCL&lt;/li&gt;
&lt;li&gt;SLF4J (Simple Logging Facade for Java)&lt;/li&gt;
&lt;li&gt;jboss-logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logging implementation
&lt;ul&gt;
&lt;li&gt;Logback&lt;/li&gt;
&lt;li&gt;Log4j2&lt;/li&gt;
&lt;li&gt;JUL (java.util.logging)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Boot 預設使用 Logback 和 SLF4J&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-starter 引用了 spring-boot-starter-logging&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;log-format&#34;&gt;Log Format&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Default example
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2024-05-06T19:21:40.751+08:00  INFO 22932 --- [demo] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path &amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;時間, 日誌等級, pid, 分割符, thread, logger, message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;log-level&#34;&gt;Log Level&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Type (由低到高)
&lt;ul&gt;
&lt;li&gt;ALL&lt;/li&gt;
&lt;li&gt;TRACE
&lt;ul&gt;
&lt;li&gt;一般不用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DEBUG&lt;/li&gt;
&lt;li&gt;INFO&lt;/li&gt;
&lt;li&gt;WARN&lt;/li&gt;
&lt;li&gt;ERROR&lt;/li&gt;
&lt;li&gt;FATAL&lt;/li&gt;
&lt;li&gt;OFF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會 print 出比設定的等級高的 log&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;log-configuration&#34;&gt;Log Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;logging.level.*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定不同 package 的 log 等級&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;logging.level.com.example=DEBUG
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logging.group.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把多個 package 放在一組，可以統一設定&lt;/li&gt;
&lt;li&gt;預設有 web, sql 組&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logging.file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.name
&lt;ul&gt;
&lt;li&gt;檔名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;歸檔 and 切割&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;歸檔
&lt;ul&gt;
&lt;li&gt;每天單獨存&lt;/li&gt;
&lt;li&gt;.logback.rolllingpolicy.file-name-pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切割
&lt;ul&gt;
&lt;li&gt;超過指定大小就切割&lt;/li&gt;
&lt;li&gt;.logback.rolllingpolicy.max-file-size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;filter&#34;&gt;Filter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;實做 javax.servlet.Filter，就能註冊為 spring 的 filter&lt;/li&gt;
&lt;li&gt;OncePerRequestFilter
&lt;ul&gt;
&lt;li&gt;保證一次 request 只會執行一次&lt;/li&gt;
&lt;li&gt;doFilterInternal
&lt;ul&gt;
&lt;li&gt;chain.doFilter(request, response)
&lt;ul&gt;
&lt;li&gt;這行之後代表後面的 filter 都執行完了&lt;/li&gt;
&lt;li&gt;如果只有一個 filter，就代表 controller 執行完了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shouldNotFilter
&lt;ul&gt;
&lt;li&gt;可以設定不要執行的 url pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;註冊-filter&#34;&gt;註冊 Filter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定 @Configuration&lt;/li&gt;
&lt;li&gt;加到 Bean
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; setUrlPatterns
&lt;ul&gt;
&lt;li&gt;只有符合 url pattern 的 request 才會經過這個 filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; setOrder
&lt;ul&gt;
&lt;li&gt;決定 filter 的順序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 filter 要取得 request 和 response 的內容，可以用 ContentCachingRequestWrapper 和 ContentCachingResponseWrapper 重新包裝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為原本的作法是用 stream 讀取資料，只能讀一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@WebFilter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;屬於 Java servlet 而非 Spring
&lt;ul&gt;
&lt;li&gt;要在 application 補上 @ServletComponentScan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以直接註冊 filter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-security&#34;&gt;Spring Security&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;名詞
&lt;ul&gt;
&lt;li&gt;Authentication
&lt;ul&gt;
&lt;li&gt;認證
&lt;ul&gt;
&lt;li&gt;檢查是不是系統的使用者，以及是哪個使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authorization
&lt;ul&gt;
&lt;li&gt;授權
&lt;ul&gt;
&lt;li&gt;檢查使用者有沒有權限做某件事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;filter chain&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;UsernamePasswordAuthenticationFilter
&lt;ul&gt;
&lt;li&gt;檢查使用者名稱和密碼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ExceptionTranslationFilter
&lt;ul&gt;
&lt;li&gt;處理例外&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FilterSecurityInterceptor
&lt;ul&gt;
&lt;li&gt;檢查授權&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;authorizeHttpRequests
&lt;ul&gt;
&lt;li&gt;設定哪些 request 需要什麼權限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example: JWT 驗證流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先透過 filter chain 經過 JWT filter&lt;/li&gt;
&lt;li&gt;透過 UserDetailsService 取得使用者資訊&lt;/li&gt;
&lt;li&gt;驗證使用者資訊&lt;/li&gt;
&lt;li&gt;更新 SecurityContextHolder
&lt;ul&gt;
&lt;li&gt;用來判斷使用者是否已經通過 authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@EnableWebSecurity
&lt;ul&gt;
&lt;li&gt;啟用 web security&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecurityFilterChain&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;securityFilterChain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;authorizeHttpRequests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AuthorizeHttpRequestsConfigurer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;AuthorizedUrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;anyRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;authenticated&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;httpBasic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Customizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withDefaults&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SecurityFilterChain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;把 Spring Boot 預設實作的 fitler chain 的 @Order 拿掉，這是決定誰的優先序高&lt;/li&gt;
&lt;li&gt;也把 formLogin 拿掉，就不會有登入頁面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;userdetails&#34;&gt;UserDetails&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;實現 UserDetailsService 的 Bean 可以被用來取得 UserDetails&lt;/li&gt;
&lt;li&gt;implements UserDetails
&lt;ul&gt;
&lt;li&gt;getAuthorities&lt;/li&gt;
&lt;li&gt;getUsername&lt;/li&gt;
&lt;li&gt;getPassword&lt;/li&gt;
&lt;li&gt;isAccountNonExpired&lt;/li&gt;
&lt;li&gt;isAccountNonLocked&lt;/li&gt;
&lt;li&gt;isCredentialsNonExpired&lt;/li&gt;
&lt;li&gt;isEnabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;securitycontextholder&#34;&gt;SecurityContextHolder&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來存放 authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;commandlinerunner&#34;&gt;CommandLineRunner&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用來在 Spring Boot 啟動後執行一些任務&lt;/li&gt;
&lt;li&gt;會在所有 bean 創建完後執行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jpa&#34;&gt;JPA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jakarta Persistence API&lt;/li&gt;
&lt;li&gt;以前叫 Java Persistence API&lt;/li&gt;
&lt;li&gt;只是一個 specifcation，提供一組 interface，需要實作
&lt;ul&gt;
&lt;li&gt;包含了 Entity, EntityManager, Query, Transaction..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DataSource
&lt;ul&gt;
&lt;li&gt;用來連接資料庫&lt;/li&gt;
&lt;li&gt;定義了連接資料庫的 info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EntityManager
&lt;ul&gt;
&lt;li&gt;用來創建 query 的主要 component&lt;/li&gt;
&lt;li&gt;需要 DataSource&lt;/li&gt;
&lt;li&gt;EntityManager vs JpaRepositroy
&lt;ul&gt;
&lt;li&gt;EntityManager
&lt;ul&gt;
&lt;li&gt;low-level control and flexibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JpaRepository
&lt;ul&gt;
&lt;li&gt;high-level abstraction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JPQL
&lt;ul&gt;
&lt;li&gt;基於 Entity name 和 fields 的 query language&lt;/li&gt;
&lt;li&gt;不是基於資料庫的 column 或 table name，是基於 Entity 的名字，要注意區別&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data access object (DAO)
&lt;ul&gt;
&lt;li&gt;common pattern&lt;/li&gt;
&lt;li&gt;需要 JPA Entity Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Config
&lt;ul&gt;
&lt;li&gt;spring.jpa.hibernate.ddl-auto
&lt;ul&gt;
&lt;li&gt;create
&lt;ul&gt;
&lt;li&gt;每次都會重新創建新的 table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;update
&lt;ul&gt;
&lt;li&gt;只會更新 table，不會刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;create-drop
&lt;ul&gt;
&lt;li&gt;創建 table，然後刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;validate
&lt;ul&gt;
&lt;li&gt;只會檢查 table 是否存在，不會創建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Annotation
&lt;ul&gt;
&lt;li&gt;@Entity, @Table
&lt;ul&gt;
&lt;li&gt;也要記得寫 getter, setter&lt;/li&gt;
&lt;li&gt;@Entity 需要 public 或 protected 的無參數建構子&lt;/li&gt;
&lt;li&gt;@Table
&lt;ul&gt;
&lt;li&gt;可選，可以設定 table 名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Transient
&lt;ul&gt;
&lt;li&gt;不會被序列化，不會被存到資料庫&lt;/li&gt;
&lt;li&gt;可用在可以單獨計算的欄位，比如用資料庫的生日可以算出年齡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Transactional
&lt;ul&gt;
&lt;li&gt;用在 method 上，代表這個 method 是一個 transaction&lt;/li&gt;
&lt;li&gt;propagation
&lt;ul&gt;
&lt;li&gt;用在 method 上，被別的 transaction 調用應該怎麼處理，講 transaction 的傳播&lt;/li&gt;
&lt;li&gt;REQUIRED
&lt;ul&gt;
&lt;li&gt;如果有外層 transaction 就用，沒有就創建一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;REQUIRES_NEW
&lt;ul&gt;
&lt;li&gt;無論有沒有外層 transaction，都創建一個新的，不受影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NESTED
&lt;ul&gt;
&lt;li&gt;嵌套 transaction，如果外層 transaction rollback，內層也會 rollback&lt;/li&gt;
&lt;li&gt;如果自己 rollback，外層不受影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Column
&lt;ul&gt;
&lt;li&gt;可以設定欄位名稱&lt;/li&gt;
&lt;li&gt;這是可選的，沒有的話就是用變數名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Id
&lt;ul&gt;
&lt;li&gt;Primary key&lt;/li&gt;
&lt;li&gt;@GeneratedValue
&lt;ul&gt;
&lt;li&gt;strategy
&lt;ul&gt;
&lt;li&gt;AUTO
&lt;ul&gt;
&lt;li&gt;根據資料庫自動選擇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDENTITY
&lt;ul&gt;
&lt;li&gt;用資料庫的 identity column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SEQUENCE
&lt;ul&gt;
&lt;li&gt;用資料庫的 sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Table
&lt;ul&gt;
&lt;li&gt;用 underlying table 來確保唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UUID
&lt;ul&gt;
&lt;li&gt;用 UUID 來確保唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@OneToMany, @ManyToOne
&lt;ul&gt;
&lt;li&gt;用來設定關聯&lt;/li&gt;
&lt;li&gt;cascade
&lt;ul&gt;
&lt;li&gt;設定當 parent 被刪除時，child 要怎麼處理
&lt;ul&gt;
&lt;li&gt;CascadeType.ALL
&lt;ul&gt;
&lt;li&gt;parent 被刪除時，child 也會被刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CascadeType.PERSIST
&lt;ul&gt;
&lt;li&gt;parent 被刪除時，child 不會被刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data JPA
&lt;ul&gt;
&lt;li&gt;用特定語法，只需要定好 interface，不用 implement&lt;/li&gt;
&lt;li&gt;extends JpaRepository&amp;lt;Entity, ID&amp;gt;
&lt;ul&gt;
&lt;li&gt;第一個參數是 entity&lt;/li&gt;
&lt;li&gt;第二個參數是 primary key 的型態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;示範
&lt;ul&gt;
&lt;li&gt;findByXxx
&lt;ul&gt;
&lt;li&gt;用 XXX 的欄位來查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;findByXXXLike
&lt;ul&gt;
&lt;li&gt;用 XXX 的欄位來模糊查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jparepository&#34;&gt;JpaRepository&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Repository
&lt;ul&gt;
&lt;li&gt;用來標記 DAO&lt;/li&gt;
&lt;li&gt;extends JpaRepository&amp;lt;Entity, ID&amp;gt;
&lt;ul&gt;
&lt;li&gt;第一個參數是 entity&lt;/li&gt;
&lt;li&gt;第二個參數是 entity 的 id 的型態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以自定義方法
&lt;ul&gt;
&lt;li&gt;遵循命名規則，他會自己轉 SQL&lt;/li&gt;
&lt;li&gt;也可以用 @Query 來自定義 SQL
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;?0&amp;gt;&lt;/code&gt; 代表第一個參數，以此類推&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hibernate&#34;&gt;Hibernate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來儲存 java object 到資料庫的框架&lt;/li&gt;
&lt;li&gt;ORM
&lt;ul&gt;
&lt;li&gt;Object Relational Mapping&lt;/li&gt;
&lt;li&gt;用物件來操作資料庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一種 JPA 的實作&lt;/li&gt;
&lt;li&gt;背後用 JDBC 來操作資料庫&lt;/li&gt;
&lt;li&gt;Spring Boot 預設用 Hibernate 來實作 JPA&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;validation&#34;&gt;Validation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;field validation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@NotEmpty&lt;/li&gt;
&lt;li&gt;@Min&lt;/li&gt;
&lt;li&gt;@Max&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Valid&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用在 controller 上，才會自動檢查參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exception&#34;&gt;Exception&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RuntimeException
&lt;ul&gt;
&lt;li&gt;繼承這個，可以設置 status, message, timestamp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@ExceptionHandler
&lt;ul&gt;
&lt;li&gt;放在 Controller 中的 exception handler method 上，可以處理底下 method 丟出的 exception&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@ControllerAdvice
&lt;ul&gt;
&lt;li&gt;類似 interceptor/filter&lt;/li&gt;
&lt;li&gt;可以 pre-process request, post-process response&lt;/li&gt;
&lt;li&gt;可以用在 global exception handler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;h3 id=&#34;integration-test&#34;&gt;Integration Test&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 test class 前面的 annotation
&lt;ul&gt;
&lt;li&gt;@RunWith(SpringRunner.class)&lt;/li&gt;
&lt;li&gt;@SpringBootTest&lt;/li&gt;
&lt;li&gt;@AutoConfigureMockMvc
&lt;ul&gt;
&lt;li&gt;測試開始時會在容器中創建 MockMvc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 test method 前面加的 annotation
&lt;ul&gt;
&lt;li&gt;@Test&lt;/li&gt;
&lt;li&gt;@Before, @After
&lt;ul&gt;
&lt;li&gt;在每個測試前後執行，可以用來清空資料庫和設置 header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mockmvc&#34;&gt;MockMvc&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用來模擬 HTTP request&lt;/li&gt;
&lt;li&gt;example
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MockMvc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mockMvc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;perform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isOk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;andExpect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;h3 id=&#34;lombok&#34;&gt;Lombok&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Getter, @Setter
&lt;ul&gt;
&lt;li&gt;生成 getter, setter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@ToString
&lt;ul&gt;
&lt;li&gt;印出所有變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@EqualsAndHashCode
&lt;ul&gt;
&lt;li&gt;生成 equals, hashCode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Args
&lt;ul&gt;
&lt;li&gt;@NoArgsConstructor
&lt;ul&gt;
&lt;li&gt;生成無參數建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@AllArgsConstructor
&lt;ul&gt;
&lt;li&gt;生成所有參數建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@RequiredArgsConstructor
&lt;ul&gt;
&lt;li&gt;只幫 final 變數生成建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Data
&lt;ul&gt;
&lt;li&gt;同時用 @Getter, @Setter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Value
&lt;ul&gt;
&lt;li&gt;把所有變數都設成 final&lt;/li&gt;
&lt;li&gt;同時用 @Getter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor&lt;/li&gt;
&lt;li&gt;和 Spring boot 的 @Value 撞名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Builder
&lt;ul&gt;
&lt;li&gt;生成 builder pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Slf4j
&lt;ul&gt;
&lt;li&gt;生成 log 變數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jackson&#34;&gt;Jackson&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ObjectMapper
&lt;ul&gt;
&lt;li&gt;用來轉換物件和 JSON&lt;/li&gt;
&lt;li&gt;readValue
&lt;ul&gt;
&lt;li&gt;把 JSON 轉成物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 getter, setter 來判斷欄位&lt;/li&gt;
&lt;li&gt;Annotation
&lt;ul&gt;
&lt;li&gt;@JsonIgnore
&lt;ul&gt;
&lt;li&gt;不轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonProperty
&lt;ul&gt;
&lt;li&gt;指定欄位名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonUnwrapped
&lt;ul&gt;
&lt;li&gt;把物件的欄位展開，從巢狀變成平面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonInclude
&lt;ul&gt;
&lt;li&gt;設定要不要轉換 null&lt;/li&gt;
&lt;li&gt;如果設定為 Include.NON_NULL，給 null 的話，就不會轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@JsonFormat
&lt;ul&gt;
&lt;li&gt;設定日期格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GraphQL 簡介</title>
        <link>https://roykesydon.github.io/Blog/p/graphql-%E7%B0%A1%E4%BB%8B/</link>
        <pubDate>Tue, 22 Aug 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/graphql-%E7%B0%A1%E4%BB%8B/</guid>
        <description>&lt;h2 id=&#34;簡介&#34;&gt;簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Meta 在 2015 年公開的 API Query Language&lt;/li&gt;
&lt;li&gt;相較於傳統的 REST API，具備更靈活的查詢能力&lt;/li&gt;
&lt;li&gt;可讓客戶端精確地獲取所需的資料，避免多餘的請求和回應&lt;/li&gt;
&lt;li&gt;被多家公司採用，如：
&lt;ul&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;graphql-與-rest-api-的主要差異&#34;&gt;GraphQL 與 REST API 的主要差異&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single Endpoint&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST API 針對不同資源 (resource) 需要不同的 endpoint，而 GraphQL 透過單一 endpoint 存取所有資源&lt;/li&gt;
&lt;li&gt;但 GraphQL 由於僅有一個 URL，無法直接利用 HTTP caching 進行快取，而是依賴 client-side caching 或 persistent queries 來優化效能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解決 Under-fetching 和 Over-fetching 問題&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Under-fetching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個 API call 無法取得所有需要的資料，導致需要多次 API call&lt;/li&gt;
&lt;li&gt;例如，使用 RESTful API 取得一篇文章及其作者資訊，可能需要先請求文章資料，再請求作者資料&lt;/li&gt;
&lt;li&gt;GraphQL 透過 nested query 可以在單次 API call 內獲取文章及作者資訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Over-fetching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 回應的資料超過實際所需，造成資源浪費&lt;/li&gt;
&lt;li&gt;GraphQL 允許客戶端指定僅需要的欄位，避免傳輸過多無用資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;graphql-的運作方式&#34;&gt;GraphQL 的運作方式&lt;/h2&gt;
&lt;p&gt;GraphQL 需要特別架設 GraphQL server，可考慮使用 Apollo Server、Express + graphql 套件等方式實作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需定義 schema 來描述不同的資料類型 (Data type) 及其關聯 (relationship)&lt;/li&gt;
&lt;li&gt;透過 resolver 來處理查詢和資料變更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;query-查詢&#34;&gt;Query (查詢)&lt;/h3&gt;
&lt;p&gt;GraphQL 的查詢語法允許客戶端精確地獲取所需的資料，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;postQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;### Mutation (變更資料)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;GraphQL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;透過&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Mutation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;來處理新增、修改、刪除資料，例如新增文章的請求：&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;graphql&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;addPost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;AddPostInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;addPost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Redis</title>
        <link>https://roykesydon.github.io/Blog/p/redis/</link>
        <pubDate>Mon, 05 Jun 2023 00:00:17 +0800</pubDate>
        
        <guid>https://roykesydon.github.io/Blog/p/redis/</guid>
        <description>&lt;h2 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Cache
&lt;ul&gt;
&lt;li&gt;把常用的資料回傳，省略長時間的 IO 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shared Session
&lt;ul&gt;
&lt;li&gt;在 stateless server 間共享 session&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed lock
&lt;ul&gt;
&lt;li&gt;用在程式間想共用某種資源的時候&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;setnx&lt;/code&gt; (set if not exists)
&lt;ul&gt;
&lt;li&gt;atomic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rate Limiter
&lt;ul&gt;
&lt;li&gt;用 increment 和 expiration 實現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;快取常見策略&#34;&gt;快取常見策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cache aside
&lt;ul&gt;
&lt;li&gt;先問 cache，沒有的話再問 db，並把 db 回傳的資料放到 cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read through
&lt;ul&gt;
&lt;li&gt;client 只能存取到 cache，如果沒資料，cache 會去 db 拿資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write through
&lt;ul&gt;
&lt;li&gt;client 寫資料時，cache 會留一份資料，並把資料寫到 db&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write behind
&lt;ul&gt;
&lt;li&gt;和 write through 很像，但是不會立即寫到 db，會等到有更多的資料時，才一次寫到 db&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feature&#34;&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;In-memory&lt;/li&gt;
&lt;li&gt;Key-Value&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basic-command&#34;&gt;Basic Command&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis-server&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;default port: 6379&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;access-data&#34;&gt;Access data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;set &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pretty much everything stored in Redis is going to be a type of string by default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;del &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exists &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keys &amp;lt;pattern&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find keys with certain pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keys *&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;get all keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flushall&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get rid of everything&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;expiration&#34;&gt;Expiration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ttl &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show time to live
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;-1&amp;rdquo; for no expiration&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-2&amp;rdquo; already expired&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expire &amp;lt;key&amp;gt; &amp;lt;second&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setex &amp;lt;key&amp;gt; &amp;lt;seconds&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set with expiration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data Structure&lt;/h3&gt;
&lt;h4 id=&#34;list&#34;&gt;List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lpush/rpush &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lrange &amp;lt;key&amp;gt; &amp;lt;start index&amp;gt; &amp;lt;end index&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;end index&amp;gt;&lt;/code&gt; can be -1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lpop/rpop &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set&#34;&gt;Set&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sadd &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smembers &amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;srem &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;remove&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hash&#34;&gt;Hash&lt;/h4&gt;
&lt;p&gt;Key-value in Key-value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hset &amp;lt;key&amp;gt; &amp;lt;field&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hget &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hgetall &amp;lt;key&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;get everything about &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hdel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexists &amp;lt;key&amp;gt; &amp;lt;field&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Redis doesn&amp;rsquo;t support nested hash struct&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;刪除過期-key&#34;&gt;刪除過期 key&lt;/h2&gt;
&lt;h3 id=&#34;定期刪除&#34;&gt;定期刪除&lt;/h3&gt;
&lt;p&gt;在固定間隔時間隨機抽 key 檢查並刪除&lt;/p&gt;
&lt;h3 id=&#34;惰性刪除&#34;&gt;惰性刪除&lt;/h3&gt;
&lt;p&gt;在訪問 key 的時候發現過期就刪除&lt;/p&gt;
&lt;h2 id=&#34;maxmemory-policy-eviction&#34;&gt;maxmemory-policy (Eviction)&lt;/h2&gt;
&lt;p&gt;可以設定這些 policy，在記憶體依然額滿的情況下做對應的處理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;noeviction&lt;/li&gt;
&lt;li&gt;allkeys-lru&lt;/li&gt;
&lt;li&gt;allkeys-lfu&lt;/li&gt;
&lt;li&gt;volatile-lru&lt;/li&gt;
&lt;li&gt;volatile-lfu&lt;/li&gt;
&lt;li&gt;allkeys-random&lt;/li&gt;
&lt;li&gt;volatile-random&lt;/li&gt;
&lt;li&gt;volatile-ttl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快取情境問題&#34;&gt;快取情境問題&lt;/h2&gt;
&lt;h3 id=&#34;快取雪崩-cache-avalanche&#34;&gt;快取雪崩 Cache Avalanche&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某個時刻大量 cache 失效，使資料庫需要承擔很大的流量。&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;幫 cache 加上額外的隨機過期時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取擊穿-hotspot-invalid&#34;&gt;快取擊穿 Hotspot Invalid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某個 hotspot 的 cache 失效，使大量請求跑到資料庫&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;讓 hotspot 永不過期&lt;/li&gt;
&lt;li&gt;查詢資料庫的部分加上 lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取穿透-cache-penetration&#34;&gt;快取穿透 Cache Penetration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;client request 不存在的資料，因為同時不存在於 cache 和資料庫中，所以直接跑到資料庫&lt;/li&gt;
&lt;li&gt;解法
&lt;ul&gt;
&lt;li&gt;在 application 先過濾掉非法請求&lt;/li&gt;
&lt;li&gt;Bloom Filter 布隆過濾器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;persistence&#34;&gt;Persistence&lt;/h2&gt;
&lt;h3 id=&#34;rdb&#34;&gt;RDB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;固定時間對所有資料做快照，memory dump 出來&lt;/li&gt;
&lt;li&gt;recovery 比 AOF 快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt;、&lt;code&gt;bgsave&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aof&#34;&gt;AOF&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;紀錄操作流程&lt;/li&gt;
&lt;li&gt;檔案比較肥&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rewrite&#34;&gt;Rewrite&lt;/h4&gt;
&lt;p&gt;當 AOF 太大，Redis 會生一個新文件取代舊的，用最少操作生出目前的資料&lt;/p&gt;
&lt;h3 id=&#34;混合&#34;&gt;混合&lt;/h3&gt;
&lt;p&gt;在 AOF 重寫的時候也利用 RDB
前面是 RDB，後面是 AOF&lt;/p&gt;
&lt;h2 id=&#34;availability&#34;&gt;Availability&lt;/h2&gt;
&lt;h3 id=&#34;主從同步&#34;&gt;主從同步&lt;/h3&gt;
&lt;p&gt;一主多從，把讀取壓力分擔到 slave 上&lt;/p&gt;
&lt;h3 id=&#34;哨兵模式-sentinel&#34;&gt;哨兵模式 Sentinel&lt;/h3&gt;
&lt;p&gt;會有哨兵不斷地 Ping 主從伺服器，確認是否有異常&lt;/p&gt;
&lt;p&gt;如果哨兵是集群，有哨兵檢測到異常，會判斷某伺服器主觀下線，當有一定數量的哨兵投票認為伺服器不可能用，就會變成客觀下線，進行 failover&lt;/p&gt;
&lt;h3 id=&#34;cluster&#34;&gt;Cluster&lt;/h3&gt;
&lt;p&gt;分擔寫入壓力&lt;/p&gt;
&lt;p&gt;Redis 有 16384 個 slot，透過 hash 分配 key 到不同的 slot&lt;/p&gt;
&lt;p&gt;預設會另外用 port 16379 來讓節點間溝通&lt;/p&gt;
&lt;p&gt;可以混和主從同步達到高可用&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
